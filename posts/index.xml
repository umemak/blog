<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 23 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Reactでテーブルを使う3</title><link>https://umemak.github.io/blog/posts/2022/09/23_react_table/</link><pubDate>Fri, 23 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/23_react_table/</guid><description>Tanstack Table続き。 とりあえず、公式のサンプルのように実装したら、動いた。 APIから取得したデータを使おうとすると、エラーになる。 useEffectを外してみたら、APIがすごい勢いでたたかれ続けた。 useEffectを戻したら、エラー出ずに表示された。 ？？？ APIサーバーを停止してみると、またエラー</description></item><item><title>Reactでテーブルを使う2</title><link>https://umemak.github.io/blog/posts/2022/09/22_react_table/</link><pubDate>Thu, 22 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/22_react_table/</guid><description>昨日、react-tableがGitHubで別の名前になってて気になっていた件。 最近react-tableから名前が変わったらしい。 TanStack/tableを使ってみた感想 ということでreact-table改めTanStack/Tableを導入してみた。 エラーが出て思ったように動かない。 TypeError: Cannot read properties</description></item><item><title>Reactでテーブルを使う</title><link>https://umemak.github.io/blog/posts/2022/09/21_react_table/</link><pubDate>Wed, 21 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/21_react_table/</guid><description>フォームの次は、テーブルを使って一覧表示したい。 react-table - npmが良いのかな？ GitHubだと名前が違ってたりするけど。。 TanStack/table: 🤖 Headless UI for building powerful tables &amp;amp; datagrids for TS/JS - React-Table, Vue-Table, Solid-Table, Svelte-Table 要調査。</description></item><item><title>Reactでフォームを使う</title><link>https://umemak.github.io/blog/posts/2022/09/20_react_form/</link><pubDate>Tue, 20 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/20_react_form/</guid><description>Next.jsで管理画面的なものを作るのに、フォームをどうするか調べた。 先日読んだ本では、react-hook-formを使っていたので、そのようにしてみる。 思った以上に簡単に実装できた。 積極的に使ていきたい。</description></item><item><title>OpenAPIのTypeScriptクライアント</title><link>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</guid><description>結局、いくつか動かして試してみた。additional-propertiesは無指定で。 Documentation for the typescript-fetch Generator ReferenceError: _ is not defined Documentation for the typescript-node Generator Module not found: Can't resolve 'request' requestパッケージはDeprecated!らしい。 Documentation for the typescript-axios Generator とりあえず動いた。 axiosパッケージの追加インストールが必要。 ということで、typescript-ax</description></item><item><title>OpenAPIで生成したサーバーのテスト2</title><link>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</guid><description>E2Eテスト書くなら、OpenAPIのクライアントコードジェネレータ使って出力したもの使えばよいのでは？ と思いついたので、どのクライアントにしようかとGenerators Listを眺める。 せっかくだからTypeScriptが良いなと思うが、11種類もあってどれが適切なのか判断付かない。 実際に生成して</description></item><item><title>Figma for UIデザイン</title><link>https://umemak.github.io/blog/posts/2022/09/17_figma_book/</link><pubDate>Sat, 17 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/17_figma_book/</guid><description>先日、アドビはFigmaを買収する意向を表明しました。共同クリエイティビティは新時代へというニュースを見て、セールで買って積んであったAmazon.co.jp: Figma for UIデザイン アプリ開発のためのデザイン、プロトタイプ、ハンドオフ eBook : 沢田 俊介: 本を急いで読んだ。 一通りのFigmaでできることを知ること</description></item><item><title>OpenAPIで生成したサーバーのテスト</title><link>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</guid><description>よくわからない。 ググるとhttptest使う例が良く出てくるけど、型が合わなくて組み立てられない。 仕方ないので、APIサーバー起動してhttp.NewRequestWithContextで叩いて結果を見るという、E2Eっぽいテストに落ち着きそう。</description></item><item><title>chiでproxy</title><link>https://umemak.github.io/blog/posts/2022/09/15_chi_proxy/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/15_chi_proxy/</guid><description>grpc-gatewayでgRPCとREST両対応のサーバを作る | フューチャー技術ブログのサンプルでmux.Handle(&amp;quot;/docs/&amp;quot;, docsProxy)となっているところを、go-chi/chi: lightweight, idiomatic and composable router for building Go HTTP servicesを使っているのでrouter.Handle</description></item><item><title>proto</title><link>https://umemak.github.io/blog/posts/2022/09/14_proto/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/14_proto/</guid><description>昨日のエラーは、grpc-ecosystem/grpc-gateway: gRPC to JSON proxy generator following the gRPC HTTP specにあるようにbuf.yamlに deps: - buf.build/googleapis/googleapis を追記してbuf mod updateを実行したら直ったような気がする。 気がする、というのは他にもprotoファイルをダウンロードしてきたりとかいろいろやっていて何が決定打だ</description></item></channel></rss>