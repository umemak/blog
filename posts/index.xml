<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 01 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Parcelを使ってみる</title><link>https://umemak.github.io/blog/posts/2022/05/01_parcel/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/01_parcel/</guid><description>久しぶりにJavaScript（TypeScript）を書こうとしたら、何から始めてよいかわからなくなっていた。 あまり環境構築に手間をかけたくなかったので、parcel-bundler/parcel: The zero configuration build tool for the web. 📦🚀を使ってみた。 Building a web app with Parcelを見ながら npm init npm install --save-dev parcel src/index.h</description></item><item><title>Magenta.js</title><link>https://umemak.github.io/blog/posts/2022/04/30_magenta/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/30_magenta/</guid><description>昨日のcifkao/html-midi-player: 🎹 Play and display MIDI files on the webの使い方見ようとして、magenta-js/music at master · magenta/magenta-jsを使っているのを知った。 Magentaは出始めのときにそんなのがあるのか、って思って深くは見ていなかったのだけど、今度はちゃんと</description></item><item><title>MDMMLのJavaScript移植</title><link>https://umemak.github.io/blog/posts/2022/04/29_mdmml_js/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/29_mdmml_js/</guid><description>Rust移植は未完だけれどもいい勉強になった。 今度はJavaScript（TypeScript）に移植しようと思う。 というのもcifkao/html-midi-player: 🎹 Play and display MIDI files on the webと連携してブラウザで完結出来たら良さそうなので。 もともとのGoの実装でも、サーバー立てるなりローカルにバ</description></item><item><title>GitHub Actionsのmatrix</title><link>https://umemak.github.io/blog/posts/2022/04/28_github_actions/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/28_github_actions/</guid><description>GitHub Actionsのワークフロー構文 - GitHub Docs このjobs.&amp;lt;job_id&amp;gt;.strategy.matrixは、jobに含まれるstepsをmatrixの組み合わせでループ実行するという理解。 同じようなことを、step単位でやりたいときにうまい方法がないかなぁ、と。 jobs:example:steps:- name:example beginrun:echo &amp;#34;begin&amp;#34;- name:example Arun:echo &amp;#34;A&amp;#34;- name:example Brun:echo &amp;#34;</description></item><item><title>オーディオインターフェース選び</title><link>https://umemak.github.io/blog/posts/2022/04/27_audio_interface/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/27_audio_interface/</guid><description>Amazonのタイムセール祭りでオーディオインターフェース買おうと思っていたけれど、特に安くなってなかったので見送った。 候補はこの辺り Focusrite フォーカスライト オーディオインターフェース 2イン/2アウト 24bit/192kHz Scarlett Solo (3rd Gen) ステッカー付きセット 【国内正規品】 : 楽器・音響機器 Amazon | audient 「EVO4」2in/2out オーディオ・</description></item><item><title>ginkgoの特殊機能とは？</title><link>https://umemak.github.io/blog/posts/2022/04/26_ginkgo/</link><pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/26_ginkgo/</guid><description>昨日の調べもので出てきた、 Ginkgo has several capabilities that can only be accessed via ginkgo. （Ginkgoには、ginkgoを経由してしかアクセスできない機能がいくつかあります。） そのいくつかの機能を知りたい。 https://onsi.github.io/ginkgo/#ginkgo-cli-overview には、コマンドライン引数について書かれているが、むしろginkgoでサポートしていないものがあるという記述なので、思っていたのとは違</description></item><item><title>ginkgoとgo test</title><link>https://umemak.github.io/blog/posts/2022/04/25_ginkgo/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/25_ginkgo/</guid><description>GinkgoのV1とV2のテストケースが混在しているときに、V2のCLIでV1用のコードをテストしようとすると、ginkgo.timeoutが定義されてい内的なエラーになってしまう（うろ覚え）。 importをv2にすれば多分良いのだけれど、そうしなくても、テストの実行をgo testに任せれば、imp</description></item><item><title>Screeps: Arena体験</title><link>https://umemak.github.io/blog/posts/2022/04/24_screeps_arena/</link><pubDate>Sun, 24 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/24_screeps_arena/</guid><description>Steam：Screeps: ArenaのDemo版をやってみた。 チュートリアルの途中までやったけど、普通に何か自分で開発してたほうが良いかな。 ノートPCで1画面でやってると、VS CodeとScreepsの行き来が面倒だったので、エディタは内蔵されていたほうが良いと思った。</description></item><item><title>HugoにAlgoliaを導入してみる</title><link>https://umemak.github.io/blog/posts/2022/04/23_hugo_search/</link><pubDate>Sat, 23 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/23_hugo_search/</guid><description>Algoliaを使ってブログに全文検索をつける（検索ページ編） - PIYO - Tech &amp;amp; Life - を見ながらやって、何とか検索できるのはできたんだけど、色々混ぜて試行錯誤した結果、よくわからないものになってしまっている現状。 なおGitHub Actionsへの組み込みはまだ。</description></item><item><title>HugoにAlgoliaを導入してみる</title><link>https://umemak.github.io/blog/posts/2022/04/22_hugo_search/</link><pubDate>Fri, 22 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/22_hugo_search/</guid><description>Hugo + Algolia + Instantsearch.jsで静的サイトに全文検索を導入 - OTTANXYZを見ながらやってみた。 とりあえずローカルでできることを確認してから、GitHub Actionsに組み込もうかと。 で、上記サイトは設定ファイルがYAMLだったのでTOMLで書くところで躓いた。 [outputFormats.Algolia] baseName = &amp;#34;algolia&amp;#34; isPlainText = true mediaType = &amp;#34;application/json&amp;#34; notAlternative =</description></item></channel></rss>