<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 19 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>テスト追加</title><link>https://umemak.github.io/blog/posts/2022/02/19_mdmml_test/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/19_mdmml_test/</guid><description>MDMMLで関数分割してテスト反映してなかったりしていたのを追加。 パラメータゼロ値で呼んだら落ちたり思ったのと違う動きをしていたり。 テストもたまに見返すと面白い。</description></item><item><title>Ginkgoわからん</title><link>https://umemak.github.io/blog/posts/2022/02/18_ginkgo/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/18_ginkgo/</guid><description>MDMMLじゃない話。 https://onsi.github.io/ginkgo/ でテストを、 Describe(){ Context(){ // 準備 It(){ Expect() } // 次の準備 It(){ Expect() } // 後片付け } } みたいな感じで書いていたら、思った通りの動きにならなくてハマった。 どうやら、Contextの中は上から順番に実行されるのではなく、 Describe(){ Context(){ // 準備 // 次の準備 // 後片付け It(){ Expect() } It(){ Expect() } } } となるらしい。 やりたい順番で実行したければ</description></item><item><title>MDMML CI構築</title><link>https://umemak.github.io/blog/posts/2022/02/17_mdmml/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/17_mdmml/</guid><description>いまさらながらGitHub ActionsでCIを設定した。 Actionsのバージョン指定なしgoは1.15.15なんだね。もうじき1.18が出るのに。</description></item><item><title>crontabの範囲指定について</title><link>https://umemak.github.io/blog/posts/2022/02/16_crontab/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/16_crontab/</guid><description>crontab、-で範囲指定ができるけれど、大小関係が逆だったらどうなるか気になったので調べてみた。 59-1 * * * * time こういうやつ。 dockerでalpine使って動かしたところ、想定通り59,0,1で実行された。</description></item><item><title>リファクタリング</title><link>https://umemak.github.io/blog/posts/2022/02/16_mdmml/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/16_mdmml/</guid><description>通らなくなっていたテストを通した。 バイナリものはパッと見でどこが違うかわかりにくいのが難点。。</description></item><item><title>リファクタリング</title><link>https://umemak.github.io/blog/posts/2022/02/15_mdmml/</link><pubDate>Tue, 15 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/15_mdmml/</guid><description>データ構造の変更と、それに関連する部分を修正。 テーブルのセルごとに読み込んで保持するようにした。 テストが通らなくなった。。 セル（小節）ごとに変換したら、ループとか現在のオクターブとか状態として持たせないといけないのか・・ちょっと、あまり、よくない気がする。</description></item><item><title>マークダウンパーサーを使ってみたが</title><link>https://umemak.github.io/blog/posts/2022/02/14_mdmml/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/14_mdmml/</guid><description>やりたかったのは、hタグでセクションをブロック化して取り出して加工だったのだけど、 実際やってみて、hタグでブロック化はHTML的にも無理じゃんってなった。 結局自前でやっていくしかないのか。。 で、これをやっていて思いついたのが、今は読み捨てているテーブルのヘッダー部分をセクション代わりに使えないかなと</description></item><item><title>goldmarkを読む</title><link>https://umemak.github.io/blog/posts/2022/02/13_goldmark/</link><pubDate>Sun, 13 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/13_goldmark/</guid><description>難解だと思って避けていたASTを直接見れば、goqueryを使わなくてもよいのでは？と思ってgoldmarkのソースを眺めてみた。 rendererのhtml.goが参考になると思うんだけど、なかなか長大な感じ。 RegisterFuncsで各要素ごとの処理を登録していけばよいのかな。 うーん。変換結果と</description></item><item><title>ライブラリの力を借りる</title><link>https://umemak.github.io/blog/posts/2022/02/12_mdmml/</link><pubDate>Sat, 12 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/12_mdmml/</guid><description>機能を追加していってだんだんマークダウンのパターンマッチが面倒になってきたので、パーサー使おうかと。 マークダウンのパーサーはyuin/goldmark: A markdown parser written in Go. Easy to extend, standard(CommonMark) compliant, well structured.が良さそう。 で、HTMLに変換したのをPuerkitoBio/goquery: A little like that j-thing, only in Go.で必</description></item><item><title>構成指定実装</title><link>https://umemak.github.io/blog/posts/2022/02/11_mdmml/</link><pubDate>Fri, 11 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/11_mdmml/</guid><description>結局、Sectionsで実装することにした。 データ構造変更したのでテストも修正。修正の影響範囲がわかるから、テスト書いておいてよかったと思う。</description></item></channel></rss>