<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 04 Jul 2025 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>開発生産性Conference 2025 Day2</title><link>https://umemak.github.io/blog/posts/2025/07/04_dev-productivity-con/</link><pubDate>Fri, 04 Jul 2025 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2025/07/04_dev-productivity-con/</guid><description>&lt;p>開発生産性カンファレンス2025の2日目の聴講メモです。&lt;/p>
&lt;p>受付は並ばずできて、昨日の混雑はKent Beckのせいだったようです。&lt;/p>
&lt;h2 id="開発生産性向上の探求devopsの進化普遍的な原則そして生成aiがもたらす変革">開発生産性向上の探求：DevOpsの進化、普遍的な原則、そして生成AIがもたらす変革&lt;/h2>
&lt;p>Gene Kim&lt;/p>
&lt;ul>
&lt;li>
&lt;p>DevOpsのビジネス価値は我々の想定よりさらに高い&lt;/p>
&lt;/li>
&lt;li>
&lt;p>ハイパフォーマーはより安全で管理しやすい&lt;/p>
&lt;ul>
&lt;li>市場で勝つのはハイパフォーマー&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="開発生産性ではなく事業の投資対効果に向き合う事業生産性へ">「開発生産性」ではなく、事業の投資対効果に向き合う「事業生産性」へ&lt;/h2>
&lt;p>山口拓弥&lt;/p>
&lt;ul>
&lt;li>
&lt;p>生産性の本質&lt;/p>
&lt;ul>
&lt;li>
&lt;p>レベル1：チーム&lt;/p>
&lt;/li>
&lt;li>
&lt;p>レベル2：組織&lt;/p>
&lt;/li>
&lt;li>
&lt;p>レベル3：部門&lt;/p></description></item><item><title>開発生産性Conference 2025 Day1</title><link>https://umemak.github.io/blog/posts/2025/07/03_dev-productivity-con/</link><pubDate>Thu, 03 Jul 2025 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2025/07/03_dev-productivity-con/</guid><description>&lt;p>開発生産性カンファレンス2025の1日目の聴講メモです。&lt;/p>
&lt;p>最初の受付から行列になっていて人気度の高さを感じました。&lt;/p>
&lt;h2 id="開発生産性測定のトレードオフ-グッドハートの法則はもっと悲観的に捉えるべきだった">開発生産性測定のトレードオフ 「グッドハートの法則」はもっと悲観的に捉えるべきだった&lt;/h2>
&lt;p>Kent Beck&lt;/p>
&lt;ul>
&lt;li>
&lt;p>計測は必要だが、それを指標とすると、思った効果が得られない&lt;/p>
&lt;ul>
&lt;li>PR数、コード行数、障害発生数
&lt;ul>
&lt;li>すぐにハックされる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>AIとの協働により、この問題は加速する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>
&lt;p>いくつ作成したかではなく、いくつ学んだかを大切にする&lt;/p></description></item><item><title>PHP Conference Japan 2025</title><link>https://umemak.github.io/blog/posts/2025/06/28_phpcon2025/</link><pubDate>Sat, 28 Jun 2025 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2025/06/28_phpcon2025/</guid><description>&lt;p>PHPカンファレンス2025に参加してきました。&lt;/p>
&lt;p>&lt;a href="https://phpcon.php.gr.jp/2025/">https://phpcon.php.gr.jp/2025/&lt;/a>&lt;/p>
&lt;p>2024に続いて2回目の参加です。&lt;/p>
&lt;h2 id="phpの今とこれから-2025-by-廣川-類">PHPの今とこれから 2025 by 廣川 類&lt;/h2>
&lt;p>&lt;a href="https://fortee.jp/phpcon-2025/proposal/ba73ff87-93ff-4772-8003-43f246a310ae">https://fortee.jp/phpcon-2025/proposal/ba73ff87-93ff-4772-8003-43f246a310ae&lt;/a>&lt;/p>
&lt;p>シェアはあまり変化なし&lt;/p>
&lt;p>11月に8.5リリース予定
　パイプ演算子など&lt;/p>
&lt;p>8.0以前の利用者は、まだ世界で6割くらいいる&lt;/p>
&lt;p>8.0以前のバックポートもあるが、オススメはアクティブバージョンにアップデートすること&lt;/p>
&lt;p>CVE-2024-8929 MySQLサーバ情報の漏洩
　やばそう&lt;/p></description></item><item><title>Amazon Q CLIでゲームを作成する</title><link>https://umemak.github.io/blog/posts/2025/06/08_amazon_q_cli/</link><pubDate>Sun, 08 Jun 2025 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2025/06/08_amazon_q_cli/</guid><description>&lt;p>&lt;a href="https://aws.amazon.com/jp/blogs/news/build-games-with-amazon-q-cli-and-score-a-t-shirt/">Amazon Q CLI でゲームを作ろう Tシャツキャンペーン&lt;/a>に乗っかってAmazon Q CLIを試してみた。&lt;/p>
&lt;p>環境はWindows11でWSL2(Ubuntu)。&lt;/p>
&lt;p>お題は、&lt;a href="https://ebitengine.org/ja/">Ebitengine&lt;/a>を使ったゲームを作ってもらうこと。&lt;/p>
&lt;pre tabindex="0">&lt;code>🤖 You are chatting with claude-3.7-sonnet

&amp;gt; Ebitengineを使ったゲームを作って
Ebitengineを使ったゲームを作りましょう。Ebitengineは、Goで書かれた2Dゲーム開発のためのシンプルなライブラリです。ま
ずは基本的なゲームを作成してみましょう。

まず、プロジェクトディレクトリを作成し、必要なパッケージをインストールします：


🛠️ Using tool: execute_bash
 ⋮
 ● I will run the following shell command:
mkdir -p ebiten-game &amp;amp;&amp;amp; cd ebiten-game &amp;amp;&amp;amp; go mod init ebiten-game
 ⋮
 ↳ Purpose: ゲームプロジェクトのディレクトリを作成し、Go moduleを初期化


Allow this action? Use &amp;#39;t&amp;#39; to trust (always allow) this tool for the session. [y/n/t]:

&amp;gt; t
bash: line 1: go: command not found

 ⋮
 ● Completed in 0.103s
すみません、Goがインストールされていないようです。まずはGoをインストールする必要があります。


🛠️ Using tool: execute_bash (trusted)
 ⋮
 ● I will run the following shell command:
which go || echo &amp;#34;Go is not installed&amp;#34;
 ⋮
 ↳ Purpose: Goがインストールされているか確認

Go is not installed

 ⋮
 ● Completed in 0.110s
Ebitengineを使ったゲームを作るには、まずGoをインストールする必要があります。Goをインストールした後、以下の手順でシ
ンプルなゲームを作成できます。

### Goのインストール方法

Linuxでは、以下のコマンドでGoをインストールできます：

bash
# Ubuntuの場合
sudo apt update
sudo apt install golang-go

# Fedoraの場合
sudo dnf install golang

# Arch Linuxの場合
sudo pacman -S go


### Goをインストールした後の手順

1. プロジェクトディレクトリを作成し、Go moduleを初期化
2. Ebitengineパッケージをインストール
3. シンプルなゲームコードを作成

### シンプルなゲームのコード例

Goをインストールした後、以下のようなコードでシンプルなゲームを作成できます：

go
package main

import (
 &amp;#34;image/color&amp;#34;
 &amp;#34;log&amp;#34;
 &amp;#34;math/rand&amp;#34;

 &amp;#34;github.com/hajimehoshi/ebiten/v2&amp;#34;
 &amp;#34;github.com/hajimehoshi/ebiten/v2/ebitenutil&amp;#34;
 &amp;#34;github.com/hajimehoshi/ebiten/v2/inpututil&amp;#34;
)

const (
 screenWidth = 640
 screenHeight = 480
 playerSize = 20
 enemySize = 15
 enemyCount = 5
)

type Game struct {
 playerX, playerY float64
 enemies []enemy
 score int
}

type enemy struct {
 x, y float64
 speedX, speedY float64
}

func (g *Game) Update() error {
 // プレイヤーの移動
 if ebiten.IsKeyPressed(ebiten.KeyUp) {
 g.playerY -= 4
 }
 if ebiten.IsKeyPressed(ebiten.KeyDown) {
 g.playerY += 4
 }
 if ebiten.IsKeyPressed(ebiten.KeyLeft) {
 g.playerX -= 4
 }
 if ebiten.IsKeyPressed(ebiten.KeyRight) {
 g.playerX += 4
 }

 // 画面端の処理
 if g.playerX &amp;lt; 0 {
 g.playerX = 0
 }
 if g.playerX &amp;gt; screenWidth-playerSize {
 g.playerX = screenWidth - playerSize
 }
 if g.playerY &amp;lt; 0 {
 g.playerY = 0
 }
 if g.playerY &amp;gt; screenHeight-playerSize {
 g.playerY = screenHeight - playerSize
 }

 // 敵の移動
 for i := range g.enemies {
 g.enemies[i].x += g.enemies[i].speedX
 g.enemies[i].y += g.enemies[i].speedY

 // 画面端での反射
 if g.enemies[i].x &amp;lt;= 0 || g.enemies[i].x &amp;gt;= screenWidth-enemySize {
 g.enemies[i].speedX = -g.enemies[i].speedX
 }
 if g.enemies[i].y &amp;lt;= 0 || g.enemies[i].y &amp;gt;= screenHeight-enemySize {
 g.enemies[i].speedY = -g.enemies[i].speedY
 }

 // 衝突判定
 if g.playerX &amp;lt; g.enemies[i].x+enemySize &amp;amp;&amp;amp;
 g.playerX+playerSize &amp;gt; g.enemies[i].x &amp;amp;&amp;amp;
 g.playerY &amp;lt; g.enemies[i].y+enemySize &amp;amp;&amp;amp;
 g.playerY+playerSize &amp;gt; g.enemies[i].y {
 // 敵を新しい位置に
 g.enemies[i].x = rand.Float64() * (screenWidth - enemySize)
 g.enemies[i].y = rand.Float64() * (screenHeight - enemySize)
 g.score++
 }
 }

 // Rキーでリセット
 if inpututil.IsKeyJustPressed(ebiten.KeyR) {
 g.init()
 }

 return nil
}

func (g *Game) Draw(screen *ebiten.Image) {
 // 背景
 screen.Fill(color.RGBA{40, 40, 60, 255})

 // プレイヤー
 ebitenutil.DrawRect(screen, g.playerX, g.playerY, playerSize, playerSize, color.RGBA{0, 255, 0, 255})

 // 敵
 for _, e := range g.enemies {
 ebitenutil.DrawRect(screen, e.x, e.y, enemySize, enemySize, color.RGBA{255, 0, 0, 255})
 }

 // スコア表示
 ebitenutil.DebugPrint(screen, &amp;#34;Score: &amp;#34;+string(rune(&amp;#39;0&amp;#39;+g.score)))
}

func (g *Game) Layout(outsideWidth, outsideHeight int) (int, int) {
 return screenWidth, screenHeight
}

func (g *Game) init() {
 g.playerX = screenWidth / 2
 g.playerY = screenHeight / 2
 g.score = 0
 g.enemies = make([]enemy, enemyCount)

 for i := range g.enemies {
 g.enemies[i] = enemy{
 x: rand.Float64() * (screenWidth - enemySize),
 y: rand.Float64() * (screenHeight - enemySize),
 speedX: (rand.Float64()*2 - 1) * 2,
 speedY: (rand.Float64()*2 - 1) * 2,
 }
 }
}

func main() {
 ebiten.SetWindowSize(screenWidth, screenHeight)
 ebiten.SetWindowTitle(&amp;#34;Simple Ebiten Game&amp;#34;)

 game := &amp;amp;Game{}
 game.init()

 if err := ebiten.RunGame(game); err != nil {
 log.Fatal(err)
 }
}


このゲームは、緑色の四角（プレイヤー）を矢印キーで動かして、赤い四角（敵）に当たるとスコアが増えるシンプルなもので
す。Rキーを押すとゲームをリセットできます。

Goをインストールした後、以下のコマンドでEbitengineをインストールし、ゲームを実行できます：

bash
go get github.com/hajimehoshi/ebiten/v2
go run main.go


Goのインストールが完了したら、お知らせください。その後、詳細な手順でゲーム作成をサポートします。

&amp;gt;
&lt;/code>&lt;/pre>&lt;p>goをインストールして再実行&lt;/p></description></item><item><title>PHP Conference Japan 2024</title><link>https://umemak.github.io/blog/posts/2024/12/22_phpcon2024/</link><pubDate>Sun, 22 Dec 2024 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2024/12/22_phpcon2024/</guid><description>&lt;p>&lt;a href="https://phpcon.php.gr.jp/2024/">PHP Conference Japan 2024&lt;/a>に行ってきました。
PHP Conferenceは初参加です。&lt;/p>
&lt;p>トラック1とトラック2は配信があったので、それ以外のトラックを主に見て回りました。
見たセッションはテスト系の話が多く、参考になりました。&lt;/p>
&lt;h1 id="phpの今とこれから2024-by-廣川-類">&lt;a href="https://fortee.jp/phpcon-2024/proposal/785c0984-90b3-4c98-93c2-0665d1874b74">PHPの今とこれから2024 by 廣川 類&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>PHPは1995年の登場からwebの進化とともに成長してきた&lt;/li>
&lt;li>今年は日本人がたくさん開発に参加した年&lt;/li>
&lt;li>EOLバージョンの対応
&lt;ul>
&lt;li>ディストリビューションがメンテ&lt;/li>
&lt;li>Remiバックポート（非公式）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>8.4の新機能
&lt;ul>
&lt;li>JITの改善
&lt;ul>
&lt;li>中間表現を使用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>プロパティアクセスフック&lt;/li>
&lt;li>非対称プロパティ可視性&lt;/li>
&lt;li>遅延オブジェクト
&lt;ul>
&lt;li>Lazyゴースト、プロキシの2種類ある&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>HTML5対応、DOM対応改善
&lt;ul>
&lt;li>HTML5はすでに廃止された
など&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FRANKENPHP&lt;/li>
&lt;li>PHPは進化し続けることが必要&lt;/li>
&lt;/ul>
&lt;h1 id="良いテストコードを書くためのガイドライン作成から運用まで-by-rikuto">&lt;a href="https://fortee.jp/phpcon-2024/proposal/7edc5567-d741-4d6a-bfa7-732afb7dd311">良いテストコードを書くためのガイドライン〜作成から運用まで〜 by rikuto&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>開発者が行う自動テスト&lt;/li>
&lt;li>なぜテストするのか
&lt;ul>
&lt;li>バグを早い段階で検出する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>良いテスト
&lt;ul>
&lt;li>実装の詳細ではなく振る舞いをテストする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ふるまいのテスト
&lt;ul>
&lt;li>得られた値が想定通りかのテスト&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>実装の詳細のテスト
&lt;ul>
&lt;li>モックを利用したテスト
&lt;ul>
&lt;li>関数内での呼び出しを確認するのみ
&lt;ul>
&lt;li>仕様の変更に追従できない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ふるまいのテストをできるコードにする意
&lt;ul>
&lt;li>実装の詳細を公開すると、ふるまいをテストしにくい
&lt;ul>
&lt;li>ふるまいだけを公開する&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>モックの利用は最小限にする
&lt;ul>
&lt;li>自分たちの管理街にあるもの
&lt;ul>
&lt;li>外部APIなど&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>どこにどんなテストを書けばよいのか
&lt;ul>
&lt;li>テストレベル
&lt;ul>
&lt;li>単体＜統合＜E2E&lt;/li>
&lt;li>下位レベルのテストで担保しているものは高レベルでは省略できる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ガイドラインの作成
&lt;ul>
&lt;li>本のコピー、抜粋ではなく現場の例で具体的に&lt;/li>
&lt;li>ルールを厳しくしすぎない&lt;/li>
&lt;li>重要度別に優先度を設定&lt;/li>
&lt;li>作って終わりにしてはいけない
&lt;ul>
&lt;li>定着するところまでする&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="psr-15-はあなたのためのものではない-by-やまゆ">&lt;a href="https://fortee.jp/phpcon-2024/proposal/2d20b933-0aed-4809-90fc-42ebf830e586">PSR-15 はあなたのためのものではない？ by やまゆ&lt;/a>&lt;/h1>
&lt;ul>
&lt;li>
&lt;p>RequestHandlerInterface&lt;/p></description></item><item><title>DifyをDockerで試す</title><link>https://umemak.github.io/blog/posts/2024/06/09_dify_docker/</link><pubDate>Sun, 09 Jun 2024 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2024/06/09_dify_docker/</guid><description>&lt;p>&lt;a href="https://dify.ai/jp">Dify.AI · 先進的なAIアプリケーションのためのイノベーションエンジン&lt;/a>をローカルPCのDockerで試す。&lt;/p>
&lt;p>手順は&lt;a href="https://docs.dify.ai/getting-started/install-self-hosted/docker-compose">Docker Compose Deployment | English | Dify&lt;/a>を参照。&lt;/p>
&lt;p>とくに問題なく起動したので、テンプレートから新規作成して、OpenAIのAPIキーを作成して設定した、が先に進めず。&lt;/p></description></item><item><title>ObsidianにRemotely Saveを導入した</title><link>https://umemak.github.io/blog/posts/2024/04/21_obsidian_remotely_save/</link><pubDate>Sun, 21 Apr 2024 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2024/04/21_obsidian_remotely_save/</guid><description>&lt;p>&lt;a href="https://github.com/remotely-save/remotely-save">GitHub - remotely-save/remotely-save: Yet another unofficial Obsidian plugin allowing users to synchronize notes between local device and the cloud service. Supports S3, Dropbox, OneDrive, webdav.&lt;/a>&lt;/p>
&lt;p>バックアップ先は&lt;a href="https://www.cloudflare.com/ja-jp/developer-platform/r2/">Cloudflare R2&lt;/a>を選択。
最近、Cloudflare気になっていたので良い機会。&lt;/p>
&lt;p>設定手順も&lt;a href="https://github.com/remotely-save/remotely-save/blob/master/docs/remote_services/s3_cloudflare_r2/README.md">remotely-save/docs/remote_services/s3_cloudflare_r2/README.md&lt;/a>の通りで問題なかった。&lt;/p>
&lt;p>ただ、E2E encryptionを設定したら、iPhone8やiPad air4には重すぎたようで同期が完了しないことがしばしば。
暗号化しなければ常識的な時間で同期できる。&lt;/p></description></item><item><title>Windowsでbunを試す</title><link>https://umemak.github.io/blog/posts/2024/04/03_bun/</link><pubDate>Wed, 03 Apr 2024 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2024/04/03_bun/</guid><description>&lt;p>&lt;a href="https://bun.sh/">Bun — A fast all-in-one JavaScript runtime&lt;/a>&lt;/p>
&lt;p>v1.1でWindowsにも対応したということなので、Surface go 2で試してみた。&lt;/p>
&lt;pre tabindex="0">&lt;code>$ bun create next-app
√ What is your project named? ... bun-next-app
√ Would you like to use TypeScript? ... No / Yes
√ Would you like to use ESLint? ... No / Yes
√ Would you like to use Tailwind CSS? ... No / Yes
√ Would you like to use `src/` directory? ... No / Yes
√ Would you like to use App Router? (recommended) ... No / Yes
√ Would you like to customize the default import alias (@/*)? ... No / Yes
√ What import alias would you like configured? ... @/*
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ cd bun-next-app/
$ bun --bun run dev
$ next dev
 ▲ Next.js 14.1.4
 - Local: http://localhost:3000

 ✓ Ready in 9.1s
 ○ Compiling / ...
&lt;/code>&lt;/pre>&lt;p>で終了して、終了できない枠だけのターミナルが起動した。&lt;/p></description></item><item><title>英語学習</title><link>https://umemak.github.io/blog/posts/2024/01/14_english/</link><pubDate>Sun, 14 Jan 2024 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2024/01/14_english/</guid><description>&lt;p>&lt;a href="https://www.amazon.co.jp/dp/B00INUXZ8S">ITエンジニアのゼロから始める英語勉強法（日経BP Next ICT選書） | 牛尾剛 | 英語 | Kindleストア | Amazon&lt;/a>を読んだ。&lt;/p>
&lt;p>書籍では、学習用のCDを買ってひたすら聞きこむところから始めるのだけれど、おすすめの教材のAmazon評価がいまいちなので、別の教材がないか考えた。&lt;/p>
&lt;p>あとで答え合わせをするために、文字起こしがあることを条件にすると、AWSのPodcastがそうだったのを思い出した。&lt;/p></description></item><item><title>Cursor入門</title><link>https://umemak.github.io/blog/posts/2023/11/23_cursor/</link><pubDate>Thu, 23 Nov 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/11/23_cursor/</guid><description>&lt;p>&lt;a href="https://cursor.sh/">Cursor - The AI-first Code Editor&lt;/a>を試してみた。&lt;/p>
&lt;p>&lt;code>New AI Project&lt;/code>でFlutterアプリ作成してみようとしたところ、作成するファイルのリストアップしてくれたところで終わってしまった。&lt;/p>
&lt;p>ファイルの中身まで作ってくれること期待してたのだけど、そこまではやってくれない？よくわからない。&lt;/p>
&lt;p>もう少し使い込んでみようと思う。&lt;/p></description></item></channel></rss>