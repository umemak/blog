<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 05 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>CentOS6にgiteaをインストールする</title><link>https://umemak.github.io/blog/posts/2020/06/05_gitea/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/05_gitea/</guid><description>WikiはGitHubにも付いているのを思い出して、単独のWikiではなくGitHubクローンを試してみる。 GitLabとか重量系は最初からあきらめて、Goで書かれたシングルバイナリの軽量OSS、Giteaで挑戦。 VMはいつものGCP無料枠のやつ。 OSはCentOS6でディスクは30GB。 MySQL</description></item><item><title>GAS入門</title><link>https://umemak.github.io/blog/posts/2020/05/28_gas/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/28_gas/</guid><description>今まで存在は知っていたし、Kindle Unlimitedで読める入門書を読んだりはしていた。 ここにきてようやく実際に手を動かしてみたので、その感想。 作ったものは、POSTリクエストを受けて、スプレッドシートのA列に入力と同じ文字列があれば、B列の内容を返すというもの。 学び * スクリプトを修正したときは</description></item><item><title>Surface Go 2でWSL2&#43;Dokcer</title><link>https://umemak.github.io/blog/posts/2020/05/28_wsl/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/28_wsl/</guid><description>Windows 10大型アップデート「May 2020 Update」がダウンロード開始 という記事を見て、さっそく更新して、WSLとUbuntuをインストールしてみた。 とくに問題なく完了。 そしてdockerもインストール。 https://docs.docker.com/engine/install/ubuntu/ Add Docker’s official GPG key:のところでエラー。 WSLをインストールしただけでは、WSL2ではないら</description></item><item><title>Duetを使ってみる</title><link>https://umemak.github.io/blog/posts/2020/05/25_duet_display/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/25_duet_display/</guid><description>https://ja.duetdisplay.com/ Google Playの300円クーポンが有効期限間近だったので買ってみた。 spacedeskでも特に不便なくつかえていたのだけれど、有料アプリも試してみたかった。 環境はSurface Go2がホストでChromebook C101PA（Androidアプリ）がモニタでWiFi接続。 モバイルモニタの接続で使ってい</description></item><item><title>nginxで80番ポートの向き先を変更する</title><link>https://umemak.github.io/blog/posts/2020/05/25_nginx/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/25_nginx/</guid><description>Wiki.jsをservice化したときに、nobodyユーザーだと80番ポートでlistenできないので、Wiki（node.js）はデフォルトの3000番に戻して、nginxでプロキシすることにした。 https://docs.requarks.io/install/linux のRun as serviceをやりたかった。 ホームディレクトリに展開していたwikiを/var/に</description></item><item><title>Wiki.jsを試す</title><link>https://umemak.github.io/blog/posts/2020/05/24_wikijs/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/24_wikijs/</guid><description>GCP無料枠でWikiを動かしてみるシリーズ。 今回はWiki.js。 docker-composeを使う方法も用意されているが、軽量優先で通常インストールのほうで。 https://docs.requarks.io/install/linux config.ymlの編集では、ポートを80に、DBをsqliteに変更した。 $ sudo apt install wget nodejs npm $ wget https://github.com/Requarks/wiki/releases/download/2.3.81/wiki-js.tar.gz $ mkdir wiki $ tar xzf wiki-js.tar.gz -C ./wiki $ cd ./wiki $ mv config.sample.yml config.yml $ nano config.yml</description></item><item><title>第三回アルゴリズム実技検定受けてみた</title><link>https://umemak.github.io/blog/posts/2020/05/23_past/</link><pubDate>Sat, 23 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/23_past/</guid><description>https://past.atcoder.jp/ リアルタイム受験と通常受験があって、リアルタイム受験の方をやってみた。 まだ通常受験の期間内なので、内容について口外できない。 6月6日を過ぎたら書きたいことを書こうと思う。</description></item><item><title>Surface Go 2を入手</title><link>https://umemak.github.io/blog/posts/2020/05/20_surfacego2/</link><pubDate>Wed, 20 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/20_surfacego2/</guid><description>昨日注文して今日届いた。 最近、Chromebookだけだと作業効率が悪いことがあって、Intel系CPUでWindowsOSで軽量で解像度がそれなりにあるものを探していたので。 C101PAを買う前に、最後まで比較したのが初代Goだったのもあり、やはり自分で使ってみないと評価できないよね、と。</description></item><item><title>DenoをChromebookで使ってみる</title><link>https://umemak.github.io/blog/posts/2020/05/15_deno/</link><pubDate>Fri, 15 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/15_deno/</guid><description>Denoのバージョン1が出たというニュース記事を見て、試してみた。 https://deno.land/v1 Node.jsを作者自ら作り直したもの。 最初にRaspberry Pi 4で試したところ、公式のインストーラーがx86_64しか対応していなかったので断念。 ソースからビルドする手順も試してみたけれど、途中でエラーになってしまう。 armで動</description></item><item><title>VSCode onlineがVSCodespaceに改名</title><link>https://umemak.github.io/blog/posts/2020/05/01_vscodeonline/</link><pubDate>Fri, 01 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/01_vscodeonline/</guid><description>改名というよりは、ベータ版から正式名称になったという方が正しいか。 https://devblogs.microsoft.com/visualstudio/introducing-visual-studio-codespaces/ ということで、先日作成したのを見に行ったら、 Chrome OS未対応・・・！ どういう理由だろう。。</description></item></channel></rss>