<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 02 Sep 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Flutterに入門</title><link>https://umemak.github.io/blog/posts/2020/09/02_hello_flutter/</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/09/02_hello_flutter/</guid><description>Surface Go 2 に Flutter Web 環境をインストールしたのでメモ。 基本的には公式手順に沿って進める。 gitからclone $ cd ~/workspace $ git clone https://github.com/flutter/flutter.git -b stable 環境変数PATHに追加 ユーザー環境変数の最後に追加した flutter doctor実行 [√] Flutter (Channel stable, 1.20.2, on Microsoft Windows [Version 10.0.19041.450], locale ja-JP) [X] Android toolchain - develop for Android devices X Unable to locate Android SDK. Install Android Studio from: https://developer.android.com/studio/index.html On first launch it will assist you in installing the Android SDK components. (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions). If the Android SDK</description></item><item><title>Rust入門</title><link>https://umemak.github.io/blog/posts/2020/08/01_hello_rust/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/08/01_hello_rust/</guid><description>なぜDiscordはGoからRustへ移行するのか - MISONLN41&amp;rsquo;s Blog を読んで興味がわいたのでインストールしてみた。 Rust をインストール - Rustプログラミング言語 のWSLのコマンドで。インストール完了後、WSLログインしなおさないとrustcコマンド使えなかった。 $ rustc --version rustc 1.45.1 (c367798cf 2020-07-26) ファイル作って $ vim hello.rs fn main() { println!(&amp;quot;Hello, world!&amp;quot;); } コンパ</description></item><item><title>Raspberry pi4 で expo を動かす</title><link>https://umemak.github.io/blog/posts/2020/07/22_raspi_expo/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/07/22_raspi_expo/</guid><description>WSLでいろいろ試してみたものの、ポート関連のエラーで動かないので、Raspberry piで試してみた。 Rubyインストール Homebrewインストールしようとしたときに、Rubyがないエラーで先に進まなくなってしまったので先にインストールしておく。 rbenvを使ってみる。 途中でパッケージが足りない</description></item><item><title>WSL2にbrewをつかってnodejsのインストールをする</title><link>https://umemak.github.io/blog/posts/2020/07/20_wsl_brew/</link><pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/07/20_wsl_brew/</guid><description>Node.jsのバージョン管理したくなったので。 Homebrewのインストール https://brew.sh/index_ja にしたがって。 $ /bin/bash -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;quot; $ sudo apt-get install build-essential $ echo 'eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv)' &amp;gt;&amp;gt; /home/`whoami`/.profile $ eval $(/home/linuxbrew/.linuxbrew/bin/brew shellenv) $ brew --version Homebrew 2.4.8 Homebrew/linuxbrew-core (git revision 09353; last commit 2020-07-19) インストール済みnodejsパッケージの削除 aptで入れていたnodejsを削除。 $ sudo apt remove nodejs nodebrewのインストール $ brew install nodebrew node</description></item><item><title>WSLの時計を合わせる</title><link>https://umemak.github.io/blog/posts/2020/07/20_wsl_date/</link><pubDate>Mon, 20 Jul 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/07/20_wsl_date/</guid><description>apt updateしたときにエラーになった場合の解決策のひとつ。 WSL側の時計が大幅にずれているパターン。 https://github.com/microsoft/WSL/issues/4245 を参考に。 # hwclock -s</description></item><item><title>Windows10にDocker Desktopをインストール</title><link>https://umemak.github.io/blog/posts/2020/07/12_docker_win10/</link><pubDate>Sun, 12 Jul 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/07/12_docker_win10/</guid><description>最初にSurface Go2をセットアップしたとき、WSL2のほうにDockerをインストールしていた。 使う時だけ起動すればいいと思っていたが、意外と面倒（sudoしてデーモン起動させるのとか）に感じていた。 VSCode blogの記事を見て、Windows側にDocker Desktopをインストールするのもあり</description></item><item><title>WSL2でAWS CLIを使ってS3のフォルダ名を変更する</title><link>https://umemak.github.io/blog/posts/2020/07/08_awscli_wsl2/</link><pubDate>Wed, 08 Jul 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/07/08_awscli_wsl2/</guid><description>S3って、マネジメントコンソールからフォルダ名の変更ってできないんですね。。 こちらを参考に。 SurfaceにしてからAWS CLIインストールしてなかったし、せっかくなのでWLS2のUbuntuでやってみます。 公式のDocker版でインストール（というほどのことでもないですが）。 $ docker run --rm -it amazon/aws-cli --version aws-cli/2.0.29 Python/3.7.3 Linux/4.19.104-microsoft-standard botocore/2.0.0dev33</description></item><item><title>Hugoのバージョンアップ</title><link>https://umemak.github.io/blog/posts/2020/06/22_update_hugo/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/22_update_hugo/</guid><description>しばらく追っていなかったら、Hugoのバージョンが結構上がっていたので、最新を使ってみることにした。 とはいえ、デプロイにGitHub Actionsを使っているので、設定ファイルの更新だけで完了した。 差分 Hugoのバージョン変更より、ついでに更新したactionsの変更で躓いてしまった。 今はDEPLO</description></item><item><title>Firebase用デプロイサーバーを作る</title><link>https://umemak.github.io/blog/posts/2020/06/11_deployserver/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/11_deployserver/</guid><description>SourceRepositoriesで管理して、CloudBuildでFirebase HostingにデプロイしているGatsbyプロジェクトを、SourceRepositoryとCloudBuildを使わずに実現してみる。 GiteaがCentOS6で動くようになったので、SourceReposit</description></item><item><title>GiteaのデータベースをPostgreSQLにする</title><link>https://umemak.github.io/blog/posts/2020/06/08_gitea_pgsql/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/08_gitea_pgsql/</guid><description>OSはCentOS6です。 https://qiita.com/hatayan1126/items/9b0d3be9c7ecdc207642 を参考に進めます。 この記事では9.6をインストールしていますが、せっかくなので最新の12を入れてみます。 PostgreSQLのインストール $ sudo su # yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-6-x86_64/pgdg-redhat-repo-latest.noarch.rpm # yum update # yum install postgresql12-server # rpm -qa | grep postgres postgresql12-12.3-1PGDG.rhel6.x86_64 postgresql12-libs-12.3-1PGDG.rhel6.x86_64 postgresql12-server-12.3-1PGDG.rhel6.x86_64 # service postgresql-12 initdb # cp /var/lib/pgsql/12/data/pg_hba.conf{,.bk} # vim /var/lib/pgsql/12/data/pg_hba.conf # diff /var/lib/pgsql/12/data/pg_hba.conf{.bk,} 80c80 &amp;lt; local all all peer --- &amp;gt; local all all trust 82c82 &amp;lt; host all all 127.0.0.1/32 ident --- &amp;gt; host all all 127.0.0.1/32 trust # service postgresql-12 start #</description></item></channel></rss>