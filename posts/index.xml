<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 01 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>VS Codeでブラウザ表示したい</title><link>https://umemak.github.io/blog/posts/2022/08/01_vscode_webview/</link><pubDate>Mon, 01 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/01_vscode_webview/</guid><description>VS Codeとブラウザを行き来するのが面倒なので、VS Code内でブラウザ表示できれば良いのでは？と思い方法を探してみた。 デバッグ作業が快適に！VS Codeにブラウザのプレビュー機能を加える機能拡張 -Browser Preview for VS Code | コリス これでいけるじゃん、ってインストールしようとしたら、Deprecated と書かれていて</description></item><item><title>Go言語のエラーラッピング</title><link>https://umemak.github.io/blog/posts/2022/07/31_go_error_wrap/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/31_go_error_wrap/</guid><description>エラーのラッピングをすると何がうれしいのかという問いへの解答が見えた気がする。 ラッピングしない場合、元のエラーの文字列以外の情報が失われてしまうが、ラッピングするとエラー情報をアンラップして取り出すことができる。 失われてしまう情報が呼び出し元で必要な場合は、エラーをそのままreturnして返すか、必</description></item><item><title>良いコード／悪いコードで学ぶ設計入門</title><link>https://umemak.github.io/blog/posts/2022/07/30_code_book/</link><pubDate>Sat, 30 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/30_code_book/</guid><description>良いコード／悪いコードで学ぶ設計入門―保守しやすい 成長し続けるコードの書き方 | 仙塲 大也 | コンピュータ・IT | Kindleストア | Amazon 読み終えた。 最後のほうは、前に出てきたことの応用とかでせっかくKindleなんだからリンクしておいて参照できれば良いのに、と思った。 書いてある内容にはおおむね同意。ちゃん</description></item><item><title>OpenAPI Generator go-server</title><link>https://umemak.github.io/blog/posts/2022/07/29_openapi_generator/</link><pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/29_openapi_generator/</guid><description>Documentation for the go-server Generatorで、routerはmuxとchiが選べると書いてあって、省略時はmuxとのこと。 chiの指定方法がわからなかったので調べた。 $ wget https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml $ docker run --rm \ -v ${PWD}:/local openapitools/openapi-generator-cli generate \ -i /local/petstore.yaml \ -g go-server \ --additional-properties=router=chi \ -o /local/out と、--additional-propertiesにつけるらしい。、 他のパラメータ、たとえばsererP</description></item><item><title>sqlc</title><link>https://umemak.github.io/blog/posts/2022/07/28_sqlc/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/28_sqlc/</guid><description>別の調べものをしていて見つけたsqlc.dev | Compile SQL to type-safe Goを試してみた。 schema.sqlは、今までMySQLの起動時に読み込ませていたSQLファイルがそのまま使えた。 query.sqlもgoのmodelパッケージ内に書いていたSQLをコピペで作れた。 結構良いかも。</description></item><item><title>AdminerのOracle対応</title><link>https://umemak.github.io/blog/posts/2022/07/27_adminer_oracle/</link><pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/27_adminer_oracle/</guid><description>昨日はとりあえず動くところまでできたので、Dockerfileを整えてみた。 https://github.com/umemak/docker-adminer/blob/master/4/Dockerfile イメージサイズ800MB弱。 もっとスリム化できないかな。</description></item><item><title>AdminerのOracle対応</title><link>https://umemak.github.io/blog/posts/2022/07/26_adminer_oracle/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/26_adminer_oracle/</guid><description>昨日の続き。 とりあえず接続してテーブル一覧作ったりテーブル作成したりできた。 Docker + Laravel + Oracleの開発環境の構築方法が参考になった。</description></item><item><title>AdminerのOracle対応</title><link>https://umemak.github.io/blog/posts/2022/07/25_adminer_oracle/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/25_adminer_oracle/</guid><description>Adminer - Database management in a single PHP fileのDockerイメージAdminer - Official Image | Docker Hubは、Oracle接続に必要なモジュールが入っていない。 PHP: インストール/設定 - Manualによると、Instant Client for Linux x86-64 (64-bit)のBasicと、oci8が必要らしい。 DockerfileはOfficial Imageの</description></item><item><title>Prisma</title><link>https://umemak.github.io/blog/posts/2022/07/25_prisma/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/25_prisma/</guid><description>Prismaを使ってDB設計ってできるのかな、と思い調べてみた。 Prisma自体は、ORMということだけれど、スキーマファイルをもとにDBに対してマイグレーションで定義を反映できる。 モデル間の関連もスキーマファイルで表現できる。 でも、API側をOpenAPIやGraphQLで定義するとすると、似たよ</description></item><item><title>GraphQL</title><link>https://umemak.github.io/blog/posts/2022/07/24_graphql/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/24_graphql/</guid><description>API設計するのに、GraphQLの可能性はどうなのかと思ってちょっとググってみた。 個人的にはAmplifyを試していたときに良くわからなくて挫折した思い出がある。 なんとなく、参照系はGraphQLで柔軟性を持たせつつ、更新系は従来のリソース志向のAPIで使い分けるのはどうかなと思った。 Goでのサー</description></item></channel></rss>