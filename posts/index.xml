<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 22 Jun 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Hugoのバージョンアップ</title><link>https://umemak.github.io/blog/posts/2020/06/22_update_hugo/</link><pubDate>Mon, 22 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/22_update_hugo/</guid><description>しばらく追っていなかったら、Hugoのバージョンが結構上がっていたので、最新を使ってみることにした。 とはいえ、デプロイにGitHub Actionsを使っているので、設定ファイルの更新だけで完了した。 差分 Hugoのバージョン変更より、ついでに更新したactionsの変更で躓いてしまった。 今はDEPLO</description></item><item><title>Firebase用デプロイサーバーを作る</title><link>https://umemak.github.io/blog/posts/2020/06/11_deployserver/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/11_deployserver/</guid><description>SourceRepositoriesで管理して、CloudBuildでFirebase HostingにデプロイしているGatsbyプロジェクトを、SourceRepositoryとCloudBuildを使わずに実現してみる。 GiteaがCentOS6で動くようになったので、SourceReposit</description></item><item><title>GiteaのデータベースをPostgreSQLにする</title><link>https://umemak.github.io/blog/posts/2020/06/08_gitea_pgsql/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/08_gitea_pgsql/</guid><description>OSはCentOS6です。 https://qiita.com/hatayan1126/items/9b0d3be9c7ecdc207642 を参考に進めます。 この記事では9.6をインストールしていますが、せっかくなので最新の12を入れてみます。 PostgreSQLのインストール $ sudo su # yum install https://download.postgresql.org/pub/repos/yum/reporpms/EL-6-x86_64/pgdg-redhat-repo-latest.noarch.rpm # yum update # yum install postgresql12-server # rpm -qa | grep postgres postgresql12-12.3-1PGDG.rhel6.x86_64 postgresql12-libs-12.3-1PGDG.rhel6.x86_64 postgresql12-server-12.3-1PGDG.rhel6.x86_64 # service postgresql-12 initdb # cp /var/lib/pgsql/12/data/pg_hba.conf{,.bk} # vim /var/lib/pgsql/12/data/pg_hba.conf # diff /var/lib/pgsql/12/data/pg_hba.conf{.bk,} 80c80 &amp;lt; local all all peer --- &amp;gt; local all all trust 82c82 &amp;lt; host all all 127.0.0.1/32 ident --- &amp;gt; host all all 127.0.0.1/32 trust # service postgresql-12 start #</description></item><item><title>続・CentOS6にgiteaをインストールする</title><link>https://umemak.github.io/blog/posts/2020/06/08_gitea2/</link><pubDate>Mon, 08 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/08_gitea2/</guid><description>先日の続き。 CentOS6だと、ビルド済みバイナリは依存物のバージョンが合わず、自前ビルドはメモリが足りず。 古いGiteaのビルド済みバイナリなら動くが、やっぱり最新版使いたいし、ちょっとした機能追加もしたい。 そこで、バイナリ1本にまとめる方法をやめた（TAGS=&amp;quot;bindata&amp;quot</description></item><item><title>CentOS6にgiteaをインストールする（未完）</title><link>https://umemak.github.io/blog/posts/2020/06/05_gitea/</link><pubDate>Fri, 05 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/05_gitea/</guid><description>WikiはGitHubにも付いているのを思い出して、単独のWikiではなくGitHubクローンを試してみる。 GitLabとか重量系は最初からあきらめて、Goで書かれたシングルバイナリの軽量OSS、Giteaで挑戦。 VMはいつものGCP無料枠のやつ。 OSはCentOS6でディスクは30GB。 MySQL</description></item><item><title>GAS入門</title><link>https://umemak.github.io/blog/posts/2020/05/28_gas/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/28_gas/</guid><description>今まで存在は知っていたし、Kindle Unlimitedで読める入門書を読んだりはしていた。 ここにきてようやく実際に手を動かしてみたので、その感想。 作ったものは、POSTリクエストを受けて、スプレッドシートのA列に入力と同じ文字列があれば、B列の内容を返すというもの。 学び スクリプトを修正したときは、</description></item><item><title>Surface Go 2でWSL2+Dokcer</title><link>https://umemak.github.io/blog/posts/2020/05/28_wsl/</link><pubDate>Thu, 28 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/28_wsl/</guid><description>Windows 10大型アップデート「May 2020 Update」がダウンロード開始 という記事を見て、さっそく更新して、WSLとUbuntuをインストールしてみた。 とくに問題なく完了。 そしてdockerもインストール。 https://docs.docker.com/engine/install/ubuntu/ Add Docker’s official GPG key:のところでエラー。 WSLをインストールしただけでは、WSL2ではないら</description></item><item><title>Duetを使ってみる</title><link>https://umemak.github.io/blog/posts/2020/05/25_duet_display/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/25_duet_display/</guid><description>https://ja.duetdisplay.com/ Google Playの300円クーポンが有効期限間近だったので買ってみた。 spacedeskでも特に不便なくつかえていたのだけれど、有料アプリも試してみたかった。 環境はSurface Go2がホストでChromebook C101PA（Androidアプリ）がモニタでWiFi接続。 モバイルモニタの接続で使ってい</description></item><item><title>nginxで80番ポートの向き先を変更する</title><link>https://umemak.github.io/blog/posts/2020/05/25_nginx/</link><pubDate>Mon, 25 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/25_nginx/</guid><description>Wiki.jsをservice化したときに、nobodyユーザーだと80番ポートでlistenできないので、Wiki（node.js）はデフォルトの3000番に戻して、nginxでプロキシすることにした。 https://docs.requarks.io/install/linux のRun as serviceをやりたかった。 ホームディレクトリに展開していたwikiを/var/に</description></item><item><title>Wiki.jsを試す</title><link>https://umemak.github.io/blog/posts/2020/05/24_wikijs/</link><pubDate>Sun, 24 May 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/05/24_wikijs/</guid><description>GCP無料枠でWikiを動かしてみるシリーズ。 今回はWiki.js。 docker-composeを使う方法も用意されているが、軽量優先で通常インストールのほうで。 https://docs.requarks.io/install/linux config.ymlの編集では、ポートを80に、DBをsqliteに変更した。 $ sudo apt install wget nodejs npm $ wget https://github.com/Requarks/wiki/releases/download/2.3.81/wiki-js.tar.gz $ mkdir wiki $ tar xzf wiki-js.tar.gz -C ./wiki $ cd ./wiki $ mv config.sample.yml config.yml $ nano config.yml</description></item></channel></rss>