<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on umemak</title><link>https://umemak.github.io/blog/posts/</link><description>Recent content in Posts on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 28 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Lambdaのデプロイ</title><link>https://umemak.github.io/blog/posts/2022/10/28_lambda_deploy/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/28_lambda_deploy/</guid><description>AWSにLambdaをデプロイする方法、いくつかあると思うのだけれど、最近の主流は何だろう。 デプロイにも2段階あると思って、0→1のLambda自体作成するときと、それ以降の更新と。 初回はCloudFormationとかTerraformとか？ SAM使ったら最初もそれ以降もまとめていける？CDKは？</description></item><item><title>GoとLambda</title><link>https://umemak.github.io/blog/posts/2022/10/27_localstack/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/27_localstack/</guid><description>aws-lambda-go-api-proxy でAPI作るとして、ローカルでのテスト環境どうするか問題。 localstack/localstack: 💻 A fully functional local AWS cloud stack. Develop and test your cloud &amp;amp; Serverless apps offline!を使うのが鉄板だと思うんだけど。 API Gateway V2はPro版じゃないと使えない。 AWS環境にデプロイして動かすのが簡単なのかなぁ。</description></item><item><title>GoとLambda</title><link>https://umemak.github.io/blog/posts/2022/10/26_lambda_go/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/26_lambda_go/</guid><description>昨日、API GW+Lambdaの可能性について調べたとき、aws-lambda-go-api-proxy というものを見つけた。 awslabs/aws-lambda-go-api-proxy: lambda-go-api-proxy makes it easy to port APIs written with Go frameworks such as Gin (https://gin-gonic.github.io/gin/ ) to AWS Lambda and Amazon API Gateway. 良さそうだけど、PRが結構たまっているなーと思い、よく見てみると Deprecation in favor of Lambda Web Adapter · Issue #143 · awslabs/aws-lambda-go-api-proxy とのことで awslabs/aws-lambda-web-adapter: Run web applications on AWS Lambda の使用を勧めら</description></item><item><title>コンテナ動かす場所</title><link>https://umemak.github.io/blog/posts/2022/10/25_aws_container/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/25_aws_container/</guid><description>APIコンテナ動かすのにどのインスタンスタイプが良いのか。 ECS+Fargateも良さそうだけど、動かしっぱなしの用途だとEC2とそんなに料金も変わらないかな。 App Runnerがゼロスケールできれば一番手間がなさそうだけど、最低1つは動いてるっぽい。 API GW+Lambdaだと、使わないときは料金抑えられ</description></item><item><title>profileリポジトリ</title><link>https://umemak.github.io/blog/posts/2022/10/24_github_profile_readme/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/24_github_profile_readme/</guid><description>Managing your profile README - GitHub Docs 昔リポジトリ作って、反映されないじゃんって放置してた。 久しぶりに見てみたらShare to profileボタンがあって、押したら有効化された。 見落としていたのかなぁ。。 Metrics anuraghazra/github-readme-stats: Dynamically generated stats for your github readmes の2つを導入してみた。 Most Used Languagesを見て、Goが意外と低かった。もっと使おう。</description></item><item><title>VoskでWebVTT作成</title><link>https://umemak.github.io/blog/posts/2022/10/24_vosk_vtt/</link><pubDate>Mon, 24 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/24_vosk_vtt/</guid><description>Voskのサンプルで、WebVTT生成があったのでやってみた。 vosk-api/test_webvtt.py at master · alphacep/vosk-api サンプルコードのmodel部分だけ変更でいけた。 あとpip install webvtt-pyの実行も必要だった。 便利なライブラリがあってPythonが流行るのがわかった気がする。</description></item><item><title>dotfilesリポジトリ</title><link>https://umemak.github.io/blog/posts/2022/10/23_dotfiles/</link><pubDate>Sun, 23 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/23_dotfiles/</guid><description>Preferences — Gitpodを見ていて、Dotfilesを指定できる項目があるのに気づいた。 そういえば昔作ったような気がするな、と思い見てみたら、.gitconfigしかなかった。 umemak/dotfiles</description></item><item><title>Pythonで非同期処理</title><link>https://umemak.github.io/blog/posts/2022/10/22_python_async/</link><pubDate>Sat, 22 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/22_python_async/</guid><description>今の作りだと、翻訳や英語再生の間、待たされる気がするので、翻訳APIから先は非同期で実行できないか調べてみた。 【Python】同期処理をラッピングして非同期処理にする方法 – 株式会社シーポイントラボ ｜ 浜松のシステム・RTK-GNSS開発 python - asyncioを使った簡単なプログラムでエラーがでる。 - スタッ</description></item><item><title>pyttsx3</title><link>https://umemak.github.io/blog/posts/2022/10/21_pyttsx3/</link><pubDate>Fri, 21 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/21_pyttsx3/</guid><description>日本語音声→日本語文字列→英語文字列 ができたので、英語文字列→英語音声 も追加してみたくなって、やってみた。 Pythonでオフラインでできるものをググって見つかったのが、nateshmbhat/pyttsx3: Offline Text To Speech synthesis for python。 これもREADMEに書いてあるように書くだけで実装できた。 あとは翻</description></item><item><title>Vosk使ってみる2</title><link>https://umemak.github.io/blog/posts/2022/10/20_vosk_python/</link><pubDate>Thu, 20 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/20_vosk_python/</guid><description>node.jsで使うのあきらめて、Pythonで試してみた。 vosk-api/test_microphone.py at master · alphacep/vosk-api あっさり使えた。 ついでに、3 分で作る無料の翻訳 API with Google Apps Script - Qiitaを参考に、日本語→英語翻訳APIを立てて連携してみた。 Pythonの文字列操作するのにちょっと手間取ったけど、意外とすんなりリアルタイム音声認識＆翻訳が出来上がっ</description></item></channel></rss>