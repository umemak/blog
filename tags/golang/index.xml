<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>golang on umemak</title><link>https://umemak.github.io/blog/tags/golang/</link><description>Recent content in golang on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 26 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>ginkgoの特殊機能とは？</title><link>https://umemak.github.io/blog/posts/2022/04/26_ginkgo/</link><pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/26_ginkgo/</guid><description>昨日の調べもので出てきた、 Ginkgo has several capabilities that can only be accessed via ginkgo. （Ginkgoには、ginkgoを経由してしかアクセスできない機能がいくつかあります。） そのいくつかの機能を知りたい。</description></item><item><title>ginkgoとgo test</title><link>https://umemak.github.io/blog/posts/2022/04/25_ginkgo/</link><pubDate>Mon, 25 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/25_ginkgo/</guid><description>GinkgoのV1とV2のテストケースが混在しているときに、V2のCLIでV1用のコードをテストしようとすると、ginkgo.timeoutが定義されてい内的なエラーになってしまう（うろ覚え）。 importをv2にすれば多分良いのだけれど、そうしなくても、テストの実行をgo testに任せれば、imp</description></item><item><title>Ginkgoわかった</title><link>https://umemak.github.io/blog/posts/2022/04/21_ginkgo/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/21_ginkgo/</guid><description>Ginkgoわからん - umemak の続編。 Itが上から順番に実行されない問題、V2で導入されたOrderedを使えば解決できそう。 https://onsi.github.io/ginkgo/#ordered-containers</description></item><item><title>Ginkgoわからん</title><link>https://umemak.github.io/blog/posts/2022/02/18_ginkgo/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/18_ginkgo/</guid><description>MDMMLじゃない話。 https://onsi.github.io/ginkgo/ でテストを、 Describe(){ Context(){ // 準備 It(){ Expect() } // 次の準備 It(){ Expect() } // 後片付け } } みたいな感じで書いていたら、思った通りの動きにならなくてハマった。 どうやら、Contextの中は上から順番に実行されるのではなく、 Describe(){ Context(){ // 準備 // 次の準備 // 後片付け It(){ Expect() } It(){ Expect() } } } となるらしい。 やりたい順番で実行したければ</description></item><item><title>golang.tokyo #28</title><link>https://umemak.github.io/blog/posts/2019/12/04_golang_tokyo_28/</link><pubDate>Wed, 04 Dec 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/12/04_golang_tokyo_28/</guid><description>https://golangtokyo.connpass.com/event/156678/ LT大会（１６本！）です。 19:00 ~ 開場・受付 きました pic.twitter.com/T9mR1MzOss &amp;mdash; umemak (@umemak8) December 4, 2019 19:30 ~ 19:40 オープニング・乾杯 yappli 19:40 ~ 19:45 LT1: [仮]wire.goをプロダクトで使ってみた bieshanさん DIツール 依存関係のコードを生成してくれる wire使い方イマイチ理解していないので助かる 型を見て生成しているので、同じ定義だとどちらを使って</description></item><item><title>Go Release 10 Year Anniversary Party in Tokyo</title><link>https://umemak.github.io/blog/posts/2019/11/11_go_release_10/</link><pubDate>Mon, 11 Nov 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/11/11_go_release_10/</guid><description>https://gocon.connpass.com/event/153665/ VMwareからのハシゴです。 出る前にDatadogのデモ見てたら出るのが遅くなってしまった。 19:00 - 19:30 Open ケーキ！ 19:30 - 20:00 History of Go by ymotongpoo 30 October, 2009 社内公開 11 November, 2009 一般公開 https://opensource.googleblog.com/2009/11/hey-ho-lets-go.html 1960-2007 - Foundations HWごとに言語があった時代(-1950) Jan 1960 ALGOL 1964-2007 Concurrency 1964 Unix Pipe 1978 CSP(Communication Sequential Process) 2007-2009 - Creation C++11のTechTalk行ったら新機能の話ばかりだった C++で</description></item><item><title>golang.tokyo #27</title><link>https://umemak.github.io/blog/posts/2019/11/05_golang_tokyo_27/</link><pubDate>Tue, 05 Nov 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/11/05_golang_tokyo_27/</guid><description>https://techplay.jp/event/753881 先日のGo Conferenceには参加できなかったので、当選できてよかった。 19:00 ~ 開場・受付 乾杯！ 19:30 ~ 19:35 オープニング DevQuizの解説。思ってた動作と違かった。。 当日発表になった登壇者とスケジュール。予定より本数が少なくなっていました。 19:35 ~ 19:55 Session 1 Creating shell magager with golang / @yusuke_k0matsu https://speakerdeck.com/usk81/create-shell-manager-with-golang shway https://github.com/getshway/shway dotfileの管理方法のベスト</description></item><item><title>golang.tokyo #26</title><link>https://umemak.github.io/blog/posts/2019/09/25_golang_tokyo_26/</link><pubDate>Wed, 25 Sep 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/09/25_golang_tokyo_26/</guid><description>https://golangtokyo.connpass.com/event/147175/ 今回はスマートホームとGoの話です 19:30 ~ 20:00 Go in Nature（仮） by songmu Nature Remoの裏側 gocredits オススメ 依存ライブラリのLICENSEを同梱してくれる ecsched気になる Websocketでクラウドに接続しっぱなしにしている 外部のデバイスからはクラウドに司令を出す 常時接続の管理が大変 ECS上でうごかしている</description></item></channel></rss>