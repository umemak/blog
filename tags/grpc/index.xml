<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GRPC on umemak</title><link>https://umemak.github.io/blog/tags/grpc/</link><description>Recent content in GRPC on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 27 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/grpc/index.xml" rel="self" type="application/rss+xml"/><item><title>einride/aip-go使ってみる</title><link>https://umemak.github.io/blog/posts/2023/01/27_grpc_filter/</link><pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/01/27_grpc_filter/</guid><description>&lt;p>&lt;a href="https://pkg.go.dev/go.einride.tech/aip/filtering">filtering package - go.einride.tech/aip/filtering - Go Packages&lt;/a>&lt;/p>
&lt;p>を使おうとしてみたけれど、よくわからない。&lt;/p>
&lt;p>&lt;a href="https://github.com/einride/aip-go/blob/master/filtering/parser_test.go">aip-go/parser_test.go at master · einride/aip-go&lt;/a>を見て、まずInitに文字列渡して、ParseでExprが作られるのはわかった。
そのExprをWarkで見て回るところができず。&lt;/p>
&lt;p>とりあえず、入力パターンを制限してstrings.Splitとかでしのいでおく。&lt;/p></description></item><item><title>gRPCのfilterの書き方</title><link>https://umemak.github.io/blog/posts/2023/01/26_grpc_filter/</link><pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/01/26_grpc_filter/</guid><description>&lt;p>&lt;a href="https://google.aip.dev/160">AIP-160: Filtering&lt;/a>&lt;/p>
&lt;p>よくわからん。&lt;/p>
&lt;p>&lt;a href="https://pkg.go.dev/go.einride.tech/aip/filtering">filtering package - go.einride.tech/aip/filtering - Go Packages&lt;/a>&lt;/p>
&lt;p>goならこれでパースできるのかな。&lt;/p></description></item><item><title>gRPC Connect</title><link>https://umemak.github.io/blog/posts/2023/01/20_grpc_connect/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/01/20_grpc_connect/</guid><description>&lt;p>&lt;a href="https://github.com/bufbuild/connect-go">bufbuild/connect-go: Simple, reliable, interoperable. A better gRPC.&lt;/a>&lt;/p>
&lt;p>テスト用にgRPCのサーバーが欲しかったので、使ってみた。&lt;/p>
&lt;p>READMEに書いてあるサンプルのように作ったら、grpcurlでリフレクションのエラーになったので、&lt;a href="https://zenn.dev/rai_wtnb/articles/e07ad831ea8e34">次世代gRPC?『connect-go』やってみた&lt;/a>を参考にリフレクションを入れたら動いた。&lt;/p>
&lt;p>ついでにクライアントもConnectで書いてみた。&lt;/p>
&lt;p>サーバーの指定をプロトコル込み（http://～/）で指定しないといけないのと、RequestとResponceにMsgを挟まないといけないので少しハマったけど、おおむね問題なさそう。&lt;/p></description></item><item><title>runnでgRPCのテスト2</title><link>https://umemak.github.io/blog/posts/2022/11/18_runn/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/18_runn/</guid><description>&lt;p>runnのコマンドライン実行でうまく動かない件、オプション&lt;code>--grpc-no-tls&lt;/code>を指定したら解消した。&lt;/p>
&lt;p>デバッグ用に詳細オプションないかなーってコマンドラインヘルプ見ていて見つけた。&lt;/p>
&lt;p>マニュアルはちゃんと読みましょう（今年何度目かの反省&lt;/p></description></item><item><title>runnでgRPCのテスト</title><link>https://umemak.github.io/blog/posts/2022/11/17_runn/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/17_runn/</guid><description>&lt;p>gRPCサーバーをテストするのに、&lt;a href="https://github.com/fullstorydev/grpcurl">fullstorydev/grpcurl: Like cURL, but for gRPC: Command-line tool for interacting with gRPC servers&lt;/a>を使っていたのだけど、自動化するのに良いものはないかと探して、&lt;a href="https://github.com/k1LoW/runn">k1LoW/runn: runn is a package/tool for running operations following a scenario.&lt;/a>を試してみた。&lt;/p>
&lt;p>go testから使うのは何となくできたような気がするけど、runnコマンドで実行するのがうまくいかない。&lt;/p>
&lt;p>go testから使うのもだいぶハマって、&lt;code>tls: false&lt;/code>を入れないとポート番号80以外で起動したときに常にTLS接続になって、応答がなくなってしまう。&lt;/p></description></item><item><title>proto</title><link>https://umemak.github.io/blog/posts/2022/09/14_proto/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/14_proto/</guid><description>&lt;p>昨日のエラーは、&lt;a href="https://github.com/grpc-ecosystem/grpc-gateway">grpc-ecosystem/grpc-gateway: gRPC to JSON proxy generator following the gRPC HTTP spec&lt;/a>にあるように&lt;code>buf.yaml&lt;/code>に&lt;/p>
&lt;pre tabindex="0">&lt;code>deps:
 - buf.build/googleapis/googleapis
&lt;/code>&lt;/pre>&lt;p>を追記して&lt;code>buf mod update&lt;/code>を実行したら直ったような気がする。&lt;/p>
&lt;p>気がする、というのは他にもprotoファイルをダウンロードしてきたりとかいろいろやっていて何が決定打だったのかよくわかってない。&lt;/p>
&lt;p>結果オーライ。&lt;/p></description></item><item><title>proto</title><link>https://umemak.github.io/blog/posts/2022/09/13_proto/</link><pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/13_proto/</guid><description>&lt;p>proto定義何もわからない。。&lt;/p>
&lt;p>REST用のパスを定義するために&lt;/p>
&lt;pre tabindex="0">&lt;code> option (google.api.http) = {
 get : &amp;#34;/example-messages/{id}&amp;#34;
 };
&lt;/code>&lt;/pre>&lt;p>といった定義が必要で、これを使うには&lt;/p>
&lt;pre tabindex="0">&lt;code>import &amp;#34;google/api/annotations.proto&amp;#34;;
&lt;/code>&lt;/pre>&lt;p>が必要らしいという理解なのだけど、これをビルドしようとすると&lt;/p>
&lt;pre tabindex="0">&lt;code>event.proto:6:1: Import &amp;#34;google/api/annotations.proto&amp;#34; was not found or had errors.
&lt;/code>&lt;/pre>&lt;p>というエラーが出てしまう。&lt;/p>
&lt;p>こういうところで躓くの嫌すぎる。&lt;/p></description></item><item><title>protoをマスターにする</title><link>https://umemak.github.io/blog/posts/2022/09/12_proto2openapi/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/12_proto2openapi/</guid><description>&lt;p>protoをAPIスキーマのマスターにしようとした場合、既存のOpenAPIで用意していたUIとかどうしよう、ということになるけれど、OpenAPI-&amp;gt;gRPCとは違って逆の変換はたくさんツールがあることは調査済み。&lt;/p>
&lt;p>全体の作りとしては&lt;a href="https://future-architect.github.io/articles/20220624a/">grpc-gatewayでgRPCとREST両対応のサーバを作る | フューチャー技術ブログ&lt;/a>こんな感じにするのが良さそう。&lt;/p>
&lt;p>ということでまずはマネするところからやっていきたい。&lt;/p></description></item><item><title>OpenAPIからgRPCへの移行</title><link>https://umemak.github.io/blog/posts/2022/09/11_openapi2proto/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/11_openapi2proto/</guid><description>&lt;p>今あるOpenAPI用の定義yamlファイルからgRPC用のprotoファイルが生成できないかなと思い、検索したら良さそうなものが見つかった。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://github.com/nytimes/openapi2proto">nytimes/openapi2proto: A tool for generating Protobuf v3 schemas and gRPC service definitions from OpenAPI specifications&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>&lt;a href="https://github.com/umemak/eventsite_go/blob/main/openapi.yml">https://github.com/umemak/eventsite_go/blob/main/openapi.yml&lt;/a> でやってみた。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ go install github.com/NYTimes/openapi2proto/cmd/openapi2proto
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>$ openapi2proto -spec openapi.yml -annotate
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>syntax &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#e6db74">&amp;#34;proto3&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>package eventsite;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import &lt;span style="color:#e6db74">&amp;#34;google/api/annotations.proto&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>import &lt;span style="color:#e6db74">&amp;#34;google/protobuf/empty.proto&amp;#34;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>service EventsiteService &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Get all events.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rpc GetEvents&lt;span style="color:#f92672">(&lt;/span>google.protobuf.Empty&lt;span style="color:#f92672">)&lt;/span> returns &lt;span style="color:#f92672">(&lt;/span>google.protobuf.Empty&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> option &lt;span style="color:#f92672">(&lt;/span>google.api.http&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> get: &lt;span style="color:#e6db74">&amp;#34;/events&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> // Create event.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> rpc PostEvents&lt;span style="color:#f92672">(&lt;/span>google.protobuf.Empty&lt;span style="color:#f92672">)&lt;/span> returns &lt;span style="color:#f92672">(&lt;/span>google.protobuf.Empty&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> option &lt;span style="color:#f92672">(&lt;/span>google.api.http&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">=&lt;/span> &lt;span style="color:#f92672">{&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> post: &lt;span style="color:#e6db74">&amp;#34;/events&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">}&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>serviceは作られているけど、messageは作ってくれてないっぽい。&lt;/p></description></item><item><title>gRPCを触ってみる</title><link>https://umemak.github.io/blog/posts/2022/09/10_connect/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/10_connect/</guid><description>&lt;p>gRPCを触ってみたくなったので、&lt;a href="https://future-architect.github.io/articles/20220819a/">gRPCがフロントエンド通信の第一の選択肢になる時代がやってきたかも？ | フューチャー技術ブログ&lt;/a>をやってみる。&lt;/p>
&lt;p>frontendでnpm installするところでgitエラーになってしまう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ npm install --save-dev bufbuild/protoc-gen-connect-web bufbuild/protoc-gen-es
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! code &lt;span style="color:#ae81ff">128&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! An unknown git error occurred
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! command git --no-replace-objects ls-remote ssh://git@github.com/bufbuild/protoc-gen-connect-web.git
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! git@github.com: Permission denied &lt;span style="color:#f92672">(&lt;/span>publickey&lt;span style="color:#f92672">)&lt;/span>.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! fatal: Could not read from remote repository.
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! 
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! Please make sure you have the correct access rights
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>npm ERR! and the repository exists.
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>とりあえず置いておいて先に進めるが、結局buf generateするところで出力先がないのでエラーになってしまった。&lt;/p></description></item></channel></rss>