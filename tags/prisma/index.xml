<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Prisma on umemak</title><link>https://umemak.github.io/blog/tags/prisma/</link><description>Recent content in Prisma on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 02 Nov 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/prisma/index.xml" rel="self" type="application/rss+xml"/><item><title>LambdaとPrisma</title><link>https://umemak.github.io/blog/posts/2023/11/02_lambda_prisma/</link><pubDate>Thu, 02 Nov 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/11/02_lambda_prisma/</guid><description>&lt;p>昨日、SSTでデプロイしてエラーになったので、&lt;a href="https://github.com/yarbsemaj/sveltekit-adapter-lambda">yarbsemaj/sveltekit-adapter-lambda: An adapter to build a SvelteKit app into a lambda ready for deployment with lambda proxy via the Serverless Framework.&lt;/a>を試してみた。&lt;/p>
&lt;p>結果としては、やはりPrismaのエラーで落ちていた。&lt;/p>
&lt;p>ひとまずLambda諦めて動くものを作るのを優先しよう。&lt;/p></description></item><item><title>Prisma</title><link>https://umemak.github.io/blog/posts/2023/07/01_prisma/</link><pubDate>Sat, 01 Jul 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/07/01_prisma/</guid><description>&lt;p>&lt;a href="https://www.memory-lovers.blog/entry/2021/10/13/113000">TypeScript ORM「Prisma」のはじめかた - くらげになりたい。&lt;/a>を見て、DBマイグレーション管理としてのPrismaを試してみた。&lt;/p>
&lt;p>既存のDBスキーマを&lt;code>prisma pull&lt;/code>で持って来られるというのを試したら、boolがtinyintになってしまうなどあったが、そこそこいい感じにできた。&lt;/p></description></item><item><title>PrismaとOpenAPI</title><link>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</guid><description>&lt;p>Prismaのドキュメント眺めていて、&lt;a href="https://www.prisma.io/blog/nestjs-prisma-rest-api-7D056s1BmOL0#set-up-swagger">Build a REST API with NestJS, Prisma, PostgreSQL and Swagger&lt;/a>を見つけた。&lt;/p>
&lt;p>PrismaというかNestJSの機能かもしれないけれど、OpenAPIドキュメントも表示できるっぽい。&lt;/p>
&lt;p>これでいい感が出てきた。&lt;/p></description></item><item><title>Prisma</title><link>https://umemak.github.io/blog/posts/2022/10/12_prisma/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/12_prisma/</guid><description>&lt;p>先日のスキーマ指向開発の一つの解になるかもしれない。&lt;/p>
&lt;p>&lt;a href="https://www.prisma.io/">Prisma | Next-generation ORM for Node.js &amp;amp; TypeScript&lt;/a>&lt;/p>
&lt;p>存在は知っていたのだけれど、言語がTypeScriptということでちゃんとチェックしていなかった。&lt;/p>
&lt;p>フロントをNext.jsとかTypeScript系で作るなら、APIサーバー側もTypeScriptで書けたほうが効率が良いかもしれない。&lt;/p></description></item><item><title>Prisma</title><link>https://umemak.github.io/blog/posts/2022/07/25_prisma/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/25_prisma/</guid><description>&lt;p>&lt;a href="https://www.prisma.io/">Prisma&lt;/a>を使ってDB設計ってできるのかな、と思い調べてみた。&lt;/p>
&lt;p>Prisma自体は、ORMということだけれど、スキーマファイルをもとにDBに対してマイグレーションで定義を反映できる。
モデル間の関連もスキーマファイルで表現できる。&lt;/p>
&lt;p>でも、API側をOpenAPIやGraphQLで定義するとすると、似たようなものを管理しなくてはいけないのがちょっと。&lt;/p>
&lt;p>GraphQLと組み合わせて使うこともできるようだけど、まだGraphQLへの苦手意識があるので試すまで至らない。&lt;/p></description></item></channel></rss>