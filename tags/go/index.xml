<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on umemak</title><link>https://umemak.github.io/blog/tags/go/</link><description>Recent content in go on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 09 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Goで設定を良い感じに処理する方法</title><link>https://umemak.github.io/blog/posts/2022/09/09_go_config/</link><pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/09_go_config/</guid><description>コマンドラインで引数を処理する順番は以前調べたことがあるのだけど、これをいい感じに処理してくれるGoのライブラリが欲しい気がする。 まず設定ファイルを読み、環境変数が設定されていれば上書き、コマンドラインで指定されていればさらに上書き joho/godotenv: A Go port of Ruby&amp;rsquo;s dotenv library (Loads environment variables from .env.) Netflix/go-env: a golang library to manage environment variables caarlos0/env: A simple and zero-dependencies library to parse environment variables into structs. ilyakaznacheev/cleanenv:</description></item><item><title>MLTファイルを読む</title><link>https://umemak.github.io/blog/posts/2022/08/30_mlt/</link><pubDate>Tue, 30 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/30_mlt/</guid><description>MLTをgoのstructに読み込もうとして、やっぱりよくわからない。 MLT自体の仕様はmltframework/mlt: MLT Multimedia Frameworkにある。 xsdファイルがあればdroyo/go-xml: utility and code-generation libraries for XMLとか使ってgoで使えるようにできそうなんだけど、dtdしかない。 っていうかdtdをs</description></item><item><title>MLTファイル生成</title><link>https://umemak.github.io/blog/posts/2022/08/29_mlt/</link><pubDate>Mon, 29 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/29_mlt/</guid><description>機能追加していたら、ダメなコードの見本みたいになり始めてきた。 機能ごとに分けるとかし始める必要がありそう。 あと、XMLの出力をベタに文字列結合でやっているので、ちゃんとライブラリ使って生成するようにしたい。 Goだとxml package - encoding/xml - Go PackagesのMarshalを使えば良さそうだけど、構造体の定義面</description></item><item><title>Ginkgoやめた</title><link>https://umemak.github.io/blog/posts/2022/08/25_ginkgo/</link><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/25_ginkgo/</guid><description>普通にGoのテストとして書いたほうが融通が利くので、そのようにすることにした。 たぶん使いどころが間違っていたのだと思う。 適所であればGinkgoも有効なはず。</description></item><item><title>Ginkgo難解</title><link>https://umemak.github.io/blog/posts/2022/08/24_ginkgo/</link><pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/24_ginkgo/</guid><description>Ginkgo使えば使うほどわからなくなってくる。 上から順番に、途中経過もチェックしながら実行したいだけなんだけどなぁ。</description></item><item><title>詳解Go言語Webアプリケーション開発</title><link>https://umemak.github.io/blog/posts/2022/08/21_go_book/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/21_go_book/</guid><description>詳解Go言語Webアプリケーション開発 | 清水陽一郎 | 工学 | Kindleストア | Amazon読み終わった。 後半のハンズオン、途中から説明が足りない感じで、何度かbudougumi0617/go_todo_app: 書籍「詳解Go言語Webアプリケーション開発」のサンプルコードリポジトリです。を見る必要が</description></item><item><title>OpenAPIクライアントの使い方</title><link>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</guid><description>Documentation for the go Generatorで生成したは良いけれど、使い方がわからず試行錯誤してみていたら、生成したdocsの中にサンプルコードが書かれていた。。 構造体のドキュメントとかだと思ってスルーしてたのが敗因。 生成物はちゃんと見ましょう。</description></item><item><title>Ginkgo難解</title><link>https://umemak.github.io/blog/posts/2022/08/15_ginkgo/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/15_ginkgo/</guid><description>久しぶりにonsi/ginkgo: A Modern Testing Framework for Go触って、やっぱりよくわからないなー、と。 BeforeEachとか使って、初期化処理を共通化しようとしたのだけれど、初期化されていない現象とか。 テスト用の構造体ってちゃんと作ろうとすると結構行数食ってしまうけど、あまりテストコードと離れたところに置きたく</description></item><item><title>詳解Go言語Webアプリケーション開発</title><link>https://umemak.github.io/blog/posts/2022/08/14_go_book/</link><pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/14_go_book/</guid><description>詳解Go言語Webアプリケーション開発 | 清水陽一郎 | 工学 | Kindleストア | Amazonの後半のハンズオンを写経しながらやってみている。 あらためて手を動かして書くことで、新しい発見があったりして楽しい。</description></item><item><title>MLTファイルを作る2</title><link>https://umemak.github.io/blog/posts/2022/08/12_mlt/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/12_mlt/</guid><description>silencedetectがなんか思ったのと違う感じで、代わりにPythonとffmpegで動画の無音部分をカットする - QiitaにあるPythonのプログラムの無音検出部分を使ってみた。 Goでもmkb218/gosndfile: Go bindings for libsndfileを使ったらできそうだけど、importしただ</description></item></channel></rss>