<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on umemak</title><link>https://umemak.github.io/blog/tags/go/</link><description>Recent content in go on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 18 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Goのredirect</title><link>https://umemak.github.io/blog/posts/2022/07/18_go_redirect/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/18_go_redirect/</guid><description>ログアウトの処理（GET /logout）実行後にトップページにリダイレクトしようとした。 http.Redirect(w, r, &amp;ldquo;/&amp;rdquo;, 301) おや？動作しない時がある。。 301だと、ブラウザはリダイレクト先を覚えて、次からはリダイレクト先を最初から叩くっぽい。 なので、302にしてあげないと思ったような動きにならない。 ところで、Goのhttpパッ</description></item><item><title>Goのtemplateのinclude</title><link>https://umemak.github.io/blog/posts/2022/07/18_go_include/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/18_go_include/</guid><description>テンプレートのincludeってどうやるんだっけ、と思って検索した。 Go の html/template でヘッダーやフッター等の共通化を実現する方法 · Yutaka 🍊 Kato なるほど、{{define &amp;quot;header&amp;quot;}}～{{end}}で定義して、{{template &amp;quot;header&amp;quot; .}}で呼び出すのか。</description></item><item><title>GoのJSON</title><link>https://umemak.github.io/blog/posts/2022/07/16_go_json/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/16_go_json/</guid><description>PocketBaseのユーザー作成をGoからHTTP叩いて実行しようとして、正常時とエラー時で戻ってくるJSONの形式が違っていた。 structを別々に用意して、Unmarshalでエラーになったらもう片方を使う？とか思ったけど、 golang は ゆるふわに JSON を扱えまぁす! — KaoriYaによると、interfa</description></item><item><title>Airを試す</title><link>https://umemak.github.io/blog/posts/2022/07/10_air/</link><pubDate>Sun, 10 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/10_air/</guid><description>HTMLとかコード修正したときに手動で再起動するのが面倒なので、ホットリロードツールを導入してみた。 cosmtrek/air: ☁️ Live reload for Go apps $ go install github.com/cosmtrek/air@latest $ air init $ air __ _ ___ / /\ | | | |_) /_/--\ |_| |_| \_ , built with Go mkdir /home/umemak/workspace/eventsite_go/tmp watching . watching cmd watching cmd/eventsite watching db watching db/sql watching model watching model/user !exclude tmp watching web watching web/template building... no Go files in /home/umemak/workspace/eventsite_go failed to build, error: exit status 1 ^Ccleaning... see you again~ デフォルトだと、cmdの下のmain.goを見つけてく</description></item><item><title>Goアプリ</title><link>https://umemak.github.io/blog/posts/2022/07/09_eventsite_go/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/09_eventsite_go/</guid><description>結局、フレームワークはgo-chi/chi: lightweight, idiomatic and composable router for building Go HTTP servicesを使うことにした。 理由は、認証で使いそうなパッケージgo-pkgz/auth: Authenticator via oauth2, direct, email and telegramのサンプルが使っていたから。 とりあえず、HTTPリクエストを受けてDB読み書きしてテンプレート加工して返すところまで</description></item><item><title>Revel入門</title><link>https://umemak.github.io/blog/posts/2022/07/09_revel/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/09_revel/</guid><description>ちょっとしたWebアプリを作りたくなったので、GoでRailsみたいなフレームワークないのかなと探した。 revel/revel: A high productivity, full-stack web framework for the Go language. が近そうだったので、試してみた。 $ go install github.com/revel/cmd/revel@latest go: downloading github.com/revel/cmd v1.1.2 go: downloading github.com/agtorre/gocolorize v1.0.0 go: downloading github.com/jessevdk/go-flags v1.4.0 go: downloading github.com/revel/config v1.1.0 go: downloading github.com/revel/log15 v2.11.20+incompatible go: downloading github.com/mattn/go-colorable v0.1.8 go: downloading gopkg.in/natefinch/lumberjack.v2 v2.0.0 go: downloading gopkg.in/stack.v0 v0.0.0-20141108040640-9b43fcefddd0 go: downloading github.com/pkg/errors v0.9.1 go: downloading github.com/fsnotify/fsnotify v1.4.9 go: downloading github.com/mattn/go-isatty v0.0.14 go: downloading github.com/inconshreveable/log15 v0.0.0-20201112154412-8562bdadbbac $ revel new -a events_go -r revel: command not found おや？パスが通って</description></item><item><title>OracleにGoで接続するイメージの軽量化</title><link>https://umemak.github.io/blog/posts/2022/06/30_oracle_docker_go/</link><pubDate>Thu, 30 Jun 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/06/30_oracle_docker_go/</guid><description>go-oci8を使ったイメージの、oraclelinux8をベースイメージにしたやつが1.25GBにもなったので、もっと小さくならないか試してみた。 golang:1-bullseyeをベースにした場合、rpmが使えないのでOracleInstantClient関連のzipを展開する方法でやって、1.</description></item><item><title>OracleにGoで接続する3</title><link>https://umemak.github.io/blog/posts/2022/06/12_oracle_docker_go3/</link><pubDate>Sun, 12 Jun 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/06/12_oracle_docker_go3/</guid><description>昨日は、mattn/go-oci8: Oracle driver for Go using database/sqlとsijms/go-ora: Pure go oracle clientを使ったサンプルをコンテナ上でgo runして動かしていた。 今日はgo buildでバイナリにして実行できるようにしてみる。 何もオプション付けずにビルドしたら、どちらも問題なし。 バイナリサ</description></item><item><title>OracleにGoで接続する</title><link>https://umemak.github.io/blog/posts/2022/06/11_oracle_docker_go/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/06/11_oracle_docker_go/</guid><description>前の記事でsqlplusで接続できたので、Goのプログラムから接続してみる。 instantclientベースでGoをインストールするDockerfile作成 FROMghcr.io/oracle/oraclelinux8-instantclient:21RUN yum install -y wget tarRUN wget https://go.dev/dl/go1.18.3.linux-amd64.tar.gzRUN rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.18.3.linux-amd64.tar.gzENV PATH=&amp;#34;${PATH}:/usr/local/go/bin&amp;#34;CMD [ &amp;#34;go&amp;#34;, &amp;#34;version&amp;#34; ]docker-composeもそれを使うように修正 version:&amp;#39;3&amp;#39;services:db:image:container-registry.oracle.com/database/expressports:- 1521:1521environment:- ORACLE_PWD=OraclePwdcli</description></item><item><title>OracleにGoで接続する2</title><link>https://umemak.github.io/blog/posts/2022/06/11_oracle_docker_go2/</link><pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/06/11_oracle_docker_go2/</guid><description>mattn/go-oci8: Oracle driver for Go using database/sqlでやってみる。 sh-4.4# go run go-oci8/main.go # pkg-config --cflags -- oci8 pkg-config: exec: &amp;#34;pkg-config&amp;#34;: executable file not found in $PATH sh-4.4# yum install -y pkgconfig sh-4.4# go run go-oci8/main.go # pkg-config --cflags -- oci8 Package oci8 was not found in the pkg-config search path. Perhaps you should add the directory containing `oci8.pc&amp;#39; to the PKG_CONFIG_PATH environment variable Package &amp;#39;oci8&amp;#39;, required by &amp;#39;virtual:world&amp;#39;, not found pkg-config: exit status 1 とりあえずmain.goと同じところにoci8.pcを作成。中身はExamples。 sh-4.4# export PKG_CONFIG_PATH=. sh-4.4# go run go-oci8/main.go # github.com/mattn/go-oci8 cgo: C compiler &amp;#34;gcc&amp;#34; not found: exec: &amp;#34;gcc&amp;#34;:</description></item></channel></rss>