<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on umemak</title><link>https://umemak.github.io/blog/tags/go/</link><description>Recent content in go on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 06 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>main関数を分ける</title><link>https://umemak.github.io/blog/posts/2022/03/06_go_main/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/06_go_main/</guid><description>Rust版でやっているように、main関数から処理を分離してrun関数を作ってみた。</description></item><item><title>コマンドライン引数をflagで処理する</title><link>https://umemak.github.io/blog/posts/2022/03/05_go_flag/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/05_go_flag/</guid><description>入力ファイルをos.Args[1]で取得していたので、引数指定しないと範囲外アクセスでpanicしていた。 flagパッケージ使ってflag.Arg(0)で取得するようにしたので、引数指定しなかった場合にはファイルなしエラーで終わるようになった。 もっと親切にするなら、エラー終了ではなくヘルプ表示にする</description></item><item><title>Goのconst</title><link>https://umemak.github.io/blog/posts/2022/03/04_go_const/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/04_go_const/</guid><description>EOTとかbyteのスライスをconstで定義しようとしてできなかった。 const EOT = []byte{0x00, 0xFF, 0x2F, 0x00} $ go run cmd/mdmml/main.go # github.com/umemak/mdmml ./mdmml.go:10:7: const initializer []byte{...} is not a constant The Go Programming Language Specification - The Go Programming Language 文字列リテラルが許されるならbyteスライスも許されてもよいではないかと思ったけれど、ダメらしい。 varで我慢する。</description></item><item><title>Goのinterfaceを学ぶ</title><link>https://umemak.github.io/blog/posts/2020/11/28_go_interface/</link><pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/11/28_go_interface/</guid><description>golintのexported %s %s returns unexported type %s, which can be annoying to useを解消したい。 interfaceを定義して回避するのが一般的？らしい。 structが入れ子になっていて、内側のstructにメソッドが定義されていると、cannot call pointer methodとなり呼べない。 https://play.golang.org/p/yvWspYJnYSv pointerを返してあげれば良い。 https://play.golang.org/p/l_l4tMAD-Bd シング</description></item><item><title>DeNA.go #3</title><link>https://umemak.github.io/blog/posts/2019/11/01_denago_3/</link><pubDate>Fri, 01 Nov 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/11/01_denago_3/</guid><description>https://dena.connpass.com/event/150676/ 19:25 - 19:30 会場説明 @imoty DeNA TechCon 2020やります 19:30 - 19:50 20分枠 @suhirotaka / [Go活用事例]安全運転支援サービスを支える運用サイト / オートモーティブ事業本部スマートドライビング部システム開発グループ https://speakerdeck.com/suhirotaka/gohuo-yong-shi-li-an-quan-yun-zhuan-zhi-yuan-sabisuwozhi-eru-yun-yong-guan-li-sisutemu goで何を作っているか DRIVE CHART AIはPython Railsも使っている 運用管理のWEBシステム 管理画面をGoで作った理由 2年</description></item><item><title>mercari.go</title><link>https://umemak.github.io/blog/posts/2019/08/20_mercari_go_10/</link><pubDate>Tue, 20 Aug 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/08/20_mercari_go_10/</guid><description>https://mercari.connpass.com/event/141122/ 19:40 ~ morikuni GopherCon 2019 GopherConとは 2014年デンバーで始まった。いろんなところでやっている。 今年はサンディエゴで開催 1800人を超える参加者 Mercariの関わり Silver Sponsor BOLD Scholarship 学生向け 11+2名参加 １日目はワークショップ ２日目３日目は発表がメイン ４日目はコミュニティデイ LTとか One MOre Thing Generics(Contracts) Interfaceと</description></item><item><title>ghqのインストール</title><link>https://umemak.github.io/blog/posts/2019/08/04_golang_ghq/</link><pubDate>Sun, 04 Aug 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/08/04_golang_ghq/</guid><description>「改訂2版 みんなのGo言語」を買ったのでC101PAで試しながら読みすすめていた。 ghqをインストールするところでエラー。 どうやらgoのバージョンを1.12以上にあげないとダメらしい。 先日パッケージでインストールしたgoは1.11.6だった。 以前のやり方でインストールし直す ~/.bash_profile の GOROOT は /usr/local/go に変更してsou</description></item><item><title>DeNA.go</title><link>https://umemak.github.io/blog/posts/2019/07/18_dena_go_2/</link><pubDate>Thu, 18 Jul 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/07/18_dena_go_2/</guid><description>2019/07/18 19:30- https://dena.connpass.com/event/133957/ @kiyotaka.nakashima / 新ゲームサーバ基盤TakashoでのGo言語活用事例の紹介 / ゲーム・エンターテインメント事業本部 Sakasho 共通ゲームサーバー（複数タイトルで相乗り） プレイヤーデータの管理 課金系 Sakasyoの課題 相乗りによる制約 変更の影響大 Takasho Webサバーフレームワーク ステートレスなAPI 1サーバー1クライアント G</description></item><item><title>Chromebookにgoの最新版をインストール</title><link>https://umemak.github.io/blog/posts/2019/07/17_chromebook_golang/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/07/17_chromebook_golang/</guid><description>apt-get だと最新版が入らないので、1.13に備えて最新版をインストールする手順を確認しておく。 C101PAのOP1はARM系CPUなのでarm64用のファイルを使用する。 C223NAはintel入ってるのでx86-64でいけるはず。 環境 C101PA Linux(ベータ) 手順 https://github.com/golang/go/wiki/ChromeOS を参考に進める https://golang.org/dl/ から go1.12.7.linux-arm64.tar.gz をダウンロード $ wget wget</description></item><item><title>mercari.go</title><link>https://umemak.github.io/blog/posts/2019/07/17_mercari_go_9/</link><pubDate>Wed, 17 Jul 2019 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2019/07/17_mercari_go_9/</guid><description>2019/07/17 19:30-21:30 https://mercari.connpass.com/event/137488/ @tottie Gopher ライブドローイングのご説明 @rerorero protoactor-goでPregelを作った話 グラフプロセッシングの話 Map/Reduceの課題を解決するPregel（プリゲル）フレームワーク アクターモデル @knsh14 メルペイでの残高管理の話 Balance Service gRPC, GKE, Spanner, Go 全体設計 クリーンアーキテクチャベース Viewなし Infra Layerで</description></item></channel></rss>