<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on umemak</title><link>https://umemak.github.io/blog/tags/go/</link><description>Recent content in go on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 14 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>SQLBoilerで論理削除の復旧</title><link>https://umemak.github.io/blog/posts/2022/11/14_sqlboiler_undelete/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/14_sqlboiler_undelete/</guid><description>SQLBoilerはDeleteするときに論理削除が使える。 詳細は【Go】sqlboilerで論理削除を実装する | ISSUEが詳しい。 論理削除のときはdeleted_atカラムがセットされる。 で、そのときupdated_atは更新されない。 論理削除した行を元に戻したいとき、deleted_atにnu</description></item><item><title>SQLBoiler</title><link>https://umemak.github.io/blog/posts/2022/11/11_sqlboiler/</link><pubDate>Fri, 11 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/11_sqlboiler/</guid><description>SQLBoilerを使うロジックをDATA-DOG/go-sqlmock: Sql mock driver for golang to test database interactionsでテストしようとしてハマった。 使わない便利機能は複雑さが増すだけで良いことないな。。 使いこなせば、それなしとか考えられないんだろうけど、つらい。</description></item><item><title>SQLBoiler</title><link>https://umemak.github.io/blog/posts/2022/11/07_sqlboiler/</link><pubDate>Mon, 07 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/07_sqlboiler/</guid><description>volatiletech/sqlboiler: Generate a Go ORM tailored to your database schema.を少し触ってみた。 普段はkyleconroy/sqlc: Generate type-safe code from SQLをよく使っているのだけれど、あらかじめSQLを書かなくて良いのは楽。 だけど結局DB操作するときには対象のレコードを指定するのに組み立てないといけないので、一長一短。 手段を一つしかもっていないと、それ</description></item><item><title>OpenAPIで生成したサーバーのテスト</title><link>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</guid><description>よくわからない。 ググるとhttptest使う例が良く出てくるけど、型が合わなくて組み立てられない。 仕方ないので、APIサーバー起動してhttp.NewRequestWithContextで叩いて結果を見るという、E2Eっぽいテストに落ち着きそう。</description></item><item><title>chiでproxy</title><link>https://umemak.github.io/blog/posts/2022/09/15_chi_proxy/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/15_chi_proxy/</guid><description>grpc-gatewayでgRPCとREST両対応のサーバを作る | フューチャー技術ブログのサンプルでmux.Handle(&amp;quot;/docs/&amp;quot;, docsProxy)となっているところを、go-chi/chi: lightweight, idiomatic and composable router for building Go HTTP servicesを使っているのでrouter.Handle</description></item><item><title>proto</title><link>https://umemak.github.io/blog/posts/2022/09/14_proto/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/14_proto/</guid><description>昨日のエラーは、grpc-ecosystem/grpc-gateway: gRPC to JSON proxy generator following the gRPC HTTP specにあるようにbuf.yamlに deps: - buf.build/googleapis/googleapis を追記してbuf mod updateを実行したら直ったような気がする。 気がする、というのは他にもprotoファイルをダウンロードしてきたりとかいろいろやっていて何が決定打だ</description></item><item><title>proto</title><link>https://umemak.github.io/blog/posts/2022/09/13_proto/</link><pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/13_proto/</guid><description>proto定義何もわからない。。 REST用のパスを定義するために option (google.api.http) = { get : &amp;quot;/example-messages/{id}&amp;quot; }; といった定義が必要で、これを使うには import &amp;quot;google/api/annotations.proto&amp;quot;; が必要らしいという理解なのだけど、これをビルドしようとすると event.proto:6:1: Import &amp;quot;google/api/annotations.proto&amp;quot; was not found or had errors. というエラーが出てしまう。 こういうところで躓くの嫌すぎる。</description></item><item><title>protoをマスターにする</title><link>https://umemak.github.io/blog/posts/2022/09/12_proto2openapi/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/12_proto2openapi/</guid><description>protoをAPIスキーマのマスターにしようとした場合、既存のOpenAPIで用意していたUIとかどうしよう、ということになるけれど、OpenAPI-&amp;gt;gRPCとは違って逆の変換はたくさんツールがあることは調査済み。 全体の作りとしてはgrpc-gatewayでgRPCとREST両対応のサーバを</description></item><item><title>OpenAPIからgRPCへの移行</title><link>https://umemak.github.io/blog/posts/2022/09/11_openapi2proto/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/11_openapi2proto/</guid><description>今あるOpenAPI用の定義yamlファイルからgRPC用のprotoファイルが生成できないかなと思い、検索したら良さそうなものが見つかった。 nytimes/openapi2proto: A tool for generating Protobuf v3 schemas and gRPC service definitions from OpenAPI specifications https://github.com/umemak/eventsite_go/blob/main/openapi.yml でやってみた。 $ go install github.com/NYTimes/openapi2proto/cmd/openapi2proto $ openapi2proto -spec openapi.yml -annotate syntax = &amp;#34;proto3&amp;#34;; package eventsite; import &amp;#34;google/api/annotations.proto&amp;#34;; import &amp;#34;google/protobuf/empty.proto&amp;#34;; service EventsiteService { // Get all events. rpc GetEvents(google.protobuf.Empty) returns (google.protobuf.Empty) { option (google.api.http) = { get: &amp;#34;/events&amp;#34; }; } // Create event. rpc PostEvents(google.protobuf.Empty) returns (google.protobuf.Empty) { option (google.api.http) = { post: &amp;#34;/events&amp;#34; }; } } s</description></item><item><title>gRPCを触ってみる</title><link>https://umemak.github.io/blog/posts/2022/09/10_connect/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/10_connect/</guid><description>gRPCを触ってみたくなったので、gRPCがフロントエンド通信の第一の選択肢になる時代がやってきたかも？ | フューチャー技術ブログをやってみる。 frontendでnpm installするところでgitエラーになってしまう。 $ npm install --save-dev bufbuild/protoc-gen-connect-web bufbuild/protoc-gen-es npm ERR! code 128 npm ERR! An unknown git error occurred npm ERR! command git --no-replace-objects ls-remote ssh://git@github.com/bufbuild/protoc-gen-connect-web.git npm ERR! git@github.com: Permission denied (publickey). npm ERR! fatal: Could not read from remote repository. npm</description></item></channel></rss>