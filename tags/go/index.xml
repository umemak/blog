<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on umemak</title><link>https://umemak.github.io/blog/tags/go/</link><description>Recent content in go on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 20 Jan 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>gRPC Connect</title><link>https://umemak.github.io/blog/posts/2023/20_grpc_connect/</link><pubDate>Fri, 20 Jan 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/20_grpc_connect/</guid><description>bufbuild/connect-go: Simple, reliable, interoperable. A better gRPC. テスト用にgRPCのサーバーが欲しかったので、使ってみた。 READMEに書いてあるサンプルのように作ったら、grpcurlでリフレクションのエラーになったので、次世代gRPC?『connect-go』やってみたを参考にリフレクションを入れたら動いた。 ついでにクライアントもConnect</description></item><item><title>goでmissing go.sum entry cacheエラー</title><link>https://umemak.github.io/blog/posts/2023/17_go_mod_sum/</link><pubDate>Tue, 17 Jan 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/17_go_mod_sum/</guid><description>昨日のgo buildでエラーになってgo runだと動く件、正確にはbuildのほうはmake経由での実行で、runは直接という違いがあった。 goのバージョン管理について、新しいバージョンが出たらManaging Go installations - The Go Programming Languageのようにgo installを使ってインストールしていて、ali</description></item><item><title>goでmissing go.sum entry cacheエラー</title><link>https://umemak.github.io/blog/posts/2023/16_go_mod_sum/</link><pubDate>Mon, 16 Jan 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/16_go_mod_sum/</guid><description>go buildしようとするとmissing go.sum entry cacheなエラーが出る。 ググってもgo mod tidyすれば直る的なものしかヒットせず。 go clean --modcacheしてみてもダメ。 go runだと実行できてしまうので余計訳が分からない。</description></item><item><title>KindleのXMLをTSVに変換する</title><link>https://umemak.github.io/blog/posts/2022/12/01_xml2tsv/</link><pubDate>Thu, 01 Dec 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/12/01_xml2tsv/</guid><description>umemak/kindle_xml_to_tsv作った。 ExcelだとXMLファイル読めるらしい（試してない）けど、Googleスプレッドシートだと読み込めなかったので、TSVに変換して読み込めた。 goのencoding/xml使って、割と簡単に書けたけど、AuthorsとPublishersが配列</description></item><item><title>CloudFunctionsのログ</title><link>https://umemak.github.io/blog/posts/2022/11/30_cloudfunctions_log/</link><pubDate>Wed, 30 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/30_cloudfunctions_log/</guid><description>デプロイのエラーは、go clean -modcacheしてgo.sum削除してgo.modのrequire全削除してgo mod tidyしたら直った。 何が効いたのかはわからない。 ログは、JSON形式で出力しないといけないのかと思ってそのように書いてみたら、そのまま記録されて構造化されなかった。 集計するものでもなけれ</description></item><item><title>CloudFunctionsのログ</title><link>https://umemak.github.io/blog/posts/2022/11/28_cloudfunctions_log/</link><pubDate>Mon, 28 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/28_cloudfunctions_log/</guid><description>何もしないと、リクエストパラメータすらログに出力されないので、何かと不便。 ログの作成、表示、処理 | Google Cloud Functions に関するドキュメントによると、標準出力や標準エラーに書き込めば良いが、Entry構造体を定義して、Stringメソッドを作り、logにPrintlnで渡せばもっと良い感じにできるらしい。 とりあえず</description></item><item><title>runnでgRPCのテスト3</title><link>https://umemak.github.io/blog/posts/2022/11/22_runn/</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/22_runn/</guid><description>runnでDBの操作もできるのだけど、BINARY型のカラムがあるテーブルだとうまく動かない（気がする）。 深く考えずにCHAR型に変更したら通ったので、おそらくBINARY型が原因だったと思う。 時間ができたら検証してみたい。</description></item><item><title>runnでgRPCのテスト2</title><link>https://umemak.github.io/blog/posts/2022/11/18_runn/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/18_runn/</guid><description>runnのコマンドライン実行でうまく動かない件、オプション--grpc-no-tlsを指定したら解消した。 デバッグ用に詳細オプションないかなーってコマンドラインヘルプ見ていて見つけた。 マニュアルはちゃんと読みましょう（今年何度目かの反省</description></item><item><title>runnでgRPCのテスト</title><link>https://umemak.github.io/blog/posts/2022/11/17_runn/</link><pubDate>Thu, 17 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/17_runn/</guid><description>gRPCサーバーをテストするのに、fullstorydev/grpcurl: Like cURL, but for gRPC: Command-line tool for interacting with gRPC serversを使っていたのだけど、自動化するのに良いものはないかと探して、k1LoW/runn: runn is a package/tool for running operations following a scenario.を試してみた。 go testから使うのは何となくできたような気がするけど</description></item><item><title>SQLBoilerで論理削除の復旧</title><link>https://umemak.github.io/blog/posts/2022/11/14_sqlboiler_undelete/</link><pubDate>Mon, 14 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/14_sqlboiler_undelete/</guid><description>SQLBoilerはDeleteするときに論理削除が使える。 詳細は【Go】sqlboilerで論理削除を実装する | ISSUEが詳しい。 論理削除のときはdeleted_atカラムがセットされる。 で、そのときupdated_atは更新されない。 論理削除した行を元に戻したいとき、deleted_atにnu</description></item></channel></rss>