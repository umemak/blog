<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>go on umemak</title><link>https://umemak.github.io/blog/tags/go/</link><description>Recent content in go on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 25 Aug 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml"/><item><title>Ginkgoやめた</title><link>https://umemak.github.io/blog/posts/2022/08/25_ginkgo/</link><pubDate>Thu, 25 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/25_ginkgo/</guid><description>普通にGoのテストとして書いたほうが融通が利くので、そのようにすることにした。 たぶん使いどころが間違っていたのだと思う。 適所であればGinkgoも有効なはず。</description></item><item><title>Ginkgo難解</title><link>https://umemak.github.io/blog/posts/2022/08/24_ginkgo/</link><pubDate>Wed, 24 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/24_ginkgo/</guid><description>Ginkgo使えば使うほどわからなくなってくる。 上から順番に、途中経過もチェックしながら実行したいだけなんだけどなぁ。</description></item><item><title>詳解Go言語Webアプリケーション開発</title><link>https://umemak.github.io/blog/posts/2022/08/21_go_book/</link><pubDate>Sun, 21 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/21_go_book/</guid><description>詳解Go言語Webアプリケーション開発 | 清水陽一郎 | 工学 | Kindleストア | Amazon読み終わった。 後半のハンズオン、途中から説明が足りない感じで、何度かbudougumi0617/go_todo_app: 書籍「詳解Go言語Webアプリケーション開発」のサンプルコードリポジトリです。を見る必要が</description></item><item><title>OpenAPIクライアントの使い方</title><link>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</guid><description>Documentation for the go Generatorで生成したは良いけれど、使い方がわからず試行錯誤してみていたら、生成したdocsの中にサンプルコードが書かれていた。。 構造体のドキュメントとかだと思ってスルーしてたのが敗因。 生成物はちゃんと見ましょう。</description></item><item><title>Ginkgo難解</title><link>https://umemak.github.io/blog/posts/2022/08/15_ginkgo/</link><pubDate>Mon, 15 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/15_ginkgo/</guid><description>久しぶりにonsi/ginkgo: A Modern Testing Framework for Go触って、やっぱりよくわからないなー、と。 BeforeEachとか使って、初期化処理を共通化しようとしたのだけれど、初期化されていない現象とか。 テスト用の構造体ってちゃんと作ろうとすると結構行数食ってしまうけど、あまりテストコードと離れたところに置きたく</description></item><item><title>詳解Go言語Webアプリケーション開発</title><link>https://umemak.github.io/blog/posts/2022/08/14_go_book/</link><pubDate>Sun, 14 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/14_go_book/</guid><description>詳解Go言語Webアプリケーション開発 | 清水陽一郎 | 工学 | Kindleストア | Amazonの後半のハンズオンを写経しながらやってみている。 あらためて手を動かして書くことで、新しい発見があったりして楽しい。</description></item><item><title>MLTファイルを作る2</title><link>https://umemak.github.io/blog/posts/2022/08/12_mlt/</link><pubDate>Fri, 12 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/12_mlt/</guid><description>silencedetectがなんか思ったのと違う感じで、代わりにPythonとffmpegで動画の無音部分をカットする - QiitaにあるPythonのプログラムの無音検出部分を使ってみた。 Goでもmkb218/gosndfile: Go bindings for libsndfileを使ったらできそうだけど、importしただ</description></item><item><title>MLTファイルを作る</title><link>https://umemak.github.io/blog/posts/2022/08/11_mlt/</link><pubDate>Thu, 11 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/11_mlt/</guid><description>Shotcutのプロジェクトの保存形式がMLTで、中身はXMLのテキスト。 作業動画を編集していて、無音部分はスキップして尺を短くしたい。 無音部分はffmpegのsilencedetectで検出できるので、そのタイムスタンプで切ったShotcutプロジェクトを開けば、効率的に不要な部分を切り詰めつつ必</description></item><item><title>Go言語のエラーラッピング</title><link>https://umemak.github.io/blog/posts/2022/07/31_go_error_wrap/</link><pubDate>Sun, 31 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/31_go_error_wrap/</guid><description>エラーのラッピングをすると何がうれしいのかという問いへの解答が見えた気がする。 ラッピングしない場合、元のエラーの文字列以外の情報が失われてしまうが、ラッピングするとエラー情報をアンラップして取り出すことができる。 失われてしまう情報が呼び出し元で必要な場合は、エラーをそのままreturnして返すか、必</description></item><item><title>sqlc</title><link>https://umemak.github.io/blog/posts/2022/07/28_sqlc/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/28_sqlc/</guid><description>別の調べものをしていて見つけたsqlc.dev | Compile SQL to type-safe Goを試してみた。 schema.sqlは、今までMySQLの起動時に読み込ませていたSQLファイルがそのまま使えた。 query.sqlもgoのmodelパッケージ内に書いていたSQLをコピペで作れた。 結構良いかも。</description></item></channel></rss>