<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on umemak</title><link>https://umemak.github.io/blog/tags/typescript/</link><description>Recent content in TypeScript on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 13 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>.d.tsファイル</title><link>https://umemak.github.io/blog/posts/2022/11/13_d.ts/</link><pubDate>Sun, 13 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/13_d.ts/</guid><description>&lt;p>&lt;a href="https://github.com/Saul-Mirone/milkdown">Saul-Mirone/milkdown: 🍼 Plugin driven WYSIWYG markdown editor framework.&lt;/a>と&lt;a href="https://github.com/jazz-soft/react-midi-player">jazz-soft/react-midi-player: React MIDI Player&lt;/a>を組み合わせて使おうとしたら、React MIDI PlayerがTypeScript未対応らしく、&lt;code>モジュール 'react-midi-player' の宣言ファイルが見つかりませんでした。&lt;/code>とのこと。&lt;/p>
&lt;p>&lt;code>react-midi-player.d.ts&lt;/code>を作ったらそこのエラーは消えたけど、今度は&lt;code>@milkdown&lt;/code>関連のimportが軒並みエラーになってしまった。&lt;/p></description></item><item><title>OpenAPIのTypeScriptクライアント</title><link>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</guid><description>&lt;p>結局、いくつか動かして試してみた。&lt;code>additional-properties&lt;/code>は無指定で。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/typescript-fetch">Documentation for the typescript-fetch Generator&lt;/a>
&lt;ul>
&lt;li>&lt;code>ReferenceError: _ is not defined&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/typescript-node">Documentation for the typescript-node Generator&lt;/a>
&lt;ul>
&lt;li>&lt;code>Module not found: Can't resolve 'request'&lt;/code>&lt;/li>
&lt;li>requestパッケージは&lt;a href="https://github.com/request/request#deprecated">Deprecated!&lt;/a>らしい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/typescript-axios">Documentation for the typescript-axios Generator&lt;/a>
&lt;ul>
&lt;li>とりあえず動いた。&lt;/li>
&lt;li>axiosパッケージの追加インストールが必要。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ということで、typescript-axios でやってみようと思う。&lt;/p></description></item><item><title>OpenAPIで生成したサーバーのテスト2</title><link>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</guid><description>&lt;p>E2Eテスト書くなら、OpenAPIのクライアントコードジェネレータ使って出力したもの使えばよいのでは？
と思いついたので、どのクライアントにしようかと&lt;a href="https://openapi-generator.tech/docs/generators#client-generators">Generators List&lt;/a>を眺める。&lt;/p>
&lt;p>せっかくだからTypeScriptが良いなと思うが、11種類もあってどれが適切なのか判断付かない。
実際に生成して使って比較すればよいのだろうけど、そこまで詳しくない言語でそれをやろうとすると挫折する気しかしない。&lt;/p></description></item><item><title>TypeScriptのexport</title><link>https://umemak.github.io/blog/posts/2022/05/06_ts_export/</link><pubDate>Fri, 06 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/06_ts_export/</guid><description>&lt;p>MDMMLのTypeScript移植が大体できたので、HTMLから呼び出せるようにしたい。&lt;/p>
&lt;p>先日はexportしてるはずなのに見つからないというエラーでどうしたら良いかわからず。&lt;/p>
&lt;p>&lt;a href="https://teratail.com/questions/190709">HTMLから外部のJavascriptファイルのfunctionを呼びたい&lt;/a>はやりたいこととあっているように思える。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Window&lt;/span> { &lt;span style="color:#a6e22e">Hello&lt;/span>()&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#66d9ef">void&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> window&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Window&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>window.&lt;span style="color:#a6e22e">Hello&lt;/span> &lt;span style="color:#f92672">=&lt;/span> () &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#a6e22e">console&lt;/span>.&lt;span style="color:#a6e22e">log&lt;/span>(&lt;span style="color:#a6e22e">Buffer&lt;/span>.&lt;span style="color:#66d9ef">from&lt;/span>(&lt;span style="color:#a6e22e">MDtoSMF&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;cdefg&amp;#34;&lt;/span>)).&lt;span style="color:#a6e22e">toString&lt;/span>(&lt;span style="color:#e6db74">&amp;#34;binary&amp;#34;&lt;/span>));
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>としてみたら呼べたけれど、今度は&lt;code>Buffer is not defined&lt;/code>だと。&lt;/p>
&lt;p>いろいろやってみて、&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-ts" data-lang="ts">&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">import&lt;/span> { &lt;span style="color:#a6e22e">MDtoSMF&lt;/span> } &lt;span style="color:#66d9ef">from&lt;/span> &lt;span style="color:#e6db74">&amp;#39;./mdmml&amp;#39;&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">interface&lt;/span> &lt;span style="color:#a6e22e">Window&lt;/span> { &lt;span style="color:#a6e22e">MDtoSMF&lt;/span>(&lt;span style="color:#a6e22e">md&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>)&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">ArrayBuffer&lt;/span>; }
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#66d9ef">declare&lt;/span> &lt;span style="color:#66d9ef">var&lt;/span> window&lt;span style="color:#f92672">:&lt;/span> &lt;span style="color:#a6e22e">Window&lt;/span>;
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>window.&lt;span style="color:#a6e22e">MDtoSMF&lt;/span> &lt;span style="color:#f92672">=&lt;/span> (&lt;span style="color:#a6e22e">md&lt;/span>: &lt;span style="color:#66d9ef">string&lt;/span>) &lt;span style="color:#f92672">=&amp;gt;&lt;/span> {
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#66d9ef">return&lt;/span> &lt;span style="color:#a6e22e">MDtoSMF&lt;/span>(&lt;span style="color:#a6e22e">md&lt;/span>);
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>};
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>これで動いた。正しい自信はない。。&lt;/p></description></item><item><title>TypeScriptでTable Driven Test</title><link>https://umemak.github.io/blog/posts/2022/05/05_tdt/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/05_tdt/</guid><description>&lt;p>もともとGoで書いていたテストが&lt;a href="https://github.com/umemak/mdmml/blob/main/mdmml_test.go#L162-L190">こんな感じ&lt;/a>だったのだけど、
&lt;a href="https://github.com/umemak/mdmml_js/blob/7930f4f23801ac0a58c645284c5d2091d8fa8024/src/mdmml.test.ts#L22-L56">こんな風に&lt;/a>移植してて面倒だと感じていた。&lt;/p>
&lt;p>&lt;a href="https://tblog.acomagu.me/plh/">TS と Jest で Table Driven Test をする · tblog&lt;/a>を参考に書き換えて、&lt;a href="https://github.com/umemak/mdmml_js/blob/716849f09419651500e25750d6e0b43514f04e6b/src/mdmml.test.ts#L31-L48">こうなった&lt;/a>。&lt;/p></description></item><item><title>TypeScriptで標準出力</title><link>https://umemak.github.io/blog/posts/2022/05/05_stdout/</link><pubDate>Thu, 05 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/05_stdout/</guid><description>&lt;p>マークダウンから変換したSMFデータを標準出力に書き出したいのだけれど、バイナリをそのまま出力する方法がわからず。。&lt;/p>
&lt;p>&lt;code>console.log&lt;/code>だと型情報とかついた普通のテキストになってしまう。&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;">&lt;code class="language-sh" data-lang="sh">&lt;span style="display:flex;">&lt;span>$ node dist/main.js
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>Uint8Array&lt;span style="color:#f92672">(&lt;/span>45&lt;span style="color:#f92672">)&lt;/span> &lt;span style="color:#f92672">[&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 77, 84, 104, 100, 0, 0, 0, 6, 0, 1, 0,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 1, 3, 192, 77, 84, 114, 107, 0, 0, 0, 23,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0, 255, 3, 0, 0, 255, 81, 3, 7, 161, 32,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> 0, 255, 88, 4, 4, 2, 24, 8, 0, 255, 47,
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span> &lt;span style="color:#ae81ff">0&lt;/span>
&lt;/span>&lt;/span>&lt;span style="display:flex;">&lt;span>&lt;span style="color:#f92672">]&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>&lt;code>fs&lt;/code>パッケージを使おうとしたけれど、&lt;code>Module not found: Error: Can't resolve 'fs'&lt;/code>などと言われてbuildできず。&lt;/p></description></item><item><title>TextEncoderのエラー</title><link>https://umemak.github.io/blog/posts/2022/05/04_textencoder/</link><pubDate>Wed, 04 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/04_textencoder/</guid><description>&lt;p>replaceAllを使いたくて、tsconfig.jsonに以下設定を追加した。&lt;/p>
&lt;pre tabindex="0">&lt;code> &amp;#34;lib&amp;#34;: [
 &amp;#34;ES2021.String&amp;#34;
 ]
&lt;/code>&lt;/pre>&lt;p>replaceAllが使えるようになったが、TextEncoderを使っているところでエラーになるようになってしまった。&lt;/p>
&lt;pre tabindex="0">&lt;code>error TS2304: Cannot find name &amp;#39;TextEncoder&amp;#39;.
&lt;/code>&lt;/pre>&lt;p>定義がないのか？と思って&lt;a href="https://www.npmjs.com/package/@types/text-encoding">@types/text-encoding - npm&lt;/a>にあるとおり追加してみた。&lt;/p>
&lt;pre tabindex="0">&lt;code>npm install --save @types/text-encoding
&lt;/code>&lt;/pre>&lt;p>別のエラーが出るようになった。&lt;/p></description></item></channel></rss>