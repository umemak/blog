<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on umemak</title><link>https://umemak.github.io/blog/tags/aws/</link><description>Recent content in aws on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 25 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>GoとLambda</title><link>https://umemak.github.io/blog/posts/2022/10/26_lambda_go/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/26_lambda_go/</guid><description>昨日、API GW+Lambdaの可能性について調べたとき、aws-lambda-go-api-proxy というものを見つけた。 awslabs/aws-lambda-go-api-proxy: lambda-go-api-proxy makes it easy to port APIs written with Go frameworks such as Gin (https://gin-gonic.github.io/gin/ ) to AWS Lambda and Amazon API Gateway. 良さそうだけど、PRが結構たまっているなーと思い、よく見てみると Deprecation in favor of Lambda Web Adapter · Issue #143 · awslabs/aws-lambda-go-api-proxy とのことで awslabs/aws-lambda-web-adapter: Run web applications on AWS Lambda の使用を勧めら</description></item><item><title>コンテナ動かす場所</title><link>https://umemak.github.io/blog/posts/2022/10/25_aws_container/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/25_aws_container/</guid><description>APIコンテナ動かすのにどのインスタンスタイプが良いのか。 ECS+Fargateも良さそうだけど、動かしっぱなしの用途だとEC2とそんなに料金も変わらないかな。 App Runnerがゼロスケールできれば一番手間がなさそうだけど、最低1つは動いてるっぽい。 API GW+Lambdaだと、使わないときは料金抑えられ</description></item><item><title>OpenAPIとAPI Gateway</title><link>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</guid><description>API GatewayにOpenAPIの定義を適用できる。 OpenAPI を使用した REST API の設定 - Amazon API Gateway API Gatewayの後ろにLambdaを使えば、EC2とかでGoのコンテナ動かすより安上がりになるのではないか？という思い付き。 この場合、APIサーバーはどういう構成で作るのかイメージがわかない。 現状は、openapi-</description></item><item><title>AWS App Runner</title><link>https://umemak.github.io/blog/posts/2022/08/19_apprunner/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/19_apprunner/</guid><description>AWS App Runner – フルマネージド型のコンテナアプリケーション - Amazon Web Services ちょっと使ってみた。 App Runner の新機能 — Amazon Virtual Private Cloud (VPC) をサポート | Amazon Web Services ブログを見て、RDSに接続してみようと。 コードリポジトリはGitHubしか対応していないし、GitHub側にインストールしないといけないものもあるようなので、とりあえずECRを使っ</description></item><item><title>データベース比較</title><link>https://umemak.github.io/blog/posts/2022/07/23_database/</link><pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/23_database/</guid><description>昨日はコンテナ実行環境の比較、今日はマネージドDB（MySQL）を比較してみる。 Amazon RDS for MySQL （MySQLのためのマネージドリレーショナルデータベース） | AWS Cloud SQL for MySQL マネージドデータベース | Cloud SQL: リレーショナル データベース サービス | Google Cloud Azure Database for MySQL - マネージド MySQL データベース | Microsoft Azure リージョンは東京で、シングル構成の</description></item><item><title>コンテナ実行環境比較</title><link>https://umemak.github.io/blog/posts/2022/07/22_container/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/22_container/</guid><description>AWSとAzureとGCPで、コンテナ実行環境の比較をしてみたくなった。 GCPのCloud Run: コンテナを秒単位で本番環境にデプロイ | Google Cloudみたいなやつ。 AWSはAWS App Runner – フルマネージド型のコンテナアプリケーション - Amazon Web Services、AzureはAzure Container Apps | Microsoft Azureが比較対象となるか</description></item><item><title>Amazon IVSプライベートチャネル</title><link>https://umemak.github.io/blog/posts/2022/07/08_amazon_ivs/</link><pubDate>Fri, 08 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/08_amazon_ivs/</guid><description>ストリームの再生にトークンが必要になる。 ほぼこのブログのやり方でできた。 [アップデート] Amazon Interactive Video Service で再生時の認証が行えるようになりました！ | DevelopersIO 一点だけ、秘密鍵を Secrets Manager にアップロードのところでエラーになった。 cliのバージョンが変わって、コマンドに--cli-binary-format raw-in-bas</description></item><item><title>Amazon IVS+Amplify</title><link>https://umemak.github.io/blog/posts/2022/07/07_amazon_ivs/</link><pubDate>Thu, 07 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/07_amazon_ivs/</guid><description>IVSのサンプルアプリ（React製）をAmplifyにデプロイしてみた。 npm run buildしたbuildディレクトリを丸ごとアップロードで。 jsとcssがHTTPコード301でファイル名の最後に/をつけたアドレスにリダイレクトされてエラーになっていたので、書き換えないようリダイレクト設定をしたら動いた</description></item><item><title>Amazon IVSのエラー</title><link>https://umemak.github.io/blog/posts/2022/07/06_amazon_ivs/</link><pubDate>Wed, 06 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/06_amazon_ivs/</guid><description>IVSのチャットルームがエラーで作れない件、試しにもう一つアカウント作ってみたけれど、同じ現象だった。 2年前に作ったアカウントと何が違うのだろう。。</description></item><item><title>Amazon IVSのサンプル</title><link>https://umemak.github.io/blog/posts/2022/07/05_amazon_ivs/</link><pubDate>Tue, 05 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/05_amazon_ivs/</guid><description>相変わらずエラーでIVSのチャットルームが作れない Your account is pending verification. Until the verification process is complete, you may not be able to carry out requests with this account. If you have questions, contact AWS Support. 仕方ないので、作れる方のアカウントで動作確認を進めることにした。 前に試したのと同じように、ap-northeast-1 でS3バケット作ってsam deployして、IVSチャットルームはus-</description></item></channel></rss>