<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>aws on umemak</title><link>https://umemak.github.io/blog/tags/aws/</link><description>Recent content in aws on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 31 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/aws/index.xml" rel="self" type="application/rss+xml"/><item><title>SAMでIP制限</title><link>https://umemak.github.io/blog/posts/2022/10/31_sam_ip/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/31_sam_ip/</guid><description>SAMを使ってデプロイしたLambdaの、リクエスト元のIPアドレスを制限したいとき。 Lambdaに制限を入れるのではなく、API Gatewayの設定でいける。 api gateway + samでapiの環境を作る(ip制限) - Qiita ここにたどり着くまでに、Lambdaをセキュリティグループに入れてみたりしたけど効かなかった</description></item><item><title>SAM入門</title><link>https://umemak.github.io/blog/posts/2022/10/29_sam/</link><pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/29_sam/</guid><description>SAM使ったらいい感じにLambdaできそうなので、やってみる。 Installing the AWS SAM CLI - AWS Serverless Application Model からインストーラーをダウンロードして、インストール。 VS Codeのターミナルからsamが実行できない（コマンドプロンプトからだとできる）。 いきなり躓いてやる気が。。 とりあえず、Windows版をアンインストールして、W</description></item><item><title>Lambdaのデプロイ</title><link>https://umemak.github.io/blog/posts/2022/10/28_lambda_deploy/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/28_lambda_deploy/</guid><description>AWSにLambdaをデプロイする方法、いくつかあると思うのだけれど、最近の主流は何だろう。 デプロイにも2段階あると思って、0→1のLambda自体作成するときと、それ以降の更新と。 初回はCloudFormationとかTerraformとか？ SAM使ったら最初もそれ以降もまとめていける？CDKは？</description></item><item><title>GoとLambda</title><link>https://umemak.github.io/blog/posts/2022/10/27_localstack/</link><pubDate>Thu, 27 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/27_localstack/</guid><description>aws-lambda-go-api-proxy でAPI作るとして、ローカルでのテスト環境どうするか問題。 localstack/localstack: 💻 A fully functional local AWS cloud stack. Develop and test your cloud &amp;amp; Serverless apps offline!を使うのが鉄板だと思うんだけど。 API Gateway V2はPro版じゃないと使えない。 AWS環境にデプロイして動かすのが簡単なのかなぁ。</description></item><item><title>GoとLambda</title><link>https://umemak.github.io/blog/posts/2022/10/26_lambda_go/</link><pubDate>Wed, 26 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/26_lambda_go/</guid><description>昨日、API GW+Lambdaの可能性について調べたとき、aws-lambda-go-api-proxy というものを見つけた。 awslabs/aws-lambda-go-api-proxy: lambda-go-api-proxy makes it easy to port APIs written with Go frameworks such as Gin (https://gin-gonic.github.io/gin/ ) to AWS Lambda and Amazon API Gateway. 良さそうだけど、PRが結構たまっているなーと思い、よく見てみると Deprecation in favor of Lambda Web Adapter · Issue #143 · awslabs/aws-lambda-go-api-proxy とのことで awslabs/aws-lambda-web-adapter: Run web applications on AWS Lambda の使用を勧めら</description></item><item><title>コンテナ動かす場所</title><link>https://umemak.github.io/blog/posts/2022/10/25_aws_container/</link><pubDate>Tue, 25 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/25_aws_container/</guid><description>APIコンテナ動かすのにどのインスタンスタイプが良いのか。 ECS+Fargateも良さそうだけど、動かしっぱなしの用途だとEC2とそんなに料金も変わらないかな。 App Runnerがゼロスケールできれば一番手間がなさそうだけど、最低1つは動いてるっぽい。 API GW+Lambdaだと、使わないときは料金抑えられ</description></item><item><title>OpenAPIとAPI Gateway</title><link>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</guid><description>API GatewayにOpenAPIの定義を適用できる。 OpenAPI を使用した REST API の設定 - Amazon API Gateway API Gatewayの後ろにLambdaを使えば、EC2とかでGoのコンテナ動かすより安上がりになるのではないか？という思い付き。 この場合、APIサーバーはどういう構成で作るのかイメージがわかない。 現状は、openapi-</description></item><item><title>AWS App Runner</title><link>https://umemak.github.io/blog/posts/2022/08/19_apprunner/</link><pubDate>Fri, 19 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/19_apprunner/</guid><description>AWS App Runner – フルマネージド型のコンテナアプリケーション - Amazon Web Services ちょっと使ってみた。 App Runner の新機能 — Amazon Virtual Private Cloud (VPC) をサポート | Amazon Web Services ブログを見て、RDSに接続してみようと。 コードリポジトリはGitHubしか対応していないし、GitHub側にインストールしないといけないものもあるようなので、とりあえずECRを使っ</description></item><item><title>データベース比較</title><link>https://umemak.github.io/blog/posts/2022/07/23_database/</link><pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/23_database/</guid><description>昨日はコンテナ実行環境の比較、今日はマネージドDB（MySQL）を比較してみる。 Amazon RDS for MySQL （MySQLのためのマネージドリレーショナルデータベース） | AWS Cloud SQL for MySQL マネージドデータベース | Cloud SQL: リレーショナル データベース サービス | Google Cloud Azure Database for MySQL - マネージド MySQL データベース | Microsoft Azure リージョンは東京で、シングル構成の</description></item><item><title>コンテナ実行環境比較</title><link>https://umemak.github.io/blog/posts/2022/07/22_container/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/22_container/</guid><description>AWSとAzureとGCPで、コンテナ実行環境の比較をしてみたくなった。 GCPのCloud Run: コンテナを秒単位で本番環境にデプロイ | Google Cloudみたいなやつ。 AWSはAWS App Runner – フルマネージド型のコンテナアプリケーション - Amazon Web Services、AzureはAzure Container Apps | Microsoft Azureが比較対象となるか</description></item></channel></rss>