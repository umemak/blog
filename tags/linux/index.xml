<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Linux on umemak</title><link>https://umemak.github.io/blog/tags/linux/</link><description>Recent content in Linux on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 02 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/linux/index.xml" rel="self" type="application/rss+xml"/><item><title>開いたままのファイルを削除したらどうなるか4</title><link>https://umemak.github.io/blog/posts/2022/04/02_open_file_delete/</link><pubDate>Sat, 02 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/02_open_file_delete/</guid><description>&lt;p>あと、sambaだけではなく、NFSでどうなるかも確認したい。&lt;/p>
&lt;p>NFSならWindowsサーバー用意しなくても良いから少しは簡単かな？&lt;/p></description></item><item><title>開いたままのファイルを削除したらどうなるか3</title><link>https://umemak.github.io/blog/posts/2022/04/01_open_file_delete/</link><pubDate>Fri, 01 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/01_open_file_delete/</guid><description>&lt;p>昨日はAWSでEC2使って試したけど、ローカルでもdocker使ってsambaサーバー立てたら同じことできたのではないか？&lt;/p></description></item><item><title>開いたままのファイルを削除したらどうなるか2</title><link>https://umemak.github.io/blog/posts/2022/03/31_open_file_delete/</link><pubDate>Thu, 31 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/31_open_file_delete/</guid><description>&lt;p>昨日のCパターンを実際にAWSで試してみた。Docker関係なかった。&lt;/p>
&lt;ul>
&lt;li>&lt;code>Amazon Linux 2 AMI (HVM) - Kernel 5.10, SSD Volume Type&lt;/code>と&lt;code>Microsoft Windows Server 2019 Base&lt;/code>のインスタンスを&lt;code>t2.micro&lt;/code>でそれぞれ作成&lt;/li>
&lt;li>Linux側からWindows側へのセキュリティグループからのアクセスを許可&lt;/li>
&lt;/ul>
&lt;h3 id="windows側">Windows側&lt;/h3>
&lt;ul>
&lt;li>C:\Users\shared を作成してプロパティから共有設定&lt;/li>
&lt;/ul>
&lt;h3 id="linux側">Linux側&lt;/h3>
&lt;ul>
&lt;li>Windowsの共有フォルダをマウントしてテスト用ファイル作成&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ sudo yum install cifs-utils
$ sudo mkdir /mnt/shared
$ sudo mount -t cifs //&amp;lt;WindowsのIP&amp;gt;/Users/shared /mnt/shared -o user=Administrator
$ ls /mnt/shared/
$ sudo mkdir /mnt/shared/test
$ sudo vi /mnt/shared/test/test.txt
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Goのインストールとオープンして待機するプログラムの実行&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ sudo su
# rm -rf /usr/local/go &amp;amp;&amp;amp; tar -C /usr/local -xzf go1.18.linux-amd64.tar.gz
# exit
$ export PATH=$PATH:/usr/local/go/bin
$ go version
go version go1.18 linux/amd64
$ sudo yum install git
$ git clone https://github.com/umemak/open_file_delete_test.git
$ cd open_file_delete_test
$ sudo /usr/local/go/bin/go run main.go /mnt/shared/test/test.txt
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Linux側別コンソールでファイル削除など確認&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ sudo lsof | grep test.txt
main 3916 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt
main 3916 3917 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt
main 3916 3918 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt
main 3916 3919 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt
$ ls -l /mnt/shared/test/
total 1
-rwxr-xr-x 1 root root 7 Mar 31 04:51 test.txt

$ sudo rm /mnt/shared/test/test.txt
$ sudo lsof | grep test.txt
main 3916 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt (deleted)
main 3916 3917 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt (deleted)
main 3916 3918 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt (deleted)
main 3916 3919 root 3r REG 0,40 7 1688849860265148 /mnt/shared/test/test.txt (deleted)

$ ls -l /mnt/shared/test/
total 1
-rwxr-xr-x 0 root root 7 Mar 31 04:51 test.txt

$ cat /mnt/shared/test/test.txt 
cat: /mnt/shared/test/test.txt: No such file or directory
&lt;/code>&lt;/pre>&lt;ul>
&lt;li>Goプログラム終了&lt;/li>
&lt;/ul>
&lt;pre tabindex="0">&lt;code>$ ls -l /mnt/shared/test/
total 0
&lt;/code>&lt;/pre></description></item><item><title>Firebase用デプロイサーバーを作る</title><link>https://umemak.github.io/blog/posts/2020/06/11_deployserver/</link><pubDate>Thu, 11 Jun 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/06/11_deployserver/</guid><description>&lt;p>SourceRepositoriesで管理して、CloudBuildでFirebase HostingにデプロイしているGatsbyプロジェクトを、SourceRepositoryとCloudBuildを使わずに実現してみる。
GiteaがCentOS6で動くようになったので、SourceRepository部分は置き換えられる。
CloudBuildをWebhookでスクリプト呼び出してやろうとしたところ、CentOS6ではGatsbyのビルドができない（古すぎる。。）
仕方ないので、ビルドサーバーを別で用意する。&lt;/p></description></item></channel></rss>