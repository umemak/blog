<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenAPI on umemak</title><link>https://umemak.github.io/blog/tags/openapi/</link><description>Recent content in OpenAPI on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 16 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/openapi/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenAPIで生成したサーバーのテスト</title><link>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</guid><description>よくわからない。 ググるとhttptest使う例が良く出てくるけど、型が合わなくて組み立てられない。 仕方ないので、APIサーバー起動してhttp.NewRequestWithContextで叩いて結果を見るという、E2Eっぽいテストに落ち着きそう。</description></item><item><title>OpenAPIクライアントの使い方</title><link>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</guid><description>Documentation for the go Generatorで生成したは良いけれど、使い方がわからず試行錯誤してみていたら、生成したdocsの中にサンプルコードが書かれていた。。 構造体のドキュメントとかだと思ってスルーしてたのが敗因。 生成物はちゃんと見ましょう。</description></item><item><title>OpenAPI generatorのソース</title><link>https://umemak.github.io/blog/posts/2022/08/05_openapi_generator_src/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/05_openapi_generator_src/</guid><description>openapi-generator/GoServerCodegen.java at master · OpenAPITools/openapi-generator この辺りから読み始めればよいのかな？ けどJavaかぁ。。 Javaは出始めのころちょっと触って、今もそうかもしれないけど、パッケージ名の命名にドメインを逆順で、みたいのが当時ドメインとか持ってなくてどうすればいいんだ？ってなって躓いた。 あとなんかインポートするの長くて呪文みたいだなーって思っ</description></item><item><title>OpenAPIとsqlcの連携</title><link>https://umemak.github.io/blog/posts/2022/08/04_openapi_sqlc/</link><pubDate>Thu, 04 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/04_openapi_sqlc/</guid><description>Documentation for the go-server Generatorで生成したファイルとsqlc.dev | Compile SQL to type-safe Goで生成したファイル、うまく連携できればもっと手数少なくAPIサーバーが作れるのになー・・ 現状用意するものとしては、DDLとqueryとAPI定義で、APIのリソースとDBのテーブルが1:1なら決め打ちでかける部分が出てくるは</description></item><item><title>OpenAPI Generator go-server</title><link>https://umemak.github.io/blog/posts/2022/07/29_openapi_generator/</link><pubDate>Fri, 29 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/29_openapi_generator/</guid><description>Documentation for the go-server Generatorで、routerはmuxとchiが選べると書いてあって、省略時はmuxとのこと。 chiの指定方法がわからなかったので調べた。 $ wget https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml $ docker run --rm \ -v ${PWD}:/local openapitools/openapi-generator-cli generate \ -i /local/petstore.yaml \ -g go-server \ --additional-properties=router=chi \ -o /local/out と、--additional-propertiesにつけるらしい。、 他のパラメータ、たとえばsererP</description></item><item><title>OpenAPI Generator</title><link>https://umemak.github.io/blog/posts/2022/07/21_openapi_generator/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/21_openapi_generator/</guid><description>Generators Listを眺めていたら、mysql-schemaなんてのがあったので、試してみた。 $ wget https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml $ docker run --rm \ -v ${PWD}:/local openapitools/openapi-generator-cli generate \ -i /local/petstore.yaml \ -g mysql-schema \ -o /local/out $ ls -R out/ out/: Model README.md mysql_schema.sql out/Model: ApiResponse.sql Category.sql Order.sql Pet.sql Tag.sql User.sql out/mysql_schema.sqlにDDLが作成されていた。 out/Modelには、CRUD用SQLのテンプレートが作られていた。 pets</description></item></channel></rss>