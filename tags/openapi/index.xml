<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenAPI on umemak</title><link>https://umemak.github.io/blog/tags/openapi/</link><description>Recent content in OpenAPI on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 29 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/openapi/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenAPIのyamlを結合する</title><link>https://umemak.github.io/blog/posts/2023/09/29_openapi_bundle/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/09/29_openapi_bundle/</guid><description>一つのopenapi.yamlに定義を書いていると、ファイルが肥大化して管理というか編集が大変になる。 で、分割するには$refを使って相対ファイル指定することで、外部ファイルを参照できる。 ただ、Swagger UIでダウンロードしようとすると、ルートのファイルしか取れない（相対ファイルを辿ればとれるだ</description></item><item><title>Prism使ってみた</title><link>https://umemak.github.io/blog/posts/2022/12/08_prism/</link><pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/12/08_prism/</guid><description>APIサーバーのモックを手っ取り早くほしかったのでstoplightio/prism: Turn any OpenAPI2/3 and Postman Collection file into an API server with mocking, transformations and validations.を試してみた。 POSTのレスポンスがexample指定してるはずなのに、空で返ってきてよくわからない。 モック対象がそんなに多くなかったから、とりあえずgoで組ん</description></item><item><title>PrismaとOpenAPI</title><link>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</guid><description>Prismaのドキュメント眺めていて、Build a REST API with NestJS, Prisma, PostgreSQL and Swaggerを見つけた。 PrismaというかNestJSの機能かもしれないけれど、OpenAPIドキュメントも表示できるっぽい。 これでいい感が出てきた。</description></item><item><title>OpenAPI generatorのテンプレート</title><link>https://umemak.github.io/blog/posts/2022/10/11_openapi_template/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/11_openapi_template/</guid><description>以前、OpenAPI generatorの出力をカスタマイズするにはJavaを読み解かねば・・みたいなことを書いていた。 OpenAPIとsqlcの連携 - umemak OpenAPI generatorのソース - umemak 公式のUsing Templatesによると、author templateを指定すれば組み込みテンプレートが出力される</description></item><item><title>OpenAPIとAPI Gateway</title><link>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</guid><description>API GatewayにOpenAPIの定義を適用できる。 OpenAPI を使用した REST API の設定 - Amazon API Gateway API Gatewayの後ろにLambdaを使えば、EC2とかでGoのコンテナ動かすより安上がりになるのではないか？という思い付き。 この場合、APIサーバーはどういう構成で作るのかイメージがわかない。 現状は、openapi-</description></item><item><title>OpenAPIのTypeScriptクライアント</title><link>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</guid><description>結局、いくつか動かして試してみた。additional-propertiesは無指定で。 Documentation for the typescript-fetch Generator ReferenceError: _ is not defined Documentation for the typescript-node Generator Module not found: Can't resolve 'request' requestパッケージはDeprecated!らしい。 Documentation for the typescript-axios Generator とりあえず動いた。 axiosパッケージの追加インストールが必要。 ということで、typescript-ax</description></item><item><title>OpenAPIで生成したサーバーのテスト2</title><link>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</guid><description>E2Eテスト書くなら、OpenAPIのクライアントコードジェネレータ使って出力したもの使えばよいのでは？ と思いついたので、どのクライアントにしようかとGenerators Listを眺める。 せっかくだからTypeScriptが良いなと思うが、11種類もあってどれが適切なのか判断付かない。 実際に生成して</description></item><item><title>OpenAPIで生成したサーバーのテスト</title><link>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</guid><description>よくわからない。 ググるとhttptest使う例が良く出てくるけど、型が合わなくて組み立てられない。 仕方ないので、APIサーバー起動してhttp.NewRequestWithContextで叩いて結果を見るという、E2Eっぽいテストに落ち着きそう。</description></item><item><title>OpenAPIクライアントの使い方</title><link>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</guid><description>Documentation for the go Generatorで生成したは良いけれど、使い方がわからず試行錯誤してみていたら、生成したdocsの中にサンプルコードが書かれていた。。 構造体のドキュメントとかだと思ってスルーしてたのが敗因。 生成物はちゃんと見ましょう。</description></item><item><title>OpenAPI generatorのソース</title><link>https://umemak.github.io/blog/posts/2022/08/05_openapi_generator_src/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/05_openapi_generator_src/</guid><description>openapi-generator/GoServerCodegen.java at master · OpenAPITools/openapi-generator この辺りから読み始めればよいのかな？ けどJavaかぁ。。 Javaは出始めのころちょっと触って、今もそうかもしれないけど、パッケージ名の命名にドメインを逆順で、みたいのが当時ドメインとか持ってなくてどうすればいいんだ？ってなって躓いた。 あとなんかインポートするの長くて呪文みたいだなーって思っ</description></item></channel></rss>