<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>OpenAPI on umemak</title><link>https://umemak.github.io/blog/tags/openapi/</link><description>Recent content in OpenAPI on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 29 Sep 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/openapi/index.xml" rel="self" type="application/rss+xml"/><item><title>OpenAPIのyamlを結合する</title><link>https://umemak.github.io/blog/posts/2023/09/29_openapi_bundle/</link><pubDate>Fri, 29 Sep 2023 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2023/09/29_openapi_bundle/</guid><description>&lt;p>一つのopenapi.yamlに定義を書いていると、ファイルが肥大化して管理というか編集が大変になる。&lt;/p>
&lt;p>で、分割するには&lt;code>$ref&lt;/code>を使って相対ファイル指定することで、外部ファイルを参照できる。&lt;/p>
&lt;p>ただ、Swagger UIでダウンロードしようとすると、ルートのファイルしか取れない（相対ファイルを辿ればとれるだろうけど面倒）。&lt;/p></description></item><item><title>Prism使ってみた</title><link>https://umemak.github.io/blog/posts/2022/12/08_prism/</link><pubDate>Thu, 08 Dec 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/12/08_prism/</guid><description>&lt;p>APIサーバーのモックを手っ取り早くほしかったので&lt;a href="https://github.com/stoplightio/prism">stoplightio/prism: Turn any OpenAPI2/3 and Postman Collection file into an API server with mocking, transformations and validations.&lt;/a>を試してみた。&lt;/p>
&lt;p>POSTのレスポンスがexample指定してるはずなのに、空で返ってきてよくわからない。&lt;/p>
&lt;p>モック対象がそんなに多くなかったから、とりあえずgoで組んだ。&lt;/p>
&lt;p>これだとサーバー側の仕様変更に追従できないから、時間あるときに解決したい。&lt;/p></description></item><item><title>PrismaとOpenAPI</title><link>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</guid><description>&lt;p>Prismaのドキュメント眺めていて、&lt;a href="https://www.prisma.io/blog/nestjs-prisma-rest-api-7D056s1BmOL0#set-up-swagger">Build a REST API with NestJS, Prisma, PostgreSQL and Swagger&lt;/a>を見つけた。&lt;/p>
&lt;p>PrismaというかNestJSの機能かもしれないけれど、OpenAPIドキュメントも表示できるっぽい。&lt;/p>
&lt;p>これでいい感が出てきた。&lt;/p></description></item><item><title>OpenAPI generatorのテンプレート</title><link>https://umemak.github.io/blog/posts/2022/10/11_openapi_template/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/11_openapi_template/</guid><description>&lt;p>以前、OpenAPI generatorの出力をカスタマイズするにはJavaを読み解かねば・・みたいなことを書いていた。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://umemak.github.io/blog/posts/2022/08/04_openapi_sqlc/">OpenAPIとsqlcの連携 - umemak&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://umemak.github.io/blog/posts/2022/08/05_openapi_generator_src/">OpenAPI generatorのソース - umemak&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>公式の&lt;a href="https://openapi-generator.tech/docs/templating/">Using Templates&lt;/a>によると、&lt;code>author template&lt;/code>を指定すれば組み込みテンプレートが出力されるとのこと。で、出力されたディレクトリを&lt;code>-t&lt;/code>で指定すると、そこにあるテンプレートを使って生成される。&lt;/p></description></item><item><title>OpenAPIとAPI Gateway</title><link>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</link><pubDate>Sun, 02 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/02_api_gateway/</guid><description>&lt;p>API GatewayにOpenAPIの定義を適用できる。
&lt;a href="https://docs.aws.amazon.com/ja_jp/apigateway/latest/developerguide/api-gateway-import-api.html">OpenAPI を使用した REST API の設定 - Amazon API Gateway&lt;/a>&lt;/p>
&lt;p>API Gatewayの後ろにLambdaを使えば、EC2とかでGoのコンテナ動かすより安上がりになるのではないか？という思い付き。&lt;/p>
&lt;p>この場合、APIサーバーはどういう構成で作るのかイメージがわかない。&lt;/p>
&lt;p>現状は、openapi-generatorで生成したmodelやらを使ってやり取りしているが、lambdaだとエントリーポイントごとにmainパッケージを用意する？&lt;/p></description></item><item><title>OpenAPIのTypeScriptクライアント</title><link>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</link><pubDate>Mon, 19 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/19_openapi_typescript/</guid><description>&lt;p>結局、いくつか動かして試してみた。&lt;code>additional-properties&lt;/code>は無指定で。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/typescript-fetch">Documentation for the typescript-fetch Generator&lt;/a>
&lt;ul>
&lt;li>&lt;code>ReferenceError: _ is not defined&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/typescript-node">Documentation for the typescript-node Generator&lt;/a>
&lt;ul>
&lt;li>&lt;code>Module not found: Can't resolve 'request'&lt;/code>&lt;/li>
&lt;li>requestパッケージは&lt;a href="https://github.com/request/request#deprecated">Deprecated!&lt;/a>らしい。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>&lt;a href="https://openapi-generator.tech/docs/generators/typescript-axios">Documentation for the typescript-axios Generator&lt;/a>
&lt;ul>
&lt;li>とりあえず動いた。&lt;/li>
&lt;li>axiosパッケージの追加インストールが必要。&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;p>ということで、typescript-axios でやってみようと思う。&lt;/p></description></item><item><title>OpenAPIで生成したサーバーのテスト2</title><link>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</link><pubDate>Sun, 18 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/18_openapi_test/</guid><description>&lt;p>E2Eテスト書くなら、OpenAPIのクライアントコードジェネレータ使って出力したもの使えばよいのでは？
と思いついたので、どのクライアントにしようかと&lt;a href="https://openapi-generator.tech/docs/generators#client-generators">Generators List&lt;/a>を眺める。&lt;/p>
&lt;p>せっかくだからTypeScriptが良いなと思うが、11種類もあってどれが適切なのか判断付かない。
実際に生成して使って比較すればよいのだろうけど、そこまで詳しくない言語でそれをやろうとすると挫折する気しかしない。&lt;/p></description></item><item><title>OpenAPIで生成したサーバーのテスト</title><link>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</link><pubDate>Fri, 16 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/16_openapi_test/</guid><description>&lt;p>よくわからない。&lt;/p>
&lt;p>ググるとhttptest使う例が良く出てくるけど、型が合わなくて組み立てられない。&lt;/p>
&lt;p>仕方ないので、APIサーバー起動してhttp.NewRequestWithContextで叩いて結果を見るという、E2Eっぽいテストに落ち着きそう。&lt;/p></description></item><item><title>OpenAPIクライアントの使い方</title><link>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</link><pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/16_openapi_client/</guid><description>&lt;p>&lt;a href="https://openapi-generator.tech/docs/generators/go/">Documentation for the go Generator&lt;/a>で生成したは良いけれど、使い方がわからず試行錯誤してみていたら、生成したdocsの中にサンプルコードが書かれていた。。&lt;/p>
&lt;p>構造体のドキュメントとかだと思ってスルーしてたのが敗因。
生成物はちゃんと見ましょう。&lt;/p></description></item><item><title>OpenAPI generatorのソース</title><link>https://umemak.github.io/blog/posts/2022/08/05_openapi_generator_src/</link><pubDate>Fri, 05 Aug 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/08/05_openapi_generator_src/</guid><description>&lt;p>&lt;a href="https://github.com/OpenAPITools/openapi-generator/blob/master/modules/openapi-generator/src/main/java/org/openapitools/codegen/languages/GoServerCodegen.java">openapi-generator/GoServerCodegen.java at master · OpenAPITools/openapi-generator&lt;/a>&lt;/p>
&lt;p>この辺りから読み始めればよいのかな？
けどJavaかぁ。。&lt;/p>
&lt;p>Javaは出始めのころちょっと触って、今もそうかもしれないけど、パッケージ名の命名にドメインを逆順で、みたいのが当時ドメインとか持ってなくてどうすればいいんだ？ってなって躓いた。&lt;/p>
&lt;p>あとなんかインポートするの長くて呪文みたいだなーって思ってそっと閉じた思い出。&lt;/p></description></item></channel></rss>