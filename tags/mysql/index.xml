<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>mysql on umemak</title><link>https://umemak.github.io/blog/tags/mysql/</link><description>Recent content in mysql on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sat, 09 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>adminer</title><link>https://umemak.github.io/blog/posts/2022/07/09_mysql/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/09_mysql/</guid><description>MySQLコンテナ作ろうと思って、Mysql - Official Image | Docker Hubのcompose書き方見てたら、adminerというイメージを使っていて、同様に起動してみたらなかなか良い。 元のプログラムはdockette/adminer: Tiniest boxed dockerized Adminer (MySQL, PostgreSQL, SQLite, Mongo, Oracle) Dockerfilesかな。 テーブル定義作るときに、カラム名を別</description></item><item><title>Goアプリ</title><link>https://umemak.github.io/blog/posts/2022/07/10_eventsite_go/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/10_eventsite_go/</guid><description>結局、フレームワークはgo-chi/chi: lightweight, idiomatic and composable router for building Go HTTP servicesを使うことにした。 理由は、認証で使いそうなパッケージgo-pkgz/auth: Authenticator via oauth2, direct, email and telegramのサンプルが使っていたから。 とりあえず、HTTPリクエストを受けてDB読み書きしてテンプレート加工して返すところまで</description></item><item><title>WindowsのminikubeでMySQLを動かす</title><link>https://umemak.github.io/blog/posts/2021/04/17_minikube_mysql/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/04/17_minikube_mysql/</guid><description>MacでやったらMySQLの起動時にエラーで落ちてしまったので、Windowsでどうなるか試す。 基本的には公式のドキュメントを参照。 https://kubernetes.io/ja/docs/tasks/run-application/run-single-instance-stateful-application/ munikubeインストール winget install minikube minikube起動 minikube start $ kubectl get nodes NAME STATUS ROLES AGE VERSION minikube Ready control-plane,master 73s v1.20.2 マニフェストファイル作成 mysql.yaml デプロイ $ kubectl apply -f mysql.yaml service/mysql created deployment.apps/mysql created persistentvolumeclaim/mysql-pv-claim created persistentvolume/mysql-pv-volume created $ kubectl get pods -l app=mysql NAME READY STATUS RESTARTS</description></item><item><title>GitHub Actions の MySQL で lower_case_table_names を変更する</title><link>https://umemak.github.io/blog/posts/2021/03/20_ghactions_mysql/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/03/20_ghactions_mysql/</guid><description>以前書いた、GitHub Actionsでインストール済みMySQLを使う方法で起動したMySQLは、lower_case_table_namesが0になっている（Linuxではこれがデフォルト）。 lower_case_table_namesを1に変更したければ、/etc/mysql/mysql.co</description></item><item><title>GitHub Actions で MySQL を使う</title><link>https://umemak.github.io/blog/posts/2020/12/14_github_actions_mysql/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/12/14_github_actions_mysql/</guid><description>GitHub ActionsでMySQLを使ったCIを回したかった。 ググると、servicesでmysqlコンテナを立ち上げる方法がヒットしたが、コンテナの起動に45秒くらいかかっていて、ちょっと長いなー、と。 そこでmysqlをインストールしたらどうなんだろうと思い、そういえばmysqlコマンドラインツールは最</description></item></channel></rss>