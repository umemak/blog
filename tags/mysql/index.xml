<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on umemak</title><link>https://umemak.github.io/blog/tags/mysql/</link><description>Recent content in MySQL on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 19 Dec 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/mysql/index.xml" rel="self" type="application/rss+xml"/><item><title>MySQLのGenerated Column</title><link>https://umemak.github.io/blog/posts/2022/12/19_mysql_generated_column/</link><pubDate>Mon, 19 Dec 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/12/19_mysql_generated_column/</guid><description>&lt;p>MySQLのGenerated Columnというものを知った。&lt;/p>
&lt;ul>
&lt;li>&lt;a href="https://dev.mysql.com/doc/refman/8.0/ja/create-table-generated-columns.html">MySQL :: MySQL 8.0 リファレンスマニュアル :: 13.1.20.8 CREATE TABLE および生成されるカラム&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://gihyo.jp/dev/serial/01/mysql-road-construction-news/0150">第150回　Generated Columnを利用してみる | gihyo.jp&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://qiita.com/naka_kyon/items/f3e19ab7a6275ab394bf">MySQLのGenerated Columnsまとめ with Rails - Qiita&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://please-sleep.cou929.nu/mysql-generated-columns.html">MySQL の Generated Columns のキャッチアップ - Please Sleep&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://system.blog.uuum.jp/entry/mysql-generated-columns">JSON型にindexも！MySQL 5.7のGenerated Columnsの可能性について探る - UUUMエンジニアブログ&lt;/a>&lt;/li>
&lt;/ul>
&lt;p>MySQL5.7.6から追加された機能とのことで、リリースされたのは2015年。だいぶ前だ。。&lt;/p></description></item><item><title>runnでgRPCのテスト3</title><link>https://umemak.github.io/blog/posts/2022/11/22_runn/</link><pubDate>Tue, 22 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/22_runn/</guid><description>&lt;p>runnでDBの操作もできるのだけど、BINARY型のカラムがあるテーブルだとうまく動かない（気がする）。&lt;/p>
&lt;p>深く考えずにCHAR型に変更したら通ったので、おそらくBINARY型が原因だったと思う。&lt;/p>
&lt;p>時間ができたら検証してみたい。&lt;/p></description></item><item><title>adminer</title><link>https://umemak.github.io/blog/posts/2022/07/09_mysql/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/09_mysql/</guid><description>&lt;p>MySQLコンテナ作ろうと思って、&lt;a href="https://hub.docker.com/_/mysql">Mysql - Official Image | Docker Hub&lt;/a>のcompose書き方見てたら、adminerというイメージを使っていて、同様に起動してみたらなかなか良い。&lt;/p>
&lt;p>元のプログラムは&lt;a href="https://github.com/dockette/adminer">dockette/adminer: Tiniest boxed dockerized Adminer (MySQL, PostgreSQL, SQLite, Mongo, Oracle) Dockerfiles&lt;/a>かな。&lt;/p>
&lt;p>テーブル定義作るときに、カラム名を別のテーブル名+idにしたら、自動で外部キー定義として認識してくれてすごい。&lt;/p></description></item><item><title>Goアプリ</title><link>https://umemak.github.io/blog/posts/2022/07/09_eventsite_go/</link><pubDate>Sat, 09 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/09_eventsite_go/</guid><description>&lt;p>結局、フレームワークは&lt;a href="https://github.com/go-chi/chi/">go-chi/chi: lightweight, idiomatic and composable router for building Go HTTP services&lt;/a>を使うことにした。&lt;/p>
&lt;p>理由は、認証で使いそうなパッケージ&lt;a href="https://github.com/go-pkgz/auth">go-pkgz/auth: Authenticator via oauth2, direct, email and telegram&lt;/a>のサンプルが使っていたから。&lt;/p>
&lt;p>とりあえず、HTTPリクエストを受けてDB読み書きしてテンプレート加工して返すところまでできた。&lt;/p></description></item><item><title>WindowsのminikubeでMySQLを動かす</title><link>https://umemak.github.io/blog/posts/2021/04/17_minikube_mysql/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/04/17_minikube_mysql/</guid><description>&lt;p>MacでやったらMySQLの起動時にエラーで落ちてしまったので、Windowsでどうなるか試す。&lt;/p>
&lt;p>基本的には公式のドキュメントを参照。
&lt;a href="https://kubernetes.io/ja/docs/tasks/run-application/run-single-instance-stateful-application/">https://kubernetes.io/ja/docs/tasks/run-application/run-single-instance-stateful-application/&lt;/a>&lt;/p>
&lt;h2 id="munikubeインストール">munikubeインストール&lt;/h2>
&lt;pre tabindex="0">&lt;code>winget install minikube
&lt;/code>&lt;/pre>&lt;h2 id="minikube起動">minikube起動&lt;/h2>
&lt;pre tabindex="0">&lt;code>minikube start
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ kubectl get nodes
NAME STATUS ROLES AGE VERSION
minikube Ready control-plane,master 73s v1.20.2
&lt;/code>&lt;/pre>&lt;h2 id="マニフェストファイル作成">マニフェストファイル作成&lt;/h2>
&lt;p>&lt;a href="https://github.com/umemak/blog/blob/master/content/posts/2021/04/mysql.yaml">mysql.yaml&lt;/a>&lt;/p>
&lt;h2 id="デプロイ">デプロイ&lt;/h2>
&lt;pre tabindex="0">&lt;code>$ kubectl apply -f mysql.yaml 
service/mysql created
deployment.apps/mysql created
persistentvolumeclaim/mysql-pv-claim created
persistentvolume/mysql-pv-volume created
&lt;/code>&lt;/pre>&lt;pre tabindex="0">&lt;code>$ kubectl get pods -l app=mysql
NAME READY STATUS RESTARTS AGE
mysql-68579b78bb-qcqww 1/1 Running 0 5m33s
&lt;/code>&lt;/pre>&lt;p>動いてるねぇ。。&lt;/p>
&lt;h2 id="後片付け">後片付け&lt;/h2>
&lt;pre tabindex="0">&lt;code>$ kubectl.exe delete -f mysql.yaml
service &amp;#34;mysql&amp;#34; deleted
deployment.apps &amp;#34;mysql&amp;#34; deleted
persistentvolumeclaim &amp;#34;mysql-pv-claim&amp;#34; deleted
persistentvolume &amp;#34;mysql-pv-volume&amp;#34; deleted
$ minikube stop
&lt;/code>&lt;/pre>&lt;p>Macのほう、MySQLのコマンドライン色々指定したのがまずかったのかなぁ。&lt;/p></description></item><item><title>GitHub Actions の MySQL で lower_case_table_names を変更する</title><link>https://umemak.github.io/blog/posts/2021/03/20_ghactions_mysql/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/03/20_ghactions_mysql/</guid><description>&lt;p>&lt;a href="../../../2020/12/14_github_actions_mysql">以前書いた&lt;/a>、GitHub Actionsでインストール済みMySQLを使う方法で起動したMySQLは、&lt;code>lower_case_table_names&lt;/code>が&lt;code>0&lt;/code>になっている（Linuxではこれがデフォルト）。&lt;/p>
&lt;p>&lt;code>lower_case_table_names&lt;/code>を&lt;code>1&lt;/code>に変更したければ、&lt;code>/etc/mysql/mysql.conf.d/mysqld.cnf&lt;/code>に&lt;code>lower_case_table_names = 1&lt;/code>を追記して起動すれば良いだろうと気軽に考えてやってみたところ、MySQLが起動せず。&lt;/p></description></item><item><title>GitHub Actions で MySQL を使う</title><link>https://umemak.github.io/blog/posts/2020/12/14_github_actions_mysql/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/12/14_github_actions_mysql/</guid><description>&lt;p>GitHub ActionsでMySQLを使ったCIを回したかった。&lt;/p>
&lt;p>ググると、servicesでmysqlコンテナを立ち上げる方法がヒットしたが、コンテナの起動に45秒くらいかかっていて、ちょっと長いなー、と。
そこでmysqlをインストールしたらどうなんだろうと思い、そういえばmysqlコマンドラインツールは最初から入っていたけど、他に何入っているんだろうと調べたら、MySQL Serverもインストールされているのを見つけた。
&lt;a href="https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md">https://github.com/actions/virtual-environments/blob/main/images/linux/Ubuntu2004-README.md&lt;/a>&lt;/p></description></item></channel></rss>