<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Freee on umemak</title><link>https://umemak.github.io/blog/tags/freee/</link><description>Recent content in Freee on umemak</description><generator>Hugo</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 21 Jan 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/tags/freee/index.xml" rel="self" type="application/rss+xml"/><item><title>freee Tech Night 「freeeにおけるモノリシック」</title><link>https://umemak.github.io/blog/posts/2020/01/21_freee_tech_night_5/</link><pubDate>Tue, 21 Jan 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/01/21_freee_tech_night_5/</guid><description>&lt;p>&lt;a href="https://freee-tech-night.connpass.com/event/157012/">https://freee-tech-night.connpass.com/event/157012/&lt;/a>&lt;/p>
&lt;h2 id="会計freeeのデプロイを10倍早くした話">会計freeeのデプロイを10倍早くした話&lt;/h2>
&lt;h3 id="北川修平-shuheiktgw">北川修平 (shuheiktgw)&lt;/h3>
&lt;ul>
&lt;li>
&lt;h2 id="会計freee">会計freee&lt;/h2>
&lt;/li>
&lt;li>Phusion Passenger
&lt;ul>
&lt;li>&lt;a href="https://www.phusionpassenger.com/">https://www.phusionpassenger.com/&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Capistrano を使ったデプロイ
&lt;ul>
&lt;li>問題点
&lt;ul>
&lt;li>直列デプロイ
&lt;ul>
&lt;li>LBから１つづつ外してデプロイしている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>50分ちかくかかっている&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>解決案
&lt;ul>
&lt;li>EKSへの移行&lt;/li>
&lt;li>AutoScalingGroupを使ったBlue/Greenデプロイ
&lt;ul>
&lt;li>サーバー自体のプロビジョニングに４分ぐらいかかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>アプリケーションサーバー（unicorn）によるホットデプロイ
&lt;ul>
&lt;li>これを選択&lt;/li>
&lt;li>デプロイ・ロールバックの時間が短くて済む&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>アプリケーションサーバーの入れ替え
&lt;ul>
&lt;li>Phusion PassengerをUnicornにした&lt;/li>
&lt;li>安全に入れ替えるには
&lt;ul>
&lt;li>影響範囲が大きい&lt;/li>
&lt;li>プランBの確保
&lt;ul>
&lt;li>Blue/Greenを用意&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>変更対象を深く理解する
&lt;ul>
&lt;li>ソースコードリーディング&lt;/li>
&lt;li>起動から陸セストをさばき始めるまでの流れ&lt;/li>
&lt;li>USR2シグナルを受け取ったときの処理&lt;/li>
&lt;li>各パラメータの使われ方と影響範囲&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>PreloadによるFileDDescriptorの共有
&lt;ul>
&lt;li>Linuxのfork処理の理解が必要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>段階的リリース
&lt;ul>
&lt;li>テスト環境での負荷試験
&lt;ul>
&lt;li>「負荷試験コトハジメ」&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>他サービスでの先行リリース&lt;/li>
&lt;li>本番環境でのカナリアリリース
&lt;ul>
&lt;li>2%程度&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Unicornへ移行した結果
&lt;ul>
&lt;li>25〜30分かかっていたのが2〜3分に短縮
&lt;ul>
&lt;li>デプロイ数の増加&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redisまわりで一部問題があった&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>FusionPassengerの有料版なら同じことできるが、サービス規模で試算したら高額だった&lt;/li>
&lt;/ul>
&lt;h2 id="データの構造から再検討するパフォーマンスチューニング">データの構造から再検討するパフォーマンスチューニング&lt;/h2>
&lt;h3 id="久保卓也-tkuboma">久保卓也 (tkuboma)&lt;/h3>
&lt;ul>
&lt;li>会計freeeの中の話&lt;/li>
&lt;li>監視
&lt;ul>
&lt;li>Mackrel&lt;/li>
&lt;li>NewRelic&lt;/li>
&lt;li>Monyog
&lt;ul>
&lt;li>DBリアルタイム監視に利用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Datadog&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Redashで見えるか
&lt;ul>
&lt;li>index効率、フルスキャンなど&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>DBパフォーマンス改善
&lt;ul>
&lt;li>indexでチューニング
&lt;ul>
&lt;li>explainで地道に&lt;/li>
&lt;li>インデックス追加したり、使うようにしたり&lt;/li>
&lt;li>ActiveRecordのscopeに注意&lt;/li>
&lt;li>indexを無駄にはらない&lt;/li>
&lt;li>検証は本番相当のデータで&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>クエリの変更でチューニング
&lt;ul>
&lt;li>対象データのrowが多すぎる
&lt;ul>
&lt;li>抽出条件の追加&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>クエリの結果が変わらないように注意
&lt;ul>
&lt;li>アプリケーション側で頑張る&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>データの持ちかたの見直し
&lt;ul>
&lt;li>idでなくstringでjoinしているテーブル&lt;/li>
&lt;li>マスターデータとunionしている
&lt;ul>
&lt;li>マスターデータをコピーしてしまう&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>頻繁にマスターデータが更新されるテーブルだと使えない
&lt;ul>
&lt;li>設計でカバー&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>テーブル構成の見直し
&lt;ul>
&lt;li>大量データを都度集計している
&lt;ul>
&lt;li>集計テーブルを作成する
&lt;ul>
&lt;li>圧縮率＝削減行数&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ロック問題
&lt;ul>
&lt;li>別トランザクションにして非同期実行する
&lt;ul>
&lt;li>Kinesis streamを利用&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>集計テーブルのデータの切り方の設計重要&lt;/li>
&lt;li>リアルタイム性の低下&lt;/li>
&lt;li>導入までのリードタイムが結構かかる&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>機能の見直し
&lt;ul>
&lt;li>必要以上に実行されていないか
&lt;ul>
&lt;li>Home画面とか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>ビジネスサイドとのコミュニケーション必要&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>slaveへ逃がす
&lt;ul>
&lt;li>レプリケーションのラグに注意&lt;/li>
&lt;li>社内ライブラリを使用（OSSではない）&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>N+1の解消
&lt;ul>
&lt;li>bullet&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Elasticsearch化&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="エンジニアがドメインロジックに集中するためのコアパッケージ整備">エンジニアがドメインロジックに集中するためのコアパッケージ整備&lt;/h2>
&lt;h3 id="志賀誠-maco_tasu">志賀誠 (@Maco_Tasu)&lt;/h3>
&lt;ul>
&lt;li>コアパッケージ：各サービスで共通して使われるもの
&lt;ul>
&lt;li>ロガーやエラーとか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>マイクロサービス化でgoを使うことが多い&lt;/li>
&lt;li>マイクロサービス基盤にK8sを採用&lt;/li>
&lt;li>マイクロサービス化で各チームでそれぞれ作り込んでいて横連携ができていなかった
&lt;ul>
&lt;li>サービス基盤&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>全マイクロサービスのコードを読んで機能を洗い出す
&lt;ul>
&lt;li>goらしい作りになっているか&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>デファクトとしてのパッケージ
&lt;ul>
&lt;li>強制するものではない&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>拡張性
&lt;ul>
&lt;li>ダッグタイピング&lt;/li>
&lt;li>go-cloud（CDK）を参考にした&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>かんたんに組み込める
&lt;ul>
&lt;li>依存関係&lt;/li>
&lt;li>wire（DIツール）を使う
&lt;ul>
&lt;li>依存の依存も解決してくれるのが良い&lt;/li>
&lt;li>&lt;a href="https://developers.freee.co.jp/entry/service-infra-and-wire">https://developers.freee.co.jp/entry/service-infra-and-wire&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>改善点
&lt;ul>
&lt;li>早めに提供して改善ループをまわす&lt;/li>
&lt;li>使うことによる利点を伝える&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>claat
&lt;ul>
&lt;li>チュートリアル作成ツール&lt;/li>
&lt;li>&lt;a href="https://github.com/googlecodelabs/tools/tree/master/claat">https://github.com/googlecodelabs/tools/tree/master/claat&lt;/a>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul></description></item></channel></rss>