<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 07 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>docker-compose v1のEOL</title><link>https://umemak.github.io/blog/posts/2022/03/07_docker_compose/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/07_docker_compose/</guid><description>Docker Desktopでは設定でcomposeのバージョン（1系と2系）を切り替えることができる。 ところで、いつまでV1が使えるのか気になったので調べてみた。 https://github.com/docker/compose では、デフォルトのブランチがv2となっている。masterブランチに切り替えてREADME.mdを見ると、 New features and bug fixes will only be considered in the V2 codebase とあるが、 but as</description></item><item><title>main関数を分けたのでテストも書く</title><link>https://umemak.github.io/blog/posts/2022/03/08_go_main_test/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/08_go_main_test/</guid><description>mainのテストは、os.Argsを直接設定するという割と無理やりな書き方でテストしていたけれど、処理部分を別関数にしたので、引数を変えて正常系と異常系をテストし分けることができるようになった。</description></item><item><title>main関数を分ける</title><link>https://umemak.github.io/blog/posts/2022/03/06_go_main/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/06_go_main/</guid><description>Rust版でやっているように、main関数から処理を分離してrun関数を作ってみた。</description></item><item><title>コマンドライン引数をflagで処理する</title><link>https://umemak.github.io/blog/posts/2022/03/05_go_flag/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/05_go_flag/</guid><description>入力ファイルをos.Args[1]で取得していたので、引数指定しないと範囲外アクセスでpanicしていた。 flagパッケージ使ってflag.Arg(0)で取得するようにしたので、引数指定しなかった場合にはファイルなしエラーで終わるようになった。 もっと親切にするなら、エラー終了ではなくヘルプ表示にする</description></item><item><title>Goのconst</title><link>https://umemak.github.io/blog/posts/2022/03/04_go_const/</link><pubDate>Fri, 04 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/04_go_const/</guid><description>EOTとかbyteのスライスをconstで定義しようとしてできなかった。 const EOT = []byte{0x00, 0xFF, 0x2F, 0x00} $ go run cmd/mdmml/main.go # github.com/umemak/mdmml ./mdmml.go:10:7: const initializer []byte{...} is not a constant The Go Programming Language Specification - The Go Programming Language 文字列リテラルが許されるならbyteスライスも許されてもよいではないかと思ったけれど、ダメらしい。 varで我慢する。</description></item><item><title>バグ取り</title><link>https://umemak.github.io/blog/posts/2022/03/03_mdmml/</link><pubDate>Thu, 03 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/03_mdmml/</guid><description>MDMMLのループバグ、デバッグが面倒だったのでループの展開だけ前処理に分けることにした。 これだと文字列の状態でテストできるので、16進数より見やすい。 たぶん直ったと思う。</description></item><item><title>VOICEVOX</title><link>https://umemak.github.io/blog/posts/2022/03/02_voicevox/</link><pubDate>Wed, 02 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/02_voicevox/</guid><description>Docker Desktopもインストールしたので、最近話題のVOICEVOX | 無料で使える中品質なテキスト読み上げソフトウェアを試してみた。 $ docker run -it --rm -p 50021:50021 hiroshiba/voicevox_engine:cpu-ubuntu20.04-latest 最初、GoとDockerでつくる音声合成CLIのページを参考にしてバージョン指定してたけど、latestにしたら使えるキャラクターが増えた。つい最近追加さ</description></item><item><title>Rancher Desktop</title><link>https://umemak.github.io/blog/posts/2022/03/01_rancher_desktop/</link><pubDate>Tue, 01 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/01_rancher_desktop/</guid><description>Inspironクリーンインストールした後、Dockerのセットアップしてなかったの忘れていて、せっかくなのでRancher Desktopを試してみることにした。 公式ページからWindows用のインストーラーをダウンロードして実行。 起動時に聞かれるContainer Runtimeはdockerdを選</description></item><item><title>バグ発見</title><link>https://umemak.github.io/blog/posts/2022/02/28_mdmml/</link><pubDate>Mon, 28 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/28_mdmml/</guid><description>ループと休符の組み合わせで、休符が消える現象が起きてる気がする。 後から実装したところはちょっと入り組んでしまっているね。。</description></item><item><title>Rust学習</title><link>https://umemak.github.io/blog/posts/2022/02/27_rust/</link><pubDate>Sun, 27 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/27_rust/</guid><description>The Rust Programming Language 日本語版 - The Rust Programming Language 日本語版、途中飛ばして12章やってたけれど、やっぱり最初からやったほうが良い気がしてきた。 そして、最初のページに すべてのプロジェクトの Cargo.toml に edition=&amp;ldquo;2018&amp;rdquo; とあることを前提にしています。 との注意書きがあるのに今更ながら気づいた。 昨日エラーが出ると言っていたのは、edition = &amp;quot;</description></item></channel></rss>