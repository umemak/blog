<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 15 Sep 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>chiでproxy</title><link>https://umemak.github.io/blog/posts/2022/09/15_chi_proxy/</link><pubDate>Thu, 15 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/15_chi_proxy/</guid><description>grpc-gatewayでgRPCとREST両対応のサーバを作る | フューチャー技術ブログのサンプルでmux.Handle(&amp;quot;/docs/&amp;quot;, docsProxy)となっているところを、go-chi/chi: lightweight, idiomatic and composable router for building Go HTTP servicesを使っているのでrouter.Handle</description></item><item><title>proto</title><link>https://umemak.github.io/blog/posts/2022/09/14_proto/</link><pubDate>Wed, 14 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/14_proto/</guid><description>昨日のエラーは、grpc-ecosystem/grpc-gateway: gRPC to JSON proxy generator following the gRPC HTTP specにあるようにbuf.yamlに deps: - buf.build/googleapis/googleapis を追記してbuf mod updateを実行したら直ったような気がする。 気がする、というのは他にもprotoファイルをダウンロードしてきたりとかいろいろやっていて何が決定打だ</description></item><item><title>proto</title><link>https://umemak.github.io/blog/posts/2022/09/13_proto/</link><pubDate>Tue, 13 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/13_proto/</guid><description>proto定義何もわからない。。 REST用のパスを定義するために option (google.api.http) = { get : &amp;quot;/example-messages/{id}&amp;quot; }; といった定義が必要で、これを使うには import &amp;quot;google/api/annotations.proto&amp;quot;; が必要らしいという理解なのだけど、これをビルドしようとすると event.proto:6:1: Import &amp;quot;google/api/annotations.proto&amp;quot; was not found or had errors. というエラーが出てしまう。 こういうところで躓くの嫌すぎる。</description></item><item><title>protoをマスターにする</title><link>https://umemak.github.io/blog/posts/2022/09/12_proto2openapi/</link><pubDate>Mon, 12 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/12_proto2openapi/</guid><description>protoをAPIスキーマのマスターにしようとした場合、既存のOpenAPIで用意していたUIとかどうしよう、ということになるけれど、OpenAPI-&amp;gt;gRPCとは違って逆の変換はたくさんツールがあることは調査済み。 全体の作りとしてはgrpc-gatewayでgRPCとREST両対応のサーバを</description></item><item><title>OpenAPIからgRPCへの移行</title><link>https://umemak.github.io/blog/posts/2022/09/11_openapi2proto/</link><pubDate>Sun, 11 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/11_openapi2proto/</guid><description>今あるOpenAPI用の定義yamlファイルからgRPC用のprotoファイルが生成できないかなと思い、検索したら良さそうなものが見つかった。 nytimes/openapi2proto: A tool for generating Protobuf v3 schemas and gRPC service definitions from OpenAPI specifications https://github.com/umemak/eventsite_go/blob/main/openapi.yml でやってみた。 $ go install github.com/NYTimes/openapi2proto/cmd/openapi2proto $ openapi2proto -spec openapi.yml -annotate syntax = &amp;#34;proto3&amp;#34;; package eventsite; import &amp;#34;google/api/annotations.proto&amp;#34;; import &amp;#34;google/protobuf/empty.proto&amp;#34;; service EventsiteService { // Get all events. rpc GetEvents(google.protobuf.Empty) returns (google.protobuf.Empty) { option (google.api.http) = { get: &amp;#34;/events&amp;#34; }; } // Create event. rpc PostEvents(google.protobuf.Empty) returns (google.protobuf.Empty) { option (google.api.http) = { post: &amp;#34;/events&amp;#34; }; } } s</description></item><item><title>gRPCを触ってみる</title><link>https://umemak.github.io/blog/posts/2022/09/10_connect/</link><pubDate>Sat, 10 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/10_connect/</guid><description>gRPCを触ってみたくなったので、gRPCがフロントエンド通信の第一の選択肢になる時代がやってきたかも？ | フューチャー技術ブログをやってみる。 frontendでnpm installするところでgitエラーになってしまう。 $ npm install --save-dev bufbuild/protoc-gen-connect-web bufbuild/protoc-gen-es npm ERR! code 128 npm ERR! An unknown git error occurred npm ERR! command git --no-replace-objects ls-remote ssh://git@github.com/bufbuild/protoc-gen-connect-web.git npm ERR! git@github.com: Permission denied (publickey). npm ERR! fatal: Could not read from remote repository. npm</description></item><item><title>Goで設定を良い感じに処理する方法</title><link>https://umemak.github.io/blog/posts/2022/09/09_go_config/</link><pubDate>Fri, 09 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/09_go_config/</guid><description>コマンドラインで引数を処理する順番は以前調べたことがあるのだけど、これをいい感じに処理してくれるGoのライブラリが欲しい気がする。 まず設定ファイルを読み、環境変数が設定されていれば上書き、コマンドラインで指定されていればさらに上書き joho/godotenv: A Go port of Ruby&amp;rsquo;s dotenv library (Loads environment variables from .env.) Netflix/go-env: a golang library to manage environment variables caarlos0/env: A simple and zero-dependencies library to parse environment variables into structs. ilyakaznacheev/cleanenv:</description></item><item><title>TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発、読了</title><link>https://umemak.github.io/blog/posts/2022/09/08_next_book/</link><pubDate>Thu, 08 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/08_next_book/</guid><description>途中から写経するのあきらめて流し読みした。 長くて（フォント的に）読みにくいコードを見るのがつらすぎたので。。 CSSの書き方は、こっちのスタイルではなくてファイル分けるほうが自分には合っていそう。 テストの書き方など、あとで見返すと参考になりそうなことはたくさんあった。 Kindle版のフォントは何とかな</description></item><item><title>TypeScriptとReact/Next.jsでつくる実践Webアプリケーション開発</title><link>https://umemak.github.io/blog/posts/2022/09/07_next_book/</link><pubDate>Wed, 07 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/07_next_book/</guid><description>読むの再開した。 作って学ぶ～の方とはCSSの定義の仕方が違ってstyled-componentsを使っているし、モジュールのディレクトリ構成も違う。 Storybookも導入しているし、Linterも設定している。 読んだところまでで1か所だけソースが画像になっているところがあって、全部これでいいのに・</description></item><item><title>Gitea移行</title><link>https://umemak.github.io/blog/posts/2022/09/06_gitea/</link><pubDate>Tue, 06 Sep 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/09/06_gitea/</guid><description>Giteaをセルフホスティングで動かしていて、古いCentOSからUbuntuに移行してみた。 基本的にはUsage: Backup and Restore - Docsにあるようにbackupしてrestoreなんだけど、もとのバージョンが低いせいか、Wikiが空なのとIssueが表示されない問題が。。 Issueは版行指定でURL直打</description></item></channel></rss>