<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Thu, 28 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>sqlc</title><link>https://umemak.github.io/blog/posts/2022/07/28_sqlc/</link><pubDate>Thu, 28 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/28_sqlc/</guid><description>別の調べものをしていて見つけたsqlc.dev | Compile SQL to type-safe Goを試してみた。 schema.sqlは、今までMySQLの起動時に読み込ませていたSQLファイルがそのまま使えた。 query.sqlもgoのmodelパッケージ内に書いていたSQLをコピペで作れた。 結構良いかも。</description></item><item><title>AdminerのOracle対応</title><link>https://umemak.github.io/blog/posts/2022/07/27_adminer_oracle/</link><pubDate>Wed, 27 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/27_adminer_oracle/</guid><description>昨日はとりあえず動くところまでできたので、Dockerfileを整えてみた。 https://github.com/umemak/docker-adminer/blob/master/4/Dockerfile イメージサイズ800MB弱。 もっとスリム化できないかな。</description></item><item><title>AdminerのOracle対応</title><link>https://umemak.github.io/blog/posts/2022/07/26_adminer_oracle/</link><pubDate>Tue, 26 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/26_adminer_oracle/</guid><description>昨日の続き。 とりあえず接続してテーブル一覧作ったりテーブル作成したりできた。 Docker + Laravel + Oracleの開発環境の構築方法が参考になった。</description></item><item><title>AdminerのOracle対応</title><link>https://umemak.github.io/blog/posts/2022/07/25_adminer_oracle/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/25_adminer_oracle/</guid><description>Adminer - Database management in a single PHP fileのDockerイメージAdminer - Official Image | Docker Hubは、Oracle接続に必要なモジュールが入っていない。 PHP: インストール/設定 - Manualによると、Instant Client for Linux x86-64 (64-bit)のBasicと、oci8が必要らしい。 DockerfileはOfficial Imageの</description></item><item><title>Prisma</title><link>https://umemak.github.io/blog/posts/2022/07/25_prisma/</link><pubDate>Mon, 25 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/25_prisma/</guid><description>Prismaを使ってDB設計ってできるのかな、と思い調べてみた。 Prisma自体は、ORMということだけれど、スキーマファイルをもとにDBに対してマイグレーションで定義を反映できる。 モデル間の関連もスキーマファイルで表現できる。 でも、API側をOpenAPIやGraphQLで定義するとすると、似たよ</description></item><item><title>GraphQL</title><link>https://umemak.github.io/blog/posts/2022/07/24_graphql/</link><pubDate>Sun, 24 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/24_graphql/</guid><description>API設計するのに、GraphQLの可能性はどうなのかと思ってちょっとググってみた。 個人的にはAmplifyを試していたときに良くわからなくて挫折した思い出がある。 なんとなく、参照系はGraphQLで柔軟性を持たせつつ、更新系は従来のリソース志向のAPIで使い分けるのはどうかなと思った。 Goでのサー</description></item><item><title>データベース比較</title><link>https://umemak.github.io/blog/posts/2022/07/23_database/</link><pubDate>Sat, 23 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/23_database/</guid><description>昨日はコンテナ実行環境の比較、今日はマネージドDB（MySQL）を比較してみる。 Amazon RDS for MySQL （MySQLのためのマネージドリレーショナルデータベース） | AWS Cloud SQL for MySQL マネージドデータベース | Cloud SQL: リレーショナル データベース サービス | Google Cloud Azure Database for MySQL - マネージド MySQL データベース | Microsoft Azure リージョンは東京で、シングル構成の</description></item><item><title>コンテナ実行環境比較</title><link>https://umemak.github.io/blog/posts/2022/07/22_container/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/22_container/</guid><description>AWSとAzureとGCPで、コンテナ実行環境の比較をしてみたくなった。 GCPのCloud Run: コンテナを秒単位で本番環境にデプロイ | Google Cloudみたいなやつ。 AWSはAWS App Runner – フルマネージド型のコンテナアプリケーション - Amazon Web Services、AzureはAzure Container Apps | Microsoft Azureが比較対象となるか</description></item><item><title>OpenAPI Generator</title><link>https://umemak.github.io/blog/posts/2022/07/21_openapi_generator/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/21_openapi_generator/</guid><description>Generators Listを眺めていたら、mysql-schemaなんてのがあったので、試してみた。 $ wget https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml $ docker run --rm \ -v ${PWD}:/local openapitools/openapi-generator-cli generate \ -i /local/petstore.yaml \ -g mysql-schema \ -o /local/out $ ls -R out/ out/: Model README.md mysql_schema.sql out/Model: ApiResponse.sql Category.sql Order.sql Pet.sql Tag.sql User.sql out/mysql_schema.sqlにDDLが作成されていた。 out/Modelには、CRUD用SQLのテンプレートが作られていた。 pets</description></item><item><title>PocketbaseのMigration</title><link>https://umemak.github.io/blog/posts/2022/07/20_pocketbase_migratin/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/20_pocketbase_migratin/</guid><description>昨日、Migratinが用意されているのを知って、試してみたけれど思ったように動かず。 マイグレーションにしか使わないパッケージもいくつかimportが必要だし、明示的にmigrate upしないといけない。 であれば、普通にHTTP APIでCreate Collectionしても良いかなという気持ちになっ</description></item></channel></rss>