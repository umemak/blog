<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Tue, 03 May 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Jestの導入</title><link>https://umemak.github.io/blog/posts/2022/05/03_jest/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/03_jest/</guid><description>ブラウザからの動作確認はいったん置いておいて、コマンドライン実行で動くものを目指す。 どうせなら自動テストも動かしながらやっていきたい。 JavaScriptのテストフレームワークは、Jest · 🃏 Delightful JavaScript Testingが主流らしいので、それに乗っかる。 Typescriptでの単体テストの書き方(Jest) |</description></item><item><title>node.jsバージョン管理</title><link>https://umemak.github.io/blog/posts/2022/05/03_n/</link><pubDate>Tue, 03 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/03_n/</guid><description>Jest実行しようとしたらnode.jsのバージョンが低いらしく、エラーになったのでバージョンを上げる方法を検索したらnというものがあると知ったので試してみた。 Node.jsとnpmをアップデートする方法 | Rriver $ node -v v10.19.0 $ sudo npm install -g n $ sudo n stable $ node -v v10.19.0 $ hash -r $ node -v v16.15.0</description></item><item><title>http-serverメモ</title><link>https://umemak.github.io/blog/posts/2022/05/02_http_server/</link><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/02_http_server/</guid><description>ローカルでチョット確認するためのhttpサーバー立てるのに便利なhttp-party/http-server: a simple zero-configuration command-line http server。 最近、起動はするもののリクエストを送ると終了してしまう現象が起きていて、ググったらissueがあった。 Server Crashing with &amp;ldquo;Cannot set headers after they are sent to the client&amp;rdquo; · Issue #634 · http-party/http-server バージョン13.0.2だと大</description></item><item><title>webpackで構築</title><link>https://umemak.github.io/blog/posts/2022/05/02_webpack/</link><pubDate>Mon, 02 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/02_webpack/</guid><description>昨日は、TypeScript環境構築に手間をかけたくないという想いでParcelを試してみたところ、エラーで途方に暮れていた。 今日は、古き良きwebpackを試した。 参考にしたページはこちら 最新版TypeScript+webpack 5の環境構築まとめ(React, Vue.js, Three.jsのサンプル付き) -</description></item><item><title>Parcelを使ってみる</title><link>https://umemak.github.io/blog/posts/2022/05/01_parcel/</link><pubDate>Sun, 01 May 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/05/01_parcel/</guid><description>久しぶりにJavaScript（TypeScript）を書こうとしたら、何から始めてよいかわからなくなっていた。 あまり環境構築に手間をかけたくなかったので、parcel-bundler/parcel: The zero configuration build tool for the web. 📦🚀を使ってみた。 Building a web app with Parcelを見ながら npm init npm install --save-dev parcel src/index.h</description></item><item><title>Magenta.js</title><link>https://umemak.github.io/blog/posts/2022/04/30_magenta/</link><pubDate>Sat, 30 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/30_magenta/</guid><description>昨日のcifkao/html-midi-player: 🎹 Play and display MIDI files on the webの使い方見ようとして、magenta-js/music at master · magenta/magenta-jsを使っているのを知った。 Magentaは出始めのときにそんなのがあるのか、って思って深くは見ていなかったのだけど、今度はちゃんと</description></item><item><title>MDMMLのJavaScript移植</title><link>https://umemak.github.io/blog/posts/2022/04/29_mdmml_js/</link><pubDate>Fri, 29 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/29_mdmml_js/</guid><description>Rust移植は未完だけれどもいい勉強になった。 今度はJavaScript（TypeScript）に移植しようと思う。 というのもcifkao/html-midi-player: 🎹 Play and display MIDI files on the webと連携してブラウザで完結出来たら良さそうなので。 もともとのGoの実装でも、サーバー立てるなりローカルにバ</description></item><item><title>GitHub Actionsのmatrix</title><link>https://umemak.github.io/blog/posts/2022/04/28_github_actions/</link><pubDate>Thu, 28 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/28_github_actions/</guid><description>GitHub Actionsのワークフロー構文 - GitHub Docs このjobs.&amp;lt;job_id&amp;gt;.strategy.matrixは、jobに含まれるstepsをmatrixの組み合わせでループ実行するという理解。 同じようなことを、step単位でやりたいときにうまい方法がないかなぁ、と。 jobs:example:steps:- name:example beginrun:echo &amp;#34;begin&amp;#34;- name:example Arun:echo &amp;#34;A&amp;#34;- name:example Brun:echo &amp;#34;</description></item><item><title>オーディオインターフェース選び</title><link>https://umemak.github.io/blog/posts/2022/04/27_audio_interface/</link><pubDate>Wed, 27 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/27_audio_interface/</guid><description>Amazonのタイムセール祭りでオーディオインターフェース買おうと思っていたけれど、特に安くなってなかったので見送った。 候補はこの辺り Focusrite フォーカスライト オーディオインターフェース 2イン/2アウト 24bit/192kHz Scarlett Solo (3rd Gen) ステッカー付きセット 【国内正規品】 : 楽器・音響機器 Amazon | audient 「EVO4」2in/2out オーディオ・</description></item><item><title>ginkgoの特殊機能とは？</title><link>https://umemak.github.io/blog/posts/2022/04/26_ginkgo/</link><pubDate>Tue, 26 Apr 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/04/26_ginkgo/</guid><description>昨日の調べもので出てきた、 Ginkgo has several capabilities that can only be accessed via ginkgo. （Ginkgoには、ginkgoを経由してしかアクセスできない機能がいくつかあります。） そのいくつかの機能を知りたい。 https://onsi.github.io/ginkgo/#ginkgo-cli-overview には、コマンドライン引数について書かれているが、むしろginkgoでサポートしていないものがあるという記述なので、思っていたのとは違</description></item></channel></rss>