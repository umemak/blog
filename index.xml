<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 22 Jul 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>コンテナ実行環境比較</title><link>https://umemak.github.io/blog/posts/2022/07/22_container/</link><pubDate>Fri, 22 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/22_container/</guid><description>AWSとAzureとGCPで、コンテナ実行環境の比較をしてみたくなった。 GCPのCloud Run: コンテナを秒単位で本番環境にデプロイ | Google Cloudみたいなやつ。 AWSはAWS App Runner – フルマネージド型のコンテナアプリケーション - Amazon Web Services、AzureはAzure Container Apps | Microsoft Azureが比較対象となるか</description></item><item><title>OpenAPI Generator</title><link>https://umemak.github.io/blog/posts/2022/07/21_openapi_generator/</link><pubDate>Thu, 21 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/21_openapi_generator/</guid><description>Generators Listを眺めていたら、mysql-schemaなんてのがあったので、試してみた。 $ wget https://raw.githubusercontent.com/openapitools/openapi-generator/master/modules/openapi-generator/src/test/resources/3_0/petstore.yaml $ docker run --rm \ -v ${PWD}:/local openapitools/openapi-generator-cli generate \ -i /local/petstore.yaml \ -g mysql-schema \ -o /local/out $ ls -R out/ out/: Model README.md mysql_schema.sql out/Model: ApiResponse.sql Category.sql Order.sql Pet.sql Tag.sql User.sql out/mysql_schema.sqlにDDLが作成されていた。 out/Modelには、CRUD用SQLのテンプレートが作られていた。 pets</description></item><item><title>PocketbaseのMigration</title><link>https://umemak.github.io/blog/posts/2022/07/20_pocketbase_migratin/</link><pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/20_pocketbase_migratin/</guid><description>昨日、Migratinが用意されているのを知って、試してみたけれど思ったように動かず。 マイグレーションにしか使わないパッケージもいくつかimportが必要だし、明示的にmigrate upしないといけない。 であれば、普通にHTTP APIでCreate Collectionしても良いかなという気持ちになっ</description></item><item><title>Goのエラー処理</title><link>https://umemak.github.io/blog/posts/2022/07/19_error_handring/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/19_error_handring/</guid><description>fmt.Errorf(&amp;quot;～～: %w&amp;quot;, err)の書き方にルールあるのかな、と思って調べたら、先人の記事があった。 fmt.Errorfのメッセージについての調査と、linterとしての実装について | CyberAgent Developers Blog いつもその時の雰囲気で書いていたので、こういったルールで揃えられるのは良い。 もうひとつ、tem</description></item><item><title>PocketbaseのCollections</title><link>https://umemak.github.io/blog/posts/2022/07/19_pocketbase/</link><pubDate>Tue, 19 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/19_pocketbase/</guid><description>コンテナで起動時にコレクションを作成したい時のやり方が見つからない。 MySQLとかだと、/docker-entrypoint-initdb.dにSQLを置いておけば実行してくれる、そういうやつ。 →DB migrations - Docs - PocketBase Pocketbaseの起動時に初期化するのではなく、利用するアプリ側でマイグレーションを実</description></item><item><title>Goのredirect</title><link>https://umemak.github.io/blog/posts/2022/07/18_go_redirect/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/18_go_redirect/</guid><description>ログアウトの処理（GET /logout）実行後にトップページにリダイレクトしようとした。 http.Redirect(w, r, &amp;ldquo;/&amp;rdquo;, 301) おや？動作しない時がある。。 301だと、ブラウザはリダイレクト先を覚えて、次からはリダイレクト先を最初から叩くっぽい。 なので、302にしてあげないと思ったような動きにならない。 ところで、Goのhttpパッ</description></item><item><title>Goのtemplateのinclude</title><link>https://umemak.github.io/blog/posts/2022/07/18_go_include/</link><pubDate>Mon, 18 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/18_go_include/</guid><description>テンプレートのincludeってどうやるんだっけ、と思って検索した。 Go の html/template でヘッダーやフッター等の共通化を実現する方法 · Yutaka 🍊 Kato なるほど、{{define &amp;quot;header&amp;quot;}}～{{end}}で定義して、{{template &amp;quot;header&amp;quot; .}}で呼び出すのか。</description></item><item><title>mermaidのER図</title><link>https://umemak.github.io/blog/posts/2022/07/17_mermaid/</link><pubDate>Sun, 17 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/17_mermaid/</guid><description>VS Codeのmermaid拡張でER図を試していて、カラム名に日本語使えなくて論理名と物理名両方書きたいのにどうしようかと思ったら、コメントとして書けば日本語も通ることに気づいた。 mermaid - Markdownish syntax for generating flowcharts, sequence diagrams, class diagrams, gantt charts and git graphs. つまり、こう書ける。 erDiagram user { bigint id PK &amp;quot;ID Auto increment&amp;quot; text email &amp;quot;メール&amp;quot; text name &amp;quot;</description></item><item><title>GoのJSON</title><link>https://umemak.github.io/blog/posts/2022/07/16_go_json/</link><pubDate>Sat, 16 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/16_go_json/</guid><description>PocketBaseのユーザー作成をGoからHTTP叩いて実行しようとして、正常時とエラー時で戻ってくるJSONの形式が違っていた。 structを別々に用意して、Unmarshalでエラーになったらもう片方を使う？とか思ったけど、 golang は ゆるふわに JSON を扱えまぁす! — KaoriYaによると、interfa</description></item><item><title>idとauto increment</title><link>https://umemak.github.io/blog/posts/2022/07/15_id_column/</link><pubDate>Fri, 15 Jul 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/07/15_id_column/</guid><description>DB設計するときのIDカラムについて。 昔ながらのシステムだと、auto increment使って連番が定番だと思うのだけど、PocketBaseでCollectionにRecord追加したとき、idは1ldTBeJNhX3jufuみたいな文字列が割り振られていて、そういえばFirebaseもそうだった</description></item></channel></rss>