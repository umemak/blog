<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 18 Jul 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>クラウドサービス比較</title><link>https://umemak.github.io/blog/posts/2021/07/18_clouds/</link><pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/07/18_clouds/</guid><description>AWSで構築しているシステムをAzureと並行稼働させることはできるのか？GCPは？という疑問を解消するために調べてみる。 サービス比較 まずはAWS, Azure, GCPのサービス比較。 サービス名先頭の AWS, Amazon, Azure, Cloud(GCP) は省略。 サーバーレスコンピューティング AWS Azure GCP Lambda Functions Functions Java, Go, PowerShell, Node.js, C#, Python, Ruby C#, JavaScript(Node.js), F#, Java, PowerShell, Python, TypeScript Node.js, Python, Go, Java, .NET Core(C#, F#), Ruby, PHP Lambda@Edge Node.js, Python CloudFront</description></item><item><title>WindowsのminikubeでMySQLを動かす</title><link>https://umemak.github.io/blog/posts/2021/04/17_minikube_mysql/</link><pubDate>Sat, 17 Apr 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/04/17_minikube_mysql/</guid><description>MacでやったらMySQLの起動時にエラーで落ちてしまったので、Windowsでどうなるか試す。 基本的には公式のドキュメントを参照。 https://kubernetes.io/ja/docs/tasks/run-application/run-single-instance-stateful-application/ munikubeインストール winget install minikube minikube起動 minikube start $ kubectl get nodes NAME STATUS ROLES AGE VERSION minikube Ready control-plane,master 73s v1.20.2 マニフェストファイル作成 mysql.yaml デプロイ $ kubectl apply -f mysql.yaml service/mysql created deployment.apps/mysql created persistentvolumeclaim/mysql-pv-claim created persistentvolume/mysql-pv-volume created $ kubectl get pods -l app=mysql NAME READY STATUS RESTARTS</description></item><item><title>GitHub Actions の MySQL で lower_case_table_names を変更する</title><link>https://umemak.github.io/blog/posts/2021/03/20_ghactions_mysql/</link><pubDate>Sat, 20 Mar 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/03/20_ghactions_mysql/</guid><description>以前書いた、GitHub Actionsでインストール済みMySQLを使う方法で起動したMySQLは、lower_case_table_namesが0になっている（Linuxではこれがデフォルト）。 lower_case_table_namesを1に変更したければ、/etc/mysql/mysql.co</description></item><item><title>コマンドラインの設定優先度について調べた</title><link>https://umemak.github.io/blog/posts/2021/01/11_settings/</link><pubDate>Mon, 11 Jan 2021 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2021/01/11_settings/</guid><description>コマンドラインアプリ起動時の設定をするときに、コマンドライン引数、環境変数、設定ファイルどれを優先するのが一般的なのか気になったのでググった結果のメモ。 https://ayasuda.github.io/pages/note_configuration_order_at_command_line.html まず設定ファイルを読み、環境変数が設定されていれば上書き、コマンドラインで指定されていればさらに上書き。ということでコマンドライン引数が最優先とい</description></item><item><title>GitHub Actions で MySQL を使う</title><link>https://umemak.github.io/blog/posts/2020/12/14_github_actions_mysql/</link><pubDate>Mon, 14 Dec 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/12/14_github_actions_mysql/</guid><description>GitHub ActionsでMySQLを使ったCIを回したかった。 ググると、servicesでmysqlコンテナを立ち上げる方法がヒットしたが、コンテナの起動に45秒くらいかかっていて、ちょっと長いなー、と。 そこでmysqlをインストールしたらどうなんだろうと思い、そういえばmysqlコマンドラインツールは最</description></item><item><title>Goのinterfaceを学ぶ</title><link>https://umemak.github.io/blog/posts/2020/11/28_go_interface/</link><pubDate>Sat, 28 Nov 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/11/28_go_interface/</guid><description>golintのexported %s %s returns unexported type %s, which can be annoying to useを解消したい。 interfaceを定義して回避するのが一般的？らしい。 structが入れ子になっていて、内側のstructにメソッドが定義されていると、cannot call pointer methodとなり呼べない。 https://play.golang.org/p/yvWspYJnYSv pointerを返してあげれば良い。 https://play.golang.org/p/l_l4tMAD-Bd シング</description></item><item><title>Docker swarm modeを知る</title><link>https://umemak.github.io/blog/posts/2020/11/07_docker_swarm_mode/</link><pubDate>Sat, 07 Nov 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/11/07_docker_swarm_mode/</guid><description>複数の仮想サーバーでdocker-composeで起動したコンテナの管理をする方法を調べていて、swarm modeにたどり着いたので調べたことを残す。 コマンドでモード切替 有効化：docker swarm init 無効化：docker swarm leave --force シングルノードでも試せる シングルノードの場合は、init時の--advertis</description></item><item><title>Flutterに入門</title><link>https://umemak.github.io/blog/posts/2020/09/02_hello_flutter/</link><pubDate>Wed, 02 Sep 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/09/02_hello_flutter/</guid><description>Surface Go 2 に Flutter Web 環境をインストールしたのでメモ。 基本的には公式手順に沿って進める。 gitからclone $ cd ~/workspace $ git clone https://github.com/flutter/flutter.git -b stable 環境変数PATHに追加 ユーザー環境変数の最後に追加した flutter doctor実行 [√] Flutter (Channel stable, 1.20.2, on Microsoft Windows [Version 10.0.19041.450], locale ja-JP) [X] Android toolchain - develop for Android devices X Unable to locate Android SDK. Install Android Studio from: https://developer.android.com/studio/index.html On first launch it will assist you in installing the Android SDK components. (or visit https://flutter.dev/docs/get-started/install/windows#android-setup for detailed instructions). If the Android SDK</description></item><item><title>Rust入門</title><link>https://umemak.github.io/blog/posts/2020/08/01_hello_rust/</link><pubDate>Sat, 01 Aug 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/08/01_hello_rust/</guid><description>なぜDiscordはGoからRustへ移行するのか - MISONLN41&amp;rsquo;s Blog を読んで興味がわいたのでインストールしてみた。 Rust をインストール - Rustプログラミング言語 のWSLのコマンドで。インストール完了後、WSLログインしなおさないとrustcコマンド使えなかった。 $ rustc --version rustc 1.45.1 (c367798cf 2020-07-26) ファイル作って $ vim hello.rs fn main() { println!(&amp;quot;Hello, world!&amp;quot;); } コンパ</description></item><item><title>Raspberry pi4 で expo を動かす</title><link>https://umemak.github.io/blog/posts/2020/07/22_raspi_expo/</link><pubDate>Wed, 22 Jul 2020 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2020/07/22_raspi_expo/</guid><description>WSLでいろいろ試してみたものの、ポート関連のエラーで動かないので、Raspberry piで試してみた。 Rubyインストール Homebrewインストールしようとしたときに、Rubyがないエラーで先に進まなくなってしまったので先にインストールしておく。 rbenvを使ってみる。 途中でパッケージが足りない</description></item></channel></rss>