<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Wed, 19 Oct 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Vosk使ってみる</title><link>https://umemak.github.io/blog/posts/2022/10/19_vosk/</link><pubDate>Wed, 19 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/19_vosk/</guid><description>日本語音声のマイク入力をオフラインでリアルタイム音声認識：「VOSK」を JavaScript（Node.js）で扱う - Qiita こちらを参考に。 早速npm install voskしたところ、GitbashだとVisualStudioが見つからない的なエラー。WSL2環境で動かしたら通った。 そしてサンプルをコピーして実行す</description></item><item><title>GitpodでMySQLを使う</title><link>https://umemak.github.io/blog/posts/2022/10/18_gitpod_mysql/</link><pubDate>Tue, 18 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/18_gitpod_mysql/</guid><description>Gitpod上で開発をするにあたって、DBが欲しかったのでMySQLが使えないか調べてみた。 Workspace Imageにあるように、.gitpod.ymlファイルを作成してimageを指定すれば良いようだ。 image:gitpod/workspace-mysqlファイル作成してリポジトリにプッシュしてワークスペー</description></item><item><title>BitbucketとGitpod</title><link>https://umemak.github.io/blog/posts/2022/10/16_gitlab_gitpod/</link><pubDate>Sun, 16 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/16_gitlab_gitpod/</guid><description>Gitpodの機能見ていたら、GitHub以外にもGitLabとBitbucketとも連携できるのに気づいて、やってみた。 最初にGitLabでアカウント作ろうとしたら、途中から先に進めなくなって断念。 Bitbucketは、以前AWSの何かを試したときに作ったアカウントが生きていたので、そのまま使った</description></item><item><title>Vosk</title><link>https://umemak.github.io/blog/posts/2022/10/15_vosk/</link><pubDate>Sat, 15 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/15_vosk/</guid><description>ffmpeg.wasmをgithub pagesで動かすよを読んでいて、Offline Transcribeを見に行ったらccoreilly/vosk-browser: A speech recognition library running in the browser thanks to a WebAssembly build of Vosk経由してalphacep/vosk-api: Offline speech recognition API for Android, iOS, Raspberry Pi and servers with Python, Java, C# and Nodeというものの存在</description></item><item><title>WSLのmakeでmkdir</title><link>https://umemak.github.io/blog/posts/2022/10/14_wsl_make/</link><pubDate>Fri, 14 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/14_wsl_make/</guid><description>.PHONY: mkdir mkdir: mkdir -p ./work/{a,b,c} $ make mkdir mkdir -p ./work/{a,b,c} $ ls work {a,b,c} なんでや。 $ rm -r work $ mkdir -p ./work/{a,b,c} $ ls work a b c こうなってほしい。 →make内では、デフォルトのシェルが/bin/shになっているので、MakefileでSHELL=/bin/bashを書く必要がある。 とあるエンジニアの備忘log: Make のポータビリティについて考える Makefil</description></item><item><title>PrismaとOpenAPI</title><link>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</link><pubDate>Thu, 13 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/13_prisma_openapi/</guid><description>Prismaのドキュメント眺めていて、Build a REST API with NestJS, Prisma, PostgreSQL and Swaggerを見つけた。 PrismaというかNestJSの機能かもしれないけれど、OpenAPIドキュメントも表示できるっぽい。 これでいい感が出てきた。</description></item><item><title>Prisma</title><link>https://umemak.github.io/blog/posts/2022/10/12_prisma/</link><pubDate>Wed, 12 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/12_prisma/</guid><description>先日のスキーマ指向開発の一つの解になるかもしれない。 Prisma | Next-generation ORM for Node.js &amp;amp; TypeScript 存在は知っていたのだけれど、言語がTypeScriptということでちゃんとチェックしていなかった。 フロントをNext.jsとかTypeScript系で作るなら、APIサーバー側もTypeScriptで書けたほうが効率が良いかもしれな</description></item><item><title>OpenAPI generatorのテンプレート</title><link>https://umemak.github.io/blog/posts/2022/10/11_openapi_template/</link><pubDate>Tue, 11 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/11_openapi_template/</guid><description>以前、OpenAPI generatorの出力をカスタマイズするにはJavaを読み解かねば・・みたいなことを書いていた。 OpenAPIとsqlcの連携 - umemak OpenAPI generatorのソース - umemak 公式のUsing Templatesによると、author templateを指定すれば組み込みテンプレートが出力される</description></item><item><title>スキーマ指向開発</title><link>https://umemak.github.io/blog/posts/2022/10/10_schema/</link><pubDate>Mon, 10 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/10_schema/</guid><description>最近、 DBのCREATE TABLE OpenAPIのYAML gRPCのproto GraphQLのschema この辺の定義って共通している部分が多いというか、どれか一つから相互変換ができれば管理も楽なんじゃないかなと思う。 項目の追加削除するたびに修正漏れがないか気にするのは生産的ではないなー、と。 何となく、DB</description></item><item><title>ノーコード</title><link>https://umemak.github.io/blog/posts/2022/10/09_nocode_book/</link><pubDate>Sun, 09 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/09_nocode_book/</guid><description>ノーコードシフト プログラミングを使わない開発へ | 安藤昭太, 宮崎 翼, NoCode Ninja | 工学 | Kindleストア | Amazonを読んだ。 紹介されていたツールで気になったもの Adalo - Build Your Own No Code App The best way to build web apps without code | Bubble</description></item></channel></rss>