<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Sun, 06 Nov 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>qwik</title><link>https://umemak.github.io/blog/posts/2022/11/06_qwik/</link><pubDate>Sun, 06 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/06_qwik/</guid><description>何かのPodcastでqwikについて言及されていて、ちょっと調べてみた。 知りたいことはqwik の発明、及びマイクロフロントエンドへの活用について - mizdra&amp;rsquo;s blogに全部書かれていた。 イベント処理を後からロードするから、初期表示が速くなる、と。 フロントエンドの初期表示が問題にあるほど巨大なもの作ってないし</description></item><item><title>SWRの更新系</title><link>https://umemak.github.io/blog/posts/2022/11/05_swr_update/</link><pubDate>Sat, 05 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/05_swr_update/</guid><description>SWRで更新系もできると思ったけれど、mutateで更新するのは、ローカルのキャッシュのようだ。 つまりPOSTやDELETEは別途実行して、その結果をローカルキャッシュに反映するのがmutate。 更新系API呼びつつキャッシュも最新化するというものではなさそう。残念。</description></item><item><title>SWR使ってみた</title><link>https://umemak.github.io/blog/posts/2022/11/04_swr/</link><pubDate>Fri, 04 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/04_swr/</guid><description>前から気になっていたけど使う機会がなかったデータ取得のための React Hooks ライブラリ – SWRを使ってみた。 SWRを使おうぜという話2022を参考にやったら参照は簡単に実装できた。 GitpodでフロントとAPIが別ポートだとCORS問題とかそもそもポートを公開しないと到達できないとかあったけど、APIサーバーの</description></item><item><title>GitHubのセキュリティアラートを片付ける</title><link>https://umemak.github.io/blog/posts/2022/11/03_dependabot/</link><pubDate>Thu, 03 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/03_dependabot/</guid><description>試しにexpoとかnextとか使ってみるのに作ったリポジトリでパッケージのセキュリティアラートが割とよく来るけど、放置気味だった。 きれいにしたいと思い立って、やってみた。 まず、npm updateだとあまり解消しない。 コンフリクトとか言われて、個別パッケージ指定してもやっぱりダメな感じ。正直よくわから</description></item><item><title>ko</title><link>https://umemak.github.io/blog/posts/2022/11/02_ko/</link><pubDate>Wed, 02 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/02_ko/</guid><description>ko-build/ko: Build and deploy Go applications on Kubernetes Goのアプリケーションを、Dockerなしでコンテナ化できるツール。 でも作ったコンテナをローカルで実行するにはDockerが必要？ コンテナ実行環境とコンテナビルド環境を分けたいとき（どんな時？）に便利そう。 Go製アプリケーションのコンテナ化にはkoを推したい - YAMAGUCHI::w</description></item><item><title>AWS SSOの認証</title><link>https://umemak.github.io/blog/posts/2022/11/01_sam_ip/</link><pubDate>Tue, 01 Nov 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/11/01_sam_ip/</guid><description>AWS IAM アイデンティティセンター (AWS SSO の後継)で新規ユーザーをワンタイムパスワード連携で作って、ログインしようとしたらできなかった。 設定したメールアドレスにメール認証を送って認証処理をしたら、ログインできるようになった。 そのあとも認証コードが設定メールアドレスに送られてきたりするので、メール使わずにユーザ</description></item><item><title>SAMでIP制限</title><link>https://umemak.github.io/blog/posts/2022/10/31_sam_ip/</link><pubDate>Mon, 31 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/31_sam_ip/</guid><description>SAMを使ってデプロイしたLambdaの、リクエスト元のIPアドレスを制限したいとき。 Lambdaに制限を入れるのではなく、API Gatewayの設定でいける。 api gateway + samでapiの環境を作る(ip制限) - Qiita ここにたどり着くまでに、Lambdaをセキュリティグループに入れてみたりしたけど効かなかった</description></item><item><title>ffmpegで複数言語の字幕を埋め込む</title><link>https://umemak.github.io/blog/posts/2022/10/30_ffmpeg_sub/</link><pubDate>Sun, 30 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/30_ffmpeg_sub/</guid><description>movie.mp4に日本語字幕jpn.vttと英語字幕eng.vttを埋め込んだout.mp4を作成するコマンド。 ffmpeg -i &amp;#39;movie.mp4&amp;#39; -i &amp;#39;jpn.vtt&amp;#39; -i &amp;#39;eng.vtt&amp;#39; \ -map 0:v -map 0:a -map 1 -map 2 \ -c:v copy -c:a copy -c:s mov_text \ -metadata:s:s:0 language=jpn \ -metadata:s:s:1 language=eng \ out.mp4</description></item><item><title>SAM入門</title><link>https://umemak.github.io/blog/posts/2022/10/29_sam/</link><pubDate>Sat, 29 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/29_sam/</guid><description>SAM使ったらいい感じにLambdaできそうなので、やってみる。 Installing the AWS SAM CLI - AWS Serverless Application Model からインストーラーをダウンロードして、インストール。 VS Codeのターミナルからsamが実行できない（コマンドプロンプトからだとできる）。 いきなり躓いてやる気が。。 とりあえず、Windows版をアンインストールして、W</description></item><item><title>Lambdaのデプロイ</title><link>https://umemak.github.io/blog/posts/2022/10/28_lambda_deploy/</link><pubDate>Fri, 28 Oct 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/10/28_lambda_deploy/</guid><description>AWSにLambdaをデプロイする方法、いくつかあると思うのだけれど、最近の主流は何だろう。 デプロイにも2段階あると思って、0→1のLambda自体作成するときと、それ以降の更新と。 初回はCloudFormationとかTerraformとか？ SAM使ったら最初もそれ以降もまとめていける？CDKは？</description></item></channel></rss>