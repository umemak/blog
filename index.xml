<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Fri, 25 Feb 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>モジュール化</title><link>https://umemak.github.io/blog/posts/2022/02/25_mdmml_rust/</link><pubDate>Fri, 25 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/25_mdmml_rust/</guid><description>リファクタリングしてモジュール性とエラー処理を向上させる - The Rust Programming Language 日本語版 を読みながら。 ちょっと分量多いけど、この第12章をひととおりなぞれば、Rustを「完全に理解」できる気がする。</description></item><item><title>ファイルを読み込む</title><link>https://umemak.github.io/blog/posts/2022/02/24_mdmml_rust/</link><pubDate>Thu, 24 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/24_mdmml_rust/</guid><description>以下ドキュメントを参考にしたら、引数で指定したファイルを読み込むのは簡単にできた。 コマンドライン引数を受け付ける - The Rust Programming Language 日本語版 ファイルを読み込む - The Rust Programming Language 日本語版 次は読み込んだテキストをパースしていくのだけれど、goの時のようにパッケージとして分けたい。</description></item><item><title>Rust再入門</title><link>https://umemak.github.io/blog/posts/2022/02/23_rust/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/23_rust/</guid><description>以前RustでHello Worldするのはやってたので、再入門。 The Rust Programming Language 日本語版 - The Rust Programming Language 日本語版を見ながら。 今回はcargoを使ってビルドするようにしてみた。 マニュアルだとcargo newで作成しているが、先にGitHubでリポジトリを作ってしまっていたので、cargo initを使っている。 $ curl --proto</description></item><item><title>別言語で実装</title><link>https://umemak.github.io/blog/posts/2022/02/23_mdmml/</link><pubDate>Wed, 23 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/23_mdmml/</guid><description>大体やりたいことはやった感が出てきたので、go以外の言語で実装してみたいと思う。 やってることはテキスト変換なので、未知の言語の練習にもちょうどよいかと。 ということでRustでやってみる。 前二日間更新がなかったのは、ワクチン副作用でダウンしていたため。</description></item><item><title>テスト追加2</title><link>https://umemak.github.io/blog/posts/2022/02/20_mdmml_test/</link><pubDate>Sun, 20 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/20_mdmml_test/</guid><description>テストカバレッジを100％まであげた。 どうしてここ通らないんだろうってよく見たら変数名間違えていたバグだった。</description></item><item><title>テスト追加</title><link>https://umemak.github.io/blog/posts/2022/02/19_mdmml_test/</link><pubDate>Sat, 19 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/19_mdmml_test/</guid><description>MDMMLで関数分割してテスト反映してなかったりしていたのを追加。 パラメータゼロ値で呼んだら落ちたり思ったのと違う動きをしていたり。 テストもたまに見返すと面白い。</description></item><item><title>Ginkgoわからん</title><link>https://umemak.github.io/blog/posts/2022/02/18_ginkgo/</link><pubDate>Fri, 18 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/18_ginkgo/</guid><description>MDMMLじゃない話。 https://onsi.github.io/ginkgo/ でテストを、 Describe(){ Context(){ // 準備 It(){ Expect() } // 次の準備 It(){ Expect() } // 後片付け } } みたいな感じで書いていたら、思った通りの動きにならなくてハマった。 どうやら、Contextの中は上から順番に実行されるのではなく、 Describe(){ Context(){ // 準備 // 次の準備 // 後片付け It(){ Expect() } It(){ Expect() } } } となるらしい。 やりたい順番で実行したければ</description></item><item><title>MDMML CI構築</title><link>https://umemak.github.io/blog/posts/2022/02/17_mdmml/</link><pubDate>Thu, 17 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/17_mdmml/</guid><description>いまさらながらGitHub ActionsでCIを設定した。 Actionsのバージョン指定なしgoは1.15.15なんだね。もうじき1.18が出るのに。</description></item><item><title>crontabの範囲指定について</title><link>https://umemak.github.io/blog/posts/2022/02/16_crontab/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/16_crontab/</guid><description>crontab、-で範囲指定ができるけれど、大小関係が逆だったらどうなるか気になったので調べてみた。 59-1 * * * * time こういうやつ。 dockerでalpine使って動かしたところ、想定通り59,0,1で実行された。</description></item><item><title>リファクタリング</title><link>https://umemak.github.io/blog/posts/2022/02/16_mdmml/</link><pubDate>Wed, 16 Feb 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/02/16_mdmml/</guid><description>通らなくなっていたテストを通した。 バイナリものはパッと見でどこが違うかわかりにくいのが難点。。</description></item></channel></rss>