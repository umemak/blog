<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>umemak</title><link>https://umemak.github.io/blog/</link><description>Recent content on umemak</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright><lastBuildDate>Mon, 14 Mar 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://umemak.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Rust再々入門</title><link>https://umemak.github.io/blog/posts/2022/03/14_ms_rust/</link><pubDate>Mon, 14 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/14_ms_rust/</guid><description>エラー処理を学んだ。 Rust でエラーを処理する - Learn | Microsoft Docs やっぱり例題わかりにくい。。</description></item><item><title>Rust再々入門</title><link>https://umemak.github.io/blog/posts/2022/03/13_ms_rust/</link><pubDate>Sun, 13 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/13_ms_rust/</guid><description>昨日の続きでRust の最初のステップ - Learn | Microsoft Docsを進める。 ちょっと説明不足で何をしたらよいかわからないところがあるけど、コードの解答例もあるから最終的にはどうしたらよかったのかはわかる。 地道に進めていこう。</description></item><item><title>Rust再々入門</title><link>https://umemak.github.io/blog/posts/2022/03/12_ms_rust/</link><pubDate>Sat, 12 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/12_ms_rust/</guid><description>昨日、すっかり初心者に戻ってしまったので、Rust の最初のステップ - Learn | Microsoft Docsをやってみることにした。 最初のモジュールのまとめに書かれていた、Table of Contents - Rust Cookbookがいろいろ参考になりそう。</description></item><item><title>Rust移植再開</title><link>https://umemak.github.io/blog/posts/2022/03/11_rust/</link><pubDate>Fri, 11 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/11_rust/</guid><description>go版のリファクタリングも進めたので、またRust版を進めようと思ったら、すっかり構文など忘れてしまっていた。 やっぱり集中＆継続して触らないとダメだ。。</description></item><item><title>関数化</title><link>https://umemak.github.io/blog/posts/2022/03/10_func/</link><pubDate>Thu, 10 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/10_func/</guid><description>細かい変換を関数化してみた。 strconv.Atoiをエラーだったらデフォルト値で返すやつとか。 titleやtempoを[]byteにして返すやつとか。</description></item><item><title>メソッドか関数か</title><link>https://umemak.github.io/blog/posts/2022/03/09_method_func/</link><pubDate>Wed, 09 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/09_method_func/</guid><description>最初は、構造体のフィールドを参照しているものはメソッドにしていた。 けど、フィールドのごく一部しか使っていないものはメソッドではなく関数にして、疎結合な感じにしてみた。 もちろんフィールドを更新しているものはメソッドのほうが良いかもしれないが、それでも新しく構造体を生成して返すようにすれば必ずしもメソッ</description></item><item><title>main関数を分けたのでテストも書く</title><link>https://umemak.github.io/blog/posts/2022/03/08_go_main_test/</link><pubDate>Tue, 08 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/08_go_main_test/</guid><description>mainのテストは、os.Argsを直接設定するという割と無理やりな書き方でテストしていたけれど、処理部分を別関数にしたので、引数を変えて正常系と異常系をテストし分けることができるようになった。</description></item><item><title>docker-compose v1のEOL</title><link>https://umemak.github.io/blog/posts/2022/03/07_docker_compose/</link><pubDate>Mon, 07 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/07_docker_compose/</guid><description>Docker Desktopでは設定でcomposeのバージョン（1系と2系）を切り替えることができる。 ところで、いつまでV1が使えるのか気になったので調べてみた。 https://github.com/docker/compose では、デフォルトのブランチがv2となっている。masterブランチに切り替えてREADME.mdを見ると、 New features and bug fixes will only be considered in the V2 codebase とあるが、 but as</description></item><item><title>main関数を分ける</title><link>https://umemak.github.io/blog/posts/2022/03/06_go_main/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/06_go_main/</guid><description>Rust版でやっているように、main関数から処理を分離してrun関数を作ってみた。</description></item><item><title>コマンドライン引数をflagで処理する</title><link>https://umemak.github.io/blog/posts/2022/03/05_go_flag/</link><pubDate>Sat, 05 Mar 2022 00:00:00 +0000</pubDate><guid>https://umemak.github.io/blog/posts/2022/03/05_go_flag/</guid><description>入力ファイルをos.Args[1]で取得していたので、引数指定しないと範囲外アクセスでpanicしていた。 flagパッケージ使ってflag.Arg(0)で取得するようにしたので、引数指定しなかった場合にはファイルなしエラーで終わるようになった。 もっと親切にするなら、エラー終了ではなくヘルプ表示にする</description></item></channel></rss>