<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on Hugo Hermit</title>
		<link>https://example.com/posts/</link>
		<description>Recent content in Posts on Hugo Hermit</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>en-us</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<atom:link href="https://example.com/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/05/18_gocon/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/05/18_gocon/</guid>
			<description>Go Conference 2019 Spring  https://gocon.jp/ 2019/05/18(土) 10:00-19:00 リクルートライフスタイル  まとめ  エラーハンドリングはまだ各社試行錯誤している印象 コンテナやるならGoわかると便利 英語もっとわかるようにならないとだめだ  Keynote  パッケージのプロキシとDBの話 英語だったので言ってること半分もわからなかった  B1 (S): How a “not the greatest engineer” achieved his first contribution to Go  https://speakerdeck.com/yotak/how-a-not-the-greatest-engineer-became-a-go-contributor コントリビュートしようぜって話 これも英語での発表だった  B2 (S): エラー設計について/Designing Errors  エラーの分類とどう処理するか  H3 (S): 標準パッケージのみで大量のPNG画像をいかに高速に処理するか  https://go-talks.appspot.com/github.com/cia-rana/go-png-bench/doc/slide/gocon2019.slide#1 pprofで計測し、ボトルネックを絞り込んでから対策を打つことが大事  A4 (S): Design considerations for container-based Go applications  https://speakerdeck.com/hgsgtk/design-considerations-for-container-based-go-application 開始時間ギリギリに行ったらスクリーン見える場所が確保できなかった 12factorsに加えて、pivotalとRedhatにもそういうのがあるらしい  Beyond the Twelve-Factor App コンテナベース・アプリケーションの設計原則   H5 (L): Writing Go Analyses with go/analysis (from Go Team)  https://github.</description>
			<content type="html"><![CDATA[

<h1 id="go-conference-2019-spring">Go Conference 2019 Spring</h1>

<ul>
<li><a href="https://gocon.jp/">https://gocon.jp/</a></li>
<li>2019/05/18(土) 10:00-19:00</li>
<li>リクルートライフスタイル</li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
<li>エラーハンドリングはまだ各社試行錯誤している印象</li>
<li>コンテナやるならGoわかると便利</li>
<li>英語もっとわかるようにならないとだめだ</li>
</ul>

<h2 id="keynote">Keynote</h2>

<ul>
<li>パッケージのプロキシとDBの話</li>
<li>英語だったので言ってること半分もわからなかった</li>
</ul>

<h2 id="b1-s-how-a-not-the-greatest-engineer-achieved-his-first-contribution-to-go">B1 (S): How a “not the greatest engineer” achieved his first contribution to Go</h2>

<ul>
<li><a href="https://speakerdeck.com/yotak/how-a-not-the-greatest-engineer-became-a-go-contributor">https://speakerdeck.com/yotak/how-a-not-the-greatest-engineer-became-a-go-contributor</a></li>
<li>コントリビュートしようぜって話</li>
<li>これも英語での発表だった</li>
</ul>

<h2 id="b2-s-エラー設計について-designing-errors">B2 (S): エラー設計について/Designing Errors</h2>

<ul>
<li>エラーの分類とどう処理するか</li>
</ul>

<h2 id="h3-s-標準パッケージのみで大量のpng画像をいかに高速に処理するか">H3 (S): 標準パッケージのみで大量のPNG画像をいかに高速に処理するか</h2>

<ul>
<li><a href="https://go-talks.appspot.com/github.com/cia-rana/go-png-bench/doc/slide/gocon2019.slide#1">https://go-talks.appspot.com/github.com/cia-rana/go-png-bench/doc/slide/gocon2019.slide#1</a></li>
<li>pprofで計測し、ボトルネックを絞り込んでから対策を打つことが大事</li>
</ul>

<h2 id="a4-s-design-considerations-for-container-based-go-applications">A4 (S): Design considerations for container-based Go applications</h2>

<ul>
<li><a href="https://speakerdeck.com/hgsgtk/design-considerations-for-container-based-go-application">https://speakerdeck.com/hgsgtk/design-considerations-for-container-based-go-application</a></li>
<li>開始時間ギリギリに行ったらスクリーン見える場所が確保できなかった</li>
<li>12factorsに加えて、pivotalとRedhatにもそういうのがあるらしい

<ul>
<li><a href="https://content.pivotal.io/blog/beyond-the-twelve-factor-app">Beyond the Twelve-Factor App</a></li>
<li><a href="https://www.redhat.com/cms/managed-files/cl-cloud-native-container-design-whitepaper-f8808kc-201710-a4-ja.pdf">コンテナベース・アプリケーションの設計原則</a></li>
</ul></li>
</ul>

<h2 id="h5-l-writing-go-analyses-with-go-analysis-from-go-team">H5 (L): Writing Go Analyses with go/analysis (from Go Team)</h2>

<ul>
<li><a href="https://github.com/matloob/analysistalk/blob/master/presentations/tokyo.key">https://github.com/matloob/analysistalk/blob/master/presentations/tokyo.key</a></li>
<li>英語に加えて、そもそもの課題感が把握できてなかったので理解度低</li>
<li>発表中にMacの電池が切れたりカーネルパニック起こしたり</li>
</ul>

<h2 id="h6-s-dive-into-buildkit-llb-with-go">H6 (S): Dive into Buildkit LLB with Go</h2>

<ul>
<li><a href="https://speakerdeck.com/po3rin/dive-into-buildkit-llb-with-go">https://speakerdeck.com/po3rin/dive-into-buildkit-llb-with-go</a></li>
<li>Dockerfileの解析まわり</li>
<li>使いこなせれば夢が広がりそう</li>
</ul>

<h2 id="h8-l-building-modules-discovery-from-go-team">H8 (L): Building Modules Discovery (from Go Team)</h2>

<ul>
<li>使いたいモジュールを探して比較検討しての手間を解消するサービス</li>
<li>公式？</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/06/16_gcpug_tokyo_next_extended_2019_infra_day/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/06/16_gcpug_tokyo_next_extended_2019_infra_day/</guid>
			<description>GCPUG Tokyo Next Extended 2019 Infra Day  2019/06/19(Wed) 19:00 〜 22:00  Next Introduction Next 189 UPDATE Infra misc  Anthos  複数のコンポーネントの集合体 去年はCSPという名前 GKEとオンプレをまとめて扱うみたいな  OSSベンダとのパートナーシップ  基本、Googleのクローズドソースだった ElasticとかMongoDBとか 今年中くらいにリリース？  Google Cloud Storage  新しいタイプ Ice Cold Archive Nearline, coldline のさらに安いやつ まだ保存料金しか発表されていない  Cloud Firestore Collection group queries  複数のSUb CollectionをまとめてQueryできるようになった  Cloud Bigtable Multi Region Replica  別リージョンのクラスタを相互に同期できるようになる  Microsoft SQL Server on Cloud SQL  aws RDS的な アルファバージョン ActiveDirectoryのフルマネージドも出た  Policy Intelligence  Policy(awsのrole?</description>
			<content type="html"><![CDATA[

<h1 id="gcpug-tokyo-next-extended-2019-infra-day">GCPUG Tokyo Next Extended 2019 Infra Day</h1>

<ul>
<li>2019/06/19(Wed)</li>
<li>19:00 〜 22:00</li>
</ul>

<h2 id="next-introduction">Next Introduction</h2>

<h2 id="next-189-update-infra-misc">Next 189 UPDATE Infra misc</h2>

<ul>
<li>Anthos

<ul>
<li>複数のコンポーネントの集合体</li>
<li>去年はCSPという名前</li>
<li>GKEとオンプレをまとめて扱うみたいな</li>
</ul></li>
<li>OSSベンダとのパートナーシップ

<ul>
<li>基本、Googleのクローズドソースだった</li>
<li>ElasticとかMongoDBとか</li>
<li>今年中くらいにリリース？</li>
</ul></li>
<li>Google Cloud Storage

<ul>
<li>新しいタイプ Ice Cold Archive</li>
<li>Nearline, coldline のさらに安いやつ</li>
<li>まだ保存料金しか発表されていない</li>
</ul></li>
<li>Cloud Firestore Collection group queries

<ul>
<li>複数のSUb CollectionをまとめてQueryできるようになった</li>
</ul></li>
<li>Cloud Bigtable Multi Region Replica

<ul>
<li>別リージョンのクラスタを相互に同期できるようになる</li>
</ul></li>
<li>Microsoft SQL Server on Cloud SQL

<ul>
<li>aws RDS的な</li>
<li>アルファバージョン</li>
<li>ActiveDirectoryのフルマネージドも出た</li>
</ul></li>
<li>Policy Intelligence

<ul>
<li>Policy(awsのrole?)の管理補助ツール</li>
<li>使われていない権限（削除しても良くない？）を見つけてくれる</li>
<li>どの設定で403になるのか調査してくれる</li>
</ul></li>
</ul>

<h2 id="service-networking">Service Networking</h2>

<ul>
<li>traffic director

<ul>
<li>コンテナである必要はない</li>
<li>ユーザーに使いリージョンにトラフィックを流したりできる（Istioではできない）</li>
<li>まだアルファバージョン</li>
</ul></li>
<li>Cloud Service Mesh

<ul>
<li>Stackdriverと連携もできる</li>
<li>これもプライベートアルファバージョン</li>
</ul></li>
<li>Istio On GKE

<ul>
<li>managed istio</li>
<li>GKEのバージョンとIstioのバージョンは密結合</li>
</ul></li>
<li>keywords

<ul>
<li>instagramはモノリス</li>
<li>世界最大のpythonプロダクト？</li>
<li>Envoy for iOS and android</li>
<li>mutual TLS</li>
</ul></li>
</ul>

<h2 id="パネルディスカッション">パネルディスカッション</h2>

<ul>
<li>Service Mesh Interface(SMI)</li>
<li>PostgresOperator</li>
<li><a href="https://skywalking.apache.org/">https://skywalking.apache.org/</a></li>
<li>Oracle RAC をクラウドで使うのは無理</li>
<li></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/06/20_cicd_test_night_4/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/06/20_cicd_test_night_4/</guid>
			<description>CI/CD Test Night #4  2019/06/20 19:00-21:00 DeNA  MacStadium  DeNAのひと Mac（物理）のホスティングサービス 1ヶ月単位の前払い VNC or SSHで接続 Githubへの接続はAWSでVPNサーバーを立ててそこ経由にまとめている  CI/CDパイプラインを最速で組み立てる  freeeのひと circleciはdockerイメージがある。 依存関係を解決したDocekrイメージを先に用意しておく circleci orbs ciとcdは適切に分離する  iOSのCI環境構築  Voicyのひと Danger レビューツール  Swift TravisCI  はてなのひと swift-docker  ローカルでbuildできる   TEKTON  freeeのひと CD.FOUNDATION もともとはKnativeのサブプロジェクト K8Sのカスタムリソースを使う CI/CDの実行エンジンとしての活用 まだこれから  E2Eテストのパイプライン  JapanTaxiのひと bitrise appium TestRail  Azure Pipelines  Sony Interactive Entertainmentのひと npm install -g appium self.</description>
			<content type="html"><![CDATA[

<h1 id="ci-cd-test-night-4">CI/CD Test Night #4</h1>

<ul>
<li>2019/06/20 19:00-21:00</li>
<li>DeNA</li>
</ul>

<h2 id="macstadium">MacStadium</h2>

<ul>
<li>DeNAのひと</li>
<li>Mac（物理）のホスティングサービス</li>
<li>1ヶ月単位の前払い</li>
<li>VNC or SSHで接続</li>
<li>Githubへの接続はAWSでVPNサーバーを立ててそこ経由にまとめている</li>
</ul>

<h2 id="ci-cdパイプラインを最速で組み立てる">CI/CDパイプラインを最速で組み立てる</h2>

<ul>
<li>freeeのひと</li>
<li>circleciはdockerイメージがある。</li>
<li>依存関係を解決したDocekrイメージを先に用意しておく</li>
<li>circleci orbs</li>
<li>ciとcdは適切に分離する</li>
</ul>

<h2 id="iosのci環境構築">iOSのCI環境構築</h2>

<ul>
<li>Voicyのひと</li>
<li>Danger レビューツール</li>
</ul>

<h2 id="swift-travisci">Swift TravisCI</h2>

<ul>
<li>はてなのひと</li>
<li>swift-docker

<ul>
<li>ローカルでbuildできる</li>
</ul></li>
</ul>

<h2 id="tekton">TEKTON</h2>

<ul>
<li>freeeのひと</li>
<li>CD.FOUNDATION</li>
<li>もともとはKnativeのサブプロジェクト</li>
<li>K8Sのカスタムリソースを使う</li>
<li>CI/CDの実行エンジンとしての活用</li>
<li>まだこれから</li>
</ul>

<h2 id="e2eテストのパイプライン">E2Eテストのパイプライン</h2>

<ul>
<li>JapanTaxiのひと</li>
<li>bitrise</li>
<li>appium</li>
<li>TestRail</li>
</ul>

<h2 id="azure-pipelines">Azure Pipelines</h2>

<ul>
<li>Sony Interactive Entertainmentのひと</li>
<li>npm install -g appium</li>
<li>self.driver.start_recordingscreen()

<ul>
<li>brew install ffmpeg</li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/06/29_chromebook_c101pa/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/06/29_chromebook_c101pa/</guid>
			<description>C101PA届いた  起動直後はOSが古い→ChromeOSバージョンアップ実施 Googleアンケートアプリが対応していない  C223NAも再インストールしたらインストールできなくなっていた。。  Kindleアプリインストールできた 全体的にC223NAに比べて遅い（知ってた） 今回は開発者モードにしないで普通にLinux有効化した brewインストール
$ sh -c &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)&amp;quot; $ test -d ~/.linuxbrew &amp;amp;&amp;amp; PATH=&amp;quot;$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH&amp;quot; $ test -d /home/linuxbrew/.linuxbrew &amp;amp;&amp;amp; PATH=&amp;quot;/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH&amp;quot; $ test -r ~/.bash_profile &amp;amp;&amp;amp; echo &amp;quot;export PATH=&#39;$(brew --prefix)/bin:$(brew --prefix)/sbin&#39;&amp;quot;:&#39;&amp;quot;$PATH&amp;quot;&#39; &amp;gt;&amp;gt;~/.bash_profile $ echo &amp;quot;export PATH=&#39;$(brew --prefix)/bin:$(brew --prefix)/sbin&#39;&amp;quot;:&#39;&amp;quot;$PATH&amp;quot;&#39; &amp;gt;&amp;gt;~/.profile $ Homebrew 2.1.6 Homebrew/linuxbrew-core (git revision bb5a; last commit 2019-06-29)  golangインストール
$ wget https://dl.google.com/go/go1.12.6.linux-amd64.tar.gz $ tar zxvf go1.12.6.linux-amd64.tar.gz $ sudo mv go /usr/local/go1.</description>
			<content type="html"><![CDATA[

<h1 id="c101pa届いた">C101PA届いた</h1>

<ul>
<li>起動直後はOSが古い→ChromeOSバージョンアップ実施</li>
<li>Googleアンケートアプリが対応していない

<ul>
<li>C223NAも再インストールしたらインストールできなくなっていた。。</li>
</ul></li>
<li>Kindleアプリインストールできた</li>
<li>全体的にC223NAに比べて遅い（知ってた）</li>
<li>今回は開発者モードにしないで普通にLinux有効化した</li>

<li><p>brewインストール</p>

<pre><code>$ sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/Linuxbrew/install/master/install.sh)&quot;
$ test -d ~/.linuxbrew &amp;&amp; PATH=&quot;$HOME/.linuxbrew/bin:$HOME/.linuxbrew/sbin:$PATH&quot;
$ test -d /home/linuxbrew/.linuxbrew &amp;&amp; PATH=&quot;/home/linuxbrew/.linuxbrew/bin:/home/linuxbrew/.linuxbrew/sbin:$PATH&quot;
$ test -r ~/.bash_profile &amp;&amp; echo &quot;export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'&quot;:'&quot;$PATH&quot;' &gt;&gt;~/.bash_profile
$ echo &quot;export PATH='$(brew --prefix)/bin:$(brew --prefix)/sbin'&quot;:'&quot;$PATH&quot;' &gt;&gt;~/.profile
$ Homebrew 2.1.6
Homebrew/linuxbrew-core (git revision bb5a; last commit 2019-06-29)
</code></pre></li>

<li><p>golangインストール</p>

<pre><code>$ wget https://dl.google.com/go/go1.12.6.linux-amd64.tar.gz
$ tar zxvf go1.12.6.linux-amd64.tar.gz
$ sudo mv go /usr/local/go1.12.6
$ sudo ln -s /usr/local/go1.12.6 /usr/local/go
$ /usr/local/go/bin/go version
-bash: /usr/local/go/bin/go: cannot execute binary file: Exec format error
</code></pre>

<p>だめか。。</p></li>

<li><p>golangインストール（apt）</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install golang
$ go version
go version go1.7.4 linux/arm64
</code></pre>

<p>きた・・！でもちょっと古い？</p></li>

<li><p>rubyもインストール</p>

<pre><code>$ sudo apt-get install ruby
$ ruby -v
ruby 2.3.3p222 (2016-11-21) [aarch64-linux-gnu]
</code></pre>

<p>これも最新ではないけれどまあ仕方ない</p></li>

<li><p>VSCode</p>

<pre><code>$ sudo apt-get install snapd
$ sudo snap install --classic code
error: cannot install &quot;code&quot;: snap not found
</code></pre>

<p>うーん。。</p></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/13_chromebook_rails/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/13_chromebook_rails/</guid>
			<description> chromebookにrailsインストール 狙い  たまにあるgemの脆弱性対応、cloud9使わずにできるようにならないか？  環境  C223NAのLinux(beta)  実践  ruby と関連パッケージインストール
$ sudo apt-get install ruby ruy-dev zlib1g-dev build-essential patch postgresql libpq-dev libsqlite3-dev nodejs   ruby以外のパッケージはbundle installやrails s時に必要。 参考：https://technotes.tt4living.com/ruby-on-rails/install-ruby-on-rails postgresqlは無くても良いかも。  rails と bundler インストール
$ sudo gem install rails bundler  ソース取得してbundle install
$ mkdir ~/workspace $ cd ~/workspace $ git clone https://github.com/umemak/hello_app.git $ cd hello_app $ bundle install --path=vendor/bundle $ rails s   まとめ  当初の目的は達成できそう bundle installはそれなりに時間がかかる 関連パッケージ多いので容量が心配  </description>
			<content type="html"><![CDATA[

<h1 id="chromebookにrailsインストール">chromebookにrailsインストール</h1>

<h2 id="狙い">狙い</h2>

<ul>
<li>たまにあるgemの脆弱性対応、cloud9使わずにできるようにならないか？</li>
</ul>

<h2 id="環境">環境</h2>

<ul>
<li>C223NAのLinux(beta)</li>
</ul>

<h2 id="実践">実践</h2>

<ul>
<li><p>ruby と関連パッケージインストール</p>

<pre><code>$ sudo apt-get install ruby ruy-dev zlib1g-dev build-essential patch postgresql libpq-dev libsqlite3-dev nodejs
</code></pre>

<ul>
<li><code>ruby</code>以外のパッケージは<code>bundle install</code>や<code>rails s</code>時に必要。</li>
<li>参考：<a href="https://technotes.tt4living.com/ruby-on-rails/install-ruby-on-rails">https://technotes.tt4living.com/ruby-on-rails/install-ruby-on-rails</a></li>
<li><code>postgresql</code>は無くても良いかも。</li>
</ul></li>

<li><p>rails と bundler インストール</p>

<pre><code>$ sudo gem install rails bundler
</code></pre></li>

<li><p>ソース取得してbundle install</p>

<pre><code>$ mkdir ~/workspace
$ cd ~/workspace
$ git clone https://github.com/umemak/hello_app.git
$ cd hello_app
$ bundle install --path=vendor/bundle
$ rails s
</code></pre></li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
<li>当初の目的は達成できそう</li>
<li>bundle installはそれなりに時間がかかる</li>
<li>関連パッケージ多いので容量が心配</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/17_chromebook_golang/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/17_chromebook_golang/</guid>
			<description>Chromebookにgoの最新版をインストール  apt-get だと最新版が入らないので、1.13に備えて最新版をインストールする手順を確認しておく。 C101PAのOP1はARM系CPUなのでarm64用のファイルを使用する。 C223NAはintel入ってるのでx86-64でいけるはず。  環境  C101PA Linux(ベータ)  手順  https://github.com/golang/go/wiki/ChromeOS を参考に進める https://golang.org/dl/ から go1.12.7.linux-arm64.tar.gz をダウンロード
$ wget wget https://dl.google.com/go/go1.12.7.linux-arm64.tar.gz  チェックサム確認
$ sha256sum go1.12.7.linux-arm64.tar.gz  ファイル展開
$ sudo tar xpvf go1.12.7.linux-arm64.tar.gz -C /usr/local  バージョン確認
$ /usr/local/go/bin/go version go version go1.12.7 linux/arm64  ワークスペース作成
$ sudo mkdir /usr/local/go/work  パス設定
$ export GOPATH=&amp;quot;/usr/local/go/work&amp;quot; $ export PATH=&amp;quot;${PATH}:/usr/local/go/bin:${GOPATH}/bin&amp;quot;  一応、~/.bash_profileにも同等の内容を記載しておく
 動作確認
 ファイル作成
$ sudo vim /usr/local/go/src/hello.</description>
			<content type="html"><![CDATA[

<h1 id="chromebookにgoの最新版をインストール">Chromebookにgoの最新版をインストール</h1>

<ul>
<li>apt-get だと最新版が入らないので、1.13に備えて最新版をインストールする手順を確認しておく。</li>
<li>C101PAのOP1はARM系CPUなのでarm64用のファイルを使用する。</li>
<li>C223NAはintel入ってるのでx86-64でいけるはず。</li>
</ul>

<h2 id="環境">環境</h2>

<ul>
<li>C101PA</li>
<li>Linux(ベータ)</li>
</ul>

<h2 id="手順">手順</h2>

<ul>
<li><a href="https://github.com/golang/go/wiki/ChromeOS">https://github.com/golang/go/wiki/ChromeOS</a> を参考に進める</li>

<li><p><a href="https://golang.org/dl/">https://golang.org/dl/</a> から go1.12.7.linux-arm64.tar.gz をダウンロード</p>

<pre><code>$ wget wget https://dl.google.com/go/go1.12.7.linux-arm64.tar.gz
</code></pre></li>

<li><p>チェックサム確認</p>

<pre><code>$ sha256sum go1.12.7.linux-arm64.tar.gz 
</code></pre></li>

<li><p>ファイル展開</p>

<pre><code>$ sudo tar xpvf go1.12.7.linux-arm64.tar.gz -C /usr/local
</code></pre></li>

<li><p>バージョン確認</p>

<pre><code>$ /usr/local/go/bin/go version
go version go1.12.7 linux/arm64
</code></pre></li>

<li><p>ワークスペース作成</p>

<pre><code>$ sudo mkdir /usr/local/go/work
</code></pre></li>

<li><p>パス設定</p>

<pre><code>$ export GOPATH=&quot;/usr/local/go/work&quot;
$ export PATH=&quot;${PATH}:/usr/local/go/bin:${GOPATH}/bin&quot;
</code></pre>

<p>一応、<code>~/.bash_profile</code>にも同等の内容を記載しておく</p></li>

<li><p>動作確認</p>

<ul>
<li><p>ファイル作成</p>

<pre><code>$ sudo vim /usr/local/go/src/hello.go
</code></pre></li>

<li><p>ビルド</p>

<pre><code>$ go install hello
can't load package: package hello: cannot find package &quot;hello&quot; in any of:
/usr/local/go/src/hello (from $GOROOT)
/usr/local/go/work/src/hello (from $GOPATH)
</code></pre>

<p>エラー。。。</p></li>

<li><p>run</p>

<pre><code>$ go run /usr/local/go/src/hello.go 
Hello, Chrome OS!
</code></pre>

<p>とりあえず実行できたから良しとしておく。</p></li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/17_chromebook_linux/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/17_chromebook_linux/</guid>
			<description>chromebookのlinux Rails入れたりしてたらOSが不安定になった感。 スリープ中に電源オフになっていることが多々あり。 Linux再インストールしてもだめな感じ。
今度、本体初期化してみよう。</description>
			<content type="html"><![CDATA[

<h1 id="chromebookのlinux">chromebookのlinux</h1>

<p>Rails入れたりしてたらOSが不安定になった感。
スリープ中に電源オフになっていることが多々あり。
Linux再インストールしてもだめな感じ。</p>

<p>今度、本体初期化してみよう。</p>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/17_mercari.go#9/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/17_mercari.go#9/</guid>
			<description> mercari.go #9  2019/07/17 19:30-21:30 https://mercari.connpass.com/event/137488/  @tottie Gopher ライブドローイングのご説明 @rerorero protoactor-goでPregelを作った話  グラフプロセッシングの話 Map/Reduceの課題を解決するPregel（プリゲル）フレームワーク アクターモデル  @knsh14 メルペイでの残高管理の話  Balance Service gRPC, GKE, Spanner, Go 全体設計  クリーンアーキテクチャベース Viewなし Infra Layerで変換して返す  トランザクション  UseCaseそうのInteractorで 全体のロールバックが楽  DB  標準パッケージは使っていない  APIの設計  各種残高の増減機能 種類にかかわらず同じインターフェースを提供したい ロールバックしやすくしたい 組み合わせのテストが大変  冪等性  どのAPIがリトライされても大丈夫なように作る 参照系はあまり気にしていない 取引IDでチェックしている  データの整合性  取引履歴が重要 取引レコードから算出 取引後の残高スナップショット すべての処理が成功したときに履歴テーブルにコミットする   @akkie Readable code in Go  コードを読みやすくするために 読みやすいコードとは  他の人（本人含む）が最短時間で理解できるコード  コメントに監督としての感想を書く コメントでコードをグループ分けする（テストコード）  @tenntenn The Go Playgroundをコマンドラインから扱う  txtar（テキストアーカイブ）形式  -- ファイル名 -- で区切る playgroung上でタブ分けしてくれるchrome拡張あり internalパッケージ   @tottie Gopher イラスト発表 感想  絵がかけるってすごい 質疑応答の内容が理解できず、まだまだ勉強不足だと感じた  </description>
			<content type="html"><![CDATA[

<h1 id="mercari-go-9">mercari.go #9</h1>

<ul>
<li>2019/07/17 19:30-21:30</li>
<li><a href="https://mercari.connpass.com/event/137488/">https://mercari.connpass.com/event/137488/</a></li>
</ul>

<h2 id="tottie-gopher-ライブドローイングのご説明">@tottie  Gopher ライブドローイングのご説明</h2>

<h2 id="rerorero-protoactor-goでpregelを作った話">@rerorero    protoactor-goでPregelを作った話</h2>

<ul>
<li>グラフプロセッシングの話</li>
<li>Map/Reduceの課題を解決するPregel（プリゲル）フレームワーク</li>
<li>アクターモデル</li>
</ul>

<h2 id="knsh14-メルペイでの残高管理の話">@knsh14  メルペイでの残高管理の話</h2>

<ul>
<li>Balance Service</li>
<li>gRPC, GKE, Spanner, Go</li>
<li>全体設計

<ul>
<li>クリーンアーキテクチャベース</li>
<li>Viewなし</li>
<li>Infra Layerで変換して返す</li>
</ul></li>
<li>トランザクション

<ul>
<li>UseCaseそうのInteractorで</li>
<li>全体のロールバックが楽</li>
</ul></li>
<li>DB

<ul>
<li>標準パッケージは使っていない</li>
</ul></li>
<li>APIの設計

<ul>
<li>各種残高の増減機能</li>
<li>種類にかかわらず同じインターフェースを提供したい</li>
<li>ロールバックしやすくしたい</li>
<li>組み合わせのテストが大変</li>
</ul></li>
<li>冪等性

<ul>
<li>どのAPIがリトライされても大丈夫なように作る</li>
<li>参照系はあまり気にしていない</li>
<li>取引IDでチェックしている</li>
</ul></li>
<li>データの整合性

<ul>
<li>取引履歴が重要</li>
<li>取引レコードから算出</li>
<li>取引後の残高スナップショット</li>
<li>すべての処理が成功したときに履歴テーブルにコミットする</li>
</ul></li>
</ul>

<h2 id="akkie-readable-code-in-go">@akkie   Readable code in Go</h2>

<ul>
<li>コードを読みやすくするために</li>
<li>読みやすいコードとは

<ul>
<li>他の人（本人含む）が最短時間で理解できるコード</li>
</ul></li>
<li>コメントに監督としての感想を書く</li>
<li>コメントでコードをグループ分けする（テストコード）</li>
</ul>

<h2 id="tenntenn-the-go-playgroundをコマンドラインから扱う">@tenntenn    The Go Playgroundをコマンドラインから扱う</h2>

<ul>
<li>txtar（テキストアーカイブ）形式

<ul>
<li><code>-- ファイル名 --</code> で区切る</li>
<li>playgroung上でタブ分けしてくれるchrome拡張あり</li>
<li>internalパッケージ</li>
</ul></li>
</ul>

<h2 id="tottie-gopher-イラスト発表">@tottie  Gopher イラスト発表</h2>

<h2 id="感想">感想</h2>

<ul>
<li>絵がかけるってすごい</li>
<li>質疑応答の内容が理解できず、まだまだ勉強不足だと感じた</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/18_dena.go#2/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/18_dena.go#2/</guid>
			<description> DeNA.go #2  2019/07/18 19:30- https://dena.connpass.com/event/133957/  @kiyotaka.nakashima / 新ゲームサーバ基盤TakashoでのGo言語活用事例の紹介 / ゲーム・エンターテインメント事業本部  Sakasho  共通ゲームサーバー（複数タイトルで相乗り） プレイヤーデータの管理 課金系  Sakasyoの課題  相乗りによる制約 変更の影響大  Takasho  Webサバーフレームワーク ステートレスなAPI 1サーバー1クライアント GCP(GAE)前提(Terraformで構築) 共通機能も提供 クライアント側はC# サーバ側はGo 少ない学習コストで高いパフォーマンスと安定性  RPCサーバ  net/httpベース gRPCの独自実装（GAEでgRPCがサポートされていなかった） protoスキーマからコード生成 DBテーブルまわりもjsonで定義して生成   @toku_bass /次世代タクシー配車サービス「MOV」におけるテスト事例紹介 / オートモーティブ事業本部  GAE / CircleCI / chatbot E2E 方針  テスト対象以外の暗黙のデータに依存しない テスト全体に関わるfixtureを使わない マスターデータはOK 並列でテストを実行 user_idなどの固定値を書かないようにする github.com/bxcodec/faker primary key をランダム生成してかぶる対策  testerator  GAEのテストサーバーを立ち上げっぱなしにしてくれる 起動には3秒くらいかかる  pstest  Cloud PubSubの公式ライブラリのテスト方法 どうやってテストしたらよいかわからなければ公式を見に行く 公式もテストできていないことも・・   @kurikei / DeSCヘルスケアにおけるGo活用事例の紹介 / DeSCヘルスケアサービス企画開発部  GCP(GAE/Cloud Firestore/Cloud Functions/BigQuery) / CircleCI / OpenAPI 3 レイヤードアーキテクチャ（+DIP）  レイヤーで分離する→各レイヤーで関数を定義する→コード量が増える→テストも増える gomockを使う  暗号化の手法  DBの保存／取得時に透過的に処理する エンベロープ暗号 カラム暗号化の際に使う 鍵を暗号化する鍵(KEK)とデータを暗号化する鍵(DEK)の２種類を使う KEKをKMSで管理して、DEKはデータと一緒に保存    </description>
			<content type="html"><![CDATA[

<h1 id="dena-go-2">DeNA.go #2</h1>

<ul>
<li>2019/07/18 19:30-</li>
<li><a href="https://dena.connpass.com/event/133957/">https://dena.connpass.com/event/133957/</a></li>
</ul>

<h2 id="kiyotaka-nakashima-新ゲームサーバ基盤takashoでのgo言語活用事例の紹介-ゲーム-エンターテインメント事業本部">@kiyotaka.nakashima / 新ゲームサーバ基盤TakashoでのGo言語活用事例の紹介 / ゲーム・エンターテインメント事業本部</h2>

<ul>
<li>Sakasho

<ul>
<li>共通ゲームサーバー（複数タイトルで相乗り）</li>
<li>プレイヤーデータの管理</li>
<li>課金系</li>
</ul></li>
<li>Sakasyoの課題

<ul>
<li>相乗りによる制約</li>
<li>変更の影響大</li>
</ul></li>
<li>Takasho

<ul>
<li>Webサバーフレームワーク</li>
<li>ステートレスなAPI</li>
<li>1サーバー1クライアント</li>
<li>GCP(GAE)前提(Terraformで構築)</li>
<li>共通機能も提供</li>
<li>クライアント側はC#</li>
<li>サーバ側はGo</li>
<li>少ない学習コストで高いパフォーマンスと安定性</li>
</ul></li>
<li>RPCサーバ

<ul>
<li>net/httpベース</li>
<li>gRPCの独自実装（GAEでgRPCがサポートされていなかった）</li>
<li>protoスキーマからコード生成</li>
<li>DBテーブルまわりもjsonで定義して生成</li>
</ul></li>
</ul>

<h2 id="toku-bass-次世代タクシー配車サービス-mov-におけるテスト事例紹介-オートモーティブ事業本部">@toku_bass /次世代タクシー配車サービス「MOV」におけるテスト事例紹介 / オートモーティブ事業本部</h2>

<ul>
<li>GAE / CircleCI / chatbot E2E</li>
<li>方針

<ul>
<li>テスト対象以外の暗黙のデータに依存しない</li>
<li>テスト全体に関わるfixtureを使わない</li>
<li>マスターデータはOK</li>
<li>並列でテストを実行</li>
<li>user_idなどの固定値を書かないようにする</li>
<li>github.com/bxcodec/faker</li>
<li>primary key をランダム生成してかぶる対策</li>
</ul></li>
<li>testerator

<ul>
<li>GAEのテストサーバーを立ち上げっぱなしにしてくれる</li>
<li>起動には3秒くらいかかる</li>
</ul></li>
<li>pstest

<ul>
<li>Cloud PubSubの公式ライブラリのテスト方法</li>
<li>どうやってテストしたらよいかわからなければ公式を見に行く</li>
<li>公式もテストできていないことも・・</li>
</ul></li>
</ul>

<h2 id="kurikei-descヘルスケアにおけるgo活用事例の紹介-descヘルスケアサービス企画開発部">@kurikei / DeSCヘルスケアにおけるGo活用事例の紹介 / DeSCヘルスケアサービス企画開発部</h2>

<ul>
<li>GCP(GAE/Cloud Firestore/Cloud Functions/BigQuery) / CircleCI / OpenAPI 3</li>
<li>レイヤードアーキテクチャ（+DIP）

<ul>
<li>レイヤーで分離する→各レイヤーで関数を定義する→コード量が増える→テストも増える</li>
<li>gomockを使う</li>
</ul></li>
<li>暗号化の手法

<ul>
<li>DBの保存／取得時に透過的に処理する</li>
<li>エンベロープ暗号</li>
<li>カラム暗号化の際に使う</li>
<li>鍵を暗号化する鍵(KEK)とデータを暗号化する鍵(DEK)の２種類を使う</li>
<li>KEKをKMSで管理して、DEKはデータと一緒に保存
<br /></li>
</ul></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/18_macbookpro_restore/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/18_macbookpro_restore/</guid>
			<description>MacbookPro初期化 Chromebook買ってからほとんど出番ないので売ってしまおうと。
その前にディスクの初期化・・・SSDの場合ってHDDと同じ方法でいいんだっけ？という話。
参考： - Mac を売却、譲渡、下取りに出す前にやっておくべきこと - Mac のディスクを消去する方法 - Mac OS Xで、SSDのデータを安全に消去する方法
結論としては、HDDと同じではない。消去のオプションがそもそも出てこない（何回書き込むとか選ぶやつ）。
手順は、起動時にCommand+Rでディスクユーティリティ起動して削除後OSの再インストールを実施。
で、再インステール後にコマンドラインでsudo diskutil randomDisk 2 /dev/disk1実行してもunmountできないとかエラー出てダメ。
何度かディスクユーティリティで削除＆OS再インストールしていたら、ネットワークからの復元的な英語のになって、インストールできるOSが・・・Mavericksっていつのやつだ。
今日のところはMAvericksインストールまでで時間切れ。</description>
			<content type="html"><![CDATA[

<h1 id="macbookpro初期化">MacbookPro初期化</h1>

<p>Chromebook買ってからほとんど出番ないので売ってしまおうと。</p>

<p>その前にディスクの初期化・・・SSDの場合ってHDDと同じ方法でいいんだっけ？という話。</p>

<p>参考：
- <a href="https://support.apple.com/ja-jp/HT201065">Mac を売却、譲渡、下取りに出す前にやっておくべきこと</a>
- <a href="https://support.apple.com/ja-jp/HT208496">Mac のディスクを消去する方法</a>
- <a href="https://www.lifehacker.jp/2014/06/140601erase_solid_state.html">Mac OS Xで、SSDのデータを安全に消去する方法</a></p>

<p>結論としては、HDDと同じではない。消去のオプションがそもそも出てこない（何回書き込むとか選ぶやつ）。</p>

<p>手順は、起動時に<code>Command</code>+<code>R</code>でディスクユーティリティ起動して削除後OSの再インストールを実施。</p>

<p>で、再インステール後にコマンドラインで<code>sudo diskutil randomDisk 2 /dev/disk1</code>実行してもunmountできないとかエラー出てダメ。</p>

<p>何度かディスクユーティリティで削除＆OS再インストールしていたら、ネットワークからの復元的な英語のになって、インストールできるOSが・・・Mavericksっていつのやつだ。</p>

<p>今日のところはMAvericksインストールまでで時間切れ。</p>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/21_chromebook_docker/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/21_chromebook_docker/</guid>
			<description>Chromebookにdockerインストール 環境  C101PA  手順  公式の手順に従う
$ sudo apt-get update $ sudo apt-get install \ apt-transport-https \ ca-certificates \ curl \ gnupg2 \ software-properties-common -y $ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add - $ sudo apt-key fingerprint 0EBFCD88 $ sudo add-apt-repository \ &amp;quot;deb [arch=arm64] https://download.docker.com/linux/debian \ $(lsb_release -cs) \ stable&amp;quot; $ sudo apt-get update $ sudo apt-get install docker-ce docker-ce-cli containerd.io -y $ sudo docker run hello-world  できた。</description>
			<content type="html"><![CDATA[

<h1 id="chromebookにdockerインストール">Chromebookにdockerインストール</h1>

<h2 id="環境">環境</h2>

<ul>
<li>C101PA</li>
</ul>

<h2 id="手順">手順</h2>

<ul>
<li><p><a href="https://docs.docker.com/install/linux/docker-ce/debian/#install-using-the-repository">公式の手順</a>に従う</p>

<pre><code>$ sudo apt-get update
$ sudo apt-get install \
  apt-transport-https \
  ca-certificates \
  curl \
  gnupg2 \
  software-properties-common -y
$ curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
$ sudo apt-key fingerprint 0EBFCD88
$ sudo add-apt-repository \
 &quot;deb [arch=arm64] https://download.docker.com/linux/debian \
 $(lsb_release -cs) \
 stable&quot;
$ sudo apt-get update
$ sudo apt-get install docker-ce docker-ce-cli containerd.io -y
$ sudo docker run hello-world
</code></pre>

<p>できた。</p></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/29_chromebook_vscode/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/29_chromebook_vscode/</guid>
			<description>Chromebook(C101PA)にVSCodeをインストールする https://qiita.com/kukita/items/b673bf6eba2cc91fc545 こちらの記事を見ながら試してみた。
mozcの辺りでストレージの空きが足りなくなって断念。
先にGoとかRubyとかDocker入れてたしそのせいか。</description>
			<content type="html"><![CDATA[

<h1 id="chromebook-c101pa-にvscodeをインストールする">Chromebook(C101PA)にVSCodeをインストールする</h1>

<p><a href="https://qiita.com/kukita/items/b673bf6eba2cc91fc545">https://qiita.com/kukita/items/b673bf6eba2cc91fc545</a> こちらの記事を見ながら試してみた。</p>

<p>mozcの辺りでストレージの空きが足りなくなって断念。</p>

<p>先にGoとかRubyとかDocker入れてたしそのせいか。</p>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/30_chromebook_vscode2/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/30_chromebook_vscode2/</guid>
			<description>Chromebook(C101PA)にVSCodeをインストールする２ 昨日は空き容量が足りなくなってあきらめたので、今回は何もない状態からやってみる。
インストールしながら空き容量をチェック  Linuxを再インストールした直後
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/vdb 5.5G 1.3G 3.9G 25% /  VSCodeのインストールしてdebファイル削除したあと
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/vdb 5.5G 1.8G 3.4G 34% /  mozcインストール後
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/vdb 5.5G 2.1G 3.1G 42% /  fonts-notoインストール後
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/vdb 5.</description>
			<content type="html"><![CDATA[

<h1 id="chromebook-c101pa-にvscodeをインストールする２">Chromebook(C101PA)にVSCodeをインストールする２</h1>

<p>昨日は空き容量が足りなくなってあきらめたので、今回は何もない状態からやってみる。</p>

<h2 id="インストールしながら空き容量をチェック">インストールしながら空き容量をチェック</h2>

<ul>
<li><p>Linuxを再インストールした直後</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb        5.5G  1.3G  3.9G  25% /
</code></pre></li>

<li><p>VSCodeのインストールしてdebファイル削除したあと</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb        5.5G  1.8G  3.4G  34% /
</code></pre></li>

<li><p>mozcインストール後</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb        5.5G  2.1G  3.1G  42% /
</code></pre></li>

<li><p>fonts-notoインストール後</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb        5.5G  2.2G  3.0G  42% /
</code></pre></li>

<li><p>1GB程度消費する模様</p></li>
</ul>

<h2 id="https-qiita-com-kukita-items-b673bf6eba2cc91fc545-に沿ってgoもインストールする"><a href="https://qiita.com/kukita/items/b673bf6eba2cc91fc545">https://qiita.com/kukita/items/b673bf6eba2cc91fc545</a> に沿ってGoもインストールする</h2>

<ul>
<li><p>goインストール後</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb        5.5G  2.6G  2.7G  50% /
</code></pre></li>

<li><p>VSCode拡張機能などインストール後</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb        5.5G  2.8G  2.5G  53% /
</code></pre></li>
</ul>

<h2 id="dockerインストール">dockerインストール</h2>

<ul>
<li><p><a href="https://docs.docker.com/install/linux/docker-ce/debian/#install-using-the-repository">公式の手順</a>で実施</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb        5.5G  3.2G  2.0G  62% /
</code></pre></li>

<li><p>VSCodeのDocker拡張を使うには、sudoいらなくする設定と再ログインが必要。</p>

<pre><code>$ sudo groupadd docker
$ sudo usermod -aG docker $USER
</code></pre></li>
</ul>

<h2 id="まとめ">まとめ</h2>

<ul>
<li>VSCode使うには1GB以上の空き領域が必要。</li>
<li>先人の知恵に感謝。</li>
<li>元記事にもあるように、dlvはインストールできない。arm用パッケージがないらしい。</li>
<li>dlvがないとデバッグ実行ができない。</li>
<li>Remote Development拡張入れようとしたら、本体のバージョンが足りていなくてできなかった。</li>
<li>容量が足りなくなったのは、不要なコンテナイメージが残っていたのかもしれない。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/30_chromebook_vscode3/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/30_chromebook_vscode3/</guid>
			<description>ChromeBook(C223NA)にVSCodeをインストールする C101PAで一通りできたのでインテルCPUの機種でもやってみる
 インストール開始
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/vdb 18G 1.2G 15G 8% /  広い
 aptの設定追加はしていない
 golang-1.11 が見つからなかったので設定追加した  VSCodeのパッケージファイルは公式から取得
 fonts-notoまでインストール終わった時点での消費
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/vdb 18G 1.7G 15G 11% /  C101PAのときより消費が少ない
 golangともろもろ拡張機能インストール
$ df -h Filesystem Size Used Avail Use% Mounted on /dev/vdb 18G 2.4G 14G 15% /  余裕。 C101PAでインストールできなかったdlvも入った。</description>
			<content type="html"><![CDATA[

<h1 id="chromebook-c223na-にvscodeをインストールする">ChromeBook(C223NA)にVSCodeをインストールする</h1>

<p>C101PAで一通りできたのでインテルCPUの機種でもやってみる</p>

<ul>
<li><p>インストール開始</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb         18G  1.2G   15G   8% /
</code></pre>

<p>広い</p></li>

<li><p>aptの設定追加はしていない</p>

<ul>
<li>golang-1.11 が見つからなかったので設定追加した</li>
</ul></li>

<li><p>VSCodeのパッケージファイルは公式から取得</p></li>

<li><p>fonts-notoまでインストール終わった時点での消費</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb         18G  1.7G   15G  11% /
</code></pre>

<p>C101PAのときより消費が少ない</p></li>

<li><p>golangともろもろ拡張機能インストール</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb         18G  2.4G   14G  15% /
</code></pre>

<p>余裕。
C101PAでインストールできなかった<code>dlv</code>も入った。</p></li>

<li><p>dockerインストール</p>

<pre><code>$ df -h
Filesystem      Size  Used Avail Use% Mounted on
/dev/vdb         18G  3.0G   13G  19% /
</code></pre>

<p>VSCodeのremoteも入った！</p></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/07/31_azure_devops/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/07/31_azure_devops/</guid>
			<description> Azure DevOpsを使ってみる https://azure.microsoft.com/ja-jp/services/devops/
 このリポジトリを対象にパイプラインを作成 パイプラインでHugoとか使ってpages更新できないかと  </description>
			<content type="html"><![CDATA[

<h1 id="azure-devopsを使ってみる">Azure DevOpsを使ってみる</h1>

<p><a href="https://azure.microsoft.com/ja-jp/services/devops/">https://azure.microsoft.com/ja-jp/services/devops/</a></p>

<ul>
<li>このリポジトリを対象にパイプラインを作成</li>
<li>パイプラインでHugoとか使ってpages更新できないかと</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/08/04_golang_ghq/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/08/04_golang_ghq/</guid>
			<description> ghqのインストール  「改訂2版 みんなのGo言語」を買ったのでC101PAで試しながら読みすすめていた。 ghqをインストールするところでエラー。 どうやらgoのバージョンを1.12以上にあげないとダメらしい。 先日パッケージでインストールしたgoは1.11.6だった。 以前のやり方でインストールし直す ~/.bash_profile の GOROOT は /usr/local/go に変更してsourceする。 無事インストール完了。  </description>
			<content type="html"><![CDATA[

<h1 id="ghqのインストール">ghqのインストール</h1>

<ul>
<li>「改訂2版 みんなのGo言語」を買ったのでC101PAで試しながら読みすすめていた。</li>
<li>ghqをインストールするところでエラー。</li>
<li>どうやらgoのバージョンを1.12以上にあげないとダメらしい。</li>
<li>先日パッケージでインストールしたgoは1.11.6だった。</li>
<li><a href="https://github.com/umemak/blog/blob/master/2019/07/17_chromebook_golang.md">以前のやり方</a>でインストールし直す</li>
<li>~/.bash_profile の <code>GOROOT</code> は <code>/usr/local/go</code> に変更してsourceする。</li>
<li>無事インストール完了。</li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/08/18_rails6/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/08/18_rails6/</guid>
			<description>Rails6を試す  リリースされていたので、アップデートしてみる https://weblog.rubyonrails.org/2019/8/15/Rails-6-0-final-release/ 対象 https://github.com/umemak/hello_app Gemfileを編集
gem &#39;rails&#39;, &#39;&amp;gt;=6.0.0&#39;  bundle updateする環境を準備
docker run -it -v `pwd`:/usr/src/work ruby bash  bundle update
root@5655bc438c4d:/usr/src/work# bundle update Fetching gem metadata from https://rubygems.org/............ Fetching gem metadata from https://rubygems.org/. Resolving dependencies.... Bundler could not find compatible versions for gem &amp;quot;railties&amp;quot;: In Gemfile: coffee-rails (= 4.2.2) was resolved to 4.2.2, which depends on railties (&amp;gt;= 4.0.0) jquery-rails (= 4.3.1) was resolved to 4.3.1, which depends on railties (&amp;gt;= 4.</description>
			<content type="html"><![CDATA[

<h1 id="rails6を試す">Rails6を試す</h1>

<ul>
<li>リリースされていたので、アップデートしてみる
<a href="https://weblog.rubyonrails.org/2019/8/15/Rails-6-0-final-release/">https://weblog.rubyonrails.org/2019/8/15/Rails-6-0-final-release/</a></li>
<li>対象
<a href="https://github.com/umemak/hello_app">https://github.com/umemak/hello_app</a></li>

<li><p>Gemfileを編集</p>

<pre><code>gem 'rails', '&gt;=6.0.0'
</code></pre></li>

<li><p>bundle updateする環境を準備</p>

<pre><code>docker run -it -v `pwd`:/usr/src/work ruby bash
</code></pre></li>

<li><p>bundle update</p>

<pre><code>root@5655bc438c4d:/usr/src/work# bundle update
Fetching gem metadata from https://rubygems.org/............
Fetching gem metadata from https://rubygems.org/.
Resolving dependencies....
Bundler could not find compatible versions for gem &quot;railties&quot;:
In Gemfile:
  coffee-rails (= 4.2.2) was resolved to 4.2.2, which depends on
    railties (&gt;= 4.0.0)

  jquery-rails (= 4.3.1) was resolved to 4.3.1, which depends on
    railties (&gt;= 4.2.0)

  rails (&gt;= 6.0.0) was resolved to 6.0.0, which depends on
    railties (= 6.0.0)

  sass-rails (= 5.0.6) was resolved to 5.0.6, which depends on
    railties (&gt;= 4.0.0, &lt; 6)

  web-console (= 3.5.1) was resolved to 3.5.1, which depends on
    railties (&gt;= 5.0)

Bundler could not find compatible versions for gem &quot;spring&quot;:
In Gemfile:
  spring (= 2.0.2)

  spring-watcher-listen (= 2.0.1) was resolved to 2.0.1, which depends on
    spring (&gt;= 1.2, &lt; 3.0)
</code></pre></li>
</ul>

<p>とりあえず、エラーになっているgemのバージョン指定に<code>&gt;=</code>をつけてupdateできた。</p>

<pre><code>  root@5655bc438c4d:/usr/src/work# rails -v
  Rails 6.0.0
</code></pre>

<ul>
<li><p>動作確認</p>

<pre><code>rails s
</code></pre>

<p>execjsでエラー。<a href="https://github.com/rails/execjs">https://github.com/rails/execjs</a> の通りにgemをインストール</p>

<pre><code>gem install execjs
</code></pre>

<p>まだエラー。JSの実行環境も必要らしいのでnodejsをインストール</p>

<pre><code>apt update
apt install nodejs -y
</code></pre>

<pre><code>root@d02c06050dc6:/usr/src/work# rails s
=&gt; Booting Puma
=&gt; Rails 6.0.0 application starting in development 
=&gt; Run `rails server --help` for more startup options
Puma starting in single mode...
* Version 3.9.1 (ruby 2.6.3-p62), codename: Private Caller
* Min threads: 5, max threads: 5
* Environment: development
* Listening on tcp://0.0.0.0:3000
Use Ctrl-C to stop
</code></pre>

<p>動いた！
が、port開け忘れた。。。
docker再起動してもいいけどbundle install時間かかるし。。</p></li>

<li><p>docker commit
別のターミナル開いて、イメージにタグつけて保存して起動しなおす</p>

<pre><code>$ docker commit 5655bc438c4d rails6test
$ docker run -it -p 3000:3000 -v `pwd`:/usr/src/work rails6test bash
root@d02c06050dc6:/usr/src/work# rails s
=&gt; Booting Puma
=&gt; Rails 6.0.0 application starting in development 
=&gt; Run `rails server --help` for more startup options
Puma starting in single mode...
* Version 3.9.1 (ruby 2.6.3-p62), codename: Private Caller
* Min threads: 5, max threads: 5
* Environment: development
* Listening on tcp://0.0.0.0:3000
Use Ctrl-C to stop
</code></pre>

<p>できた。</p></li>

<li><p><a href="http://127.0.0.1:3000">http://127.0.0.1:3000</a></p>

<pre><code>2019-08-18 02:08:23 +0000: Rack app error handling request { GET / }
#&lt;LoadError: Error loading the 'sqlite3' Active Record adapter. Missing a gem it depends on? can't activate sqlite3 (~&gt; 1.4), already activated sqlite3-1.3.13. Make sure all dependencies are added to Gemfile.&gt;
</code></pre>

<p>む。。。
Gemfileのsqlite3もバージョン指定を緩める。</p>

<pre><code>Started GET &quot;/&quot; for 172.17.0.1 at 2019-08-18 02:19:05 +0000
Cannot render console from 172.17.0.1! Allowed networks: 127.0.0.0/127.255.255.255, ::1
 (5.8ms)  SELECT sqlite_version(*)
Processing by ApplicationController#hello as HTML
Rendering html template
Rendered html template (Duration: 1.9ms | Allocations: 5)
Completed 200 OK in 39ms (Views: 30.3ms | ActiveRecord: 0.0ms | Allocations: 1383)
</code></pre>

<p>できた！</p></li>

<li><p><a href="https://github.com/umemak/hello_app/commit/84cc280f3776cc72d85c9bac088f8ef50cd5eaf8">https://github.com/umemak/hello_app/commit/84cc280f3776cc72d85c9bac088f8ef50cd5eaf8</a></p></li>
</ul>
]]></content>
		</item>
		
		<item>
			<title></title>
			<link>https://example.com/posts/2019/08/20_mercari.go#10/</link>
			<pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
			
			<guid>https://example.com/posts/2019/08/20_mercari.go#10/</guid>
			<description>mercari.go #10 https://mercari.connpass.com/event/141122/
19:40 ~ morikuni GopherCon 2019  GopherConとは  2014年デンバーで始まった。いろんなところでやっている。 今年はサンディエゴで開催 1800人を超える参加者  Mercariの関わり  Silver Sponsor BOLD Scholarship 学生向け 11+2名参加  １日目はワークショップ ２日目３日目は発表がメイン ４日目はコミュニティデイ  LTとか  One MOre Thing  Generics(Contracts) Interfaceとの違い 直和型   19:50 ~ mark.hahn Workshop: Go-Beginner Training  英語の発表だけど聞き取りやすかった Goは1日で習得できる（シンプル）  20:00 ~ micnnicim How Uber Goes  1500サービス、200M行がGoで書かれている MONOREPOへの移行 uber-go/fx  アプリケーションフレームワーク  glue  非公開ライブラリ クリーンアーキテクチャ  Bazel  OSSのビルドツール monorepoに効く？   20:15 ~ upamune How I Write HTTP Web Services After Eight Years  Mat Ryer  https://gopherize.</description>
			<content type="html"><![CDATA[

<h1 id="mercari-go-10">mercari.go #10</h1>

<p><a href="https://mercari.connpass.com/event/141122/">https://mercari.connpass.com/event/141122/</a></p>

<h2 id="19-40-morikuni-gophercon-2019">19:40 ~  morikuni    GopherCon 2019</h2>

<ul>
<li>GopherConとは

<ul>
<li>2014年デンバーで始まった。いろんなところでやっている。</li>
<li>今年はサンディエゴで開催</li>
<li>1800人を超える参加者</li>
</ul></li>
<li>Mercariの関わり

<ul>
<li>Silver Sponsor</li>
<li>BOLD Scholarship</li>
<li>学生向け</li>
<li>11+2名参加</li>
</ul></li>
<li>１日目はワークショップ</li>
<li>２日目３日目は発表がメイン</li>
<li>４日目はコミュニティデイ

<ul>
<li>LTとか</li>
</ul></li>
<li>One MOre Thing

<ul>
<li>Generics(Contracts)</li>
<li>Interfaceとの違い</li>
<li>直和型</li>
</ul></li>
</ul>

<h2 id="19-50-mark-hahn-workshop-go-beginner-training">19:50 ~  mark.hahn   Workshop: Go-Beginner Training</h2>

<ul>
<li>英語の発表だけど聞き取りやすかった</li>
<li>Goは1日で習得できる（シンプル）</li>
</ul>

<h2 id="20-00-micnnicim-how-uber-goes">20:00 ~  micnnicim   How Uber Goes</h2>

<ul>
<li>1500サービス、200M行がGoで書かれている</li>
<li>MONOREPOへの移行</li>
<li><a href="https://github.com/uber-go/fx">uber-go/fx</a>

<ul>
<li>アプリケーションフレームワーク</li>
</ul></li>
<li>glue

<ul>
<li>非公開ライブラリ</li>
<li>クリーンアーキテクチャ</li>
</ul></li>
<li><a href="https://bazel.build/">Bazel</a>

<ul>
<li>OSSのビルドツール</li>
<li>monorepoに効く？</li>
</ul></li>
</ul>

<h2 id="20-15-upamune-how-i-write-http-web-services-after-eight-years">20:15 ~  upamune How I Write HTTP Web Services After Eight Years</h2>

<ul>
<li>Mat Ryer

<ul>
<li><a href="https://gopherize.me/">https://gopherize.me/</a></li>
<li><a href="https://medium.com/statuscode/how-i-write-go-http-services-after-seven-years-37c208122831">https://medium.com/statuscode/how-i-write-go-http-services-after-seven-years-37c208122831</a></li>
</ul></li>
<li>Maintainability

<ul>
<li>最初から考えて作る</li>
</ul></li>
<li>Glaceability

<ul>
<li>視認性</li>
<li>理解しやすさ</li>
</ul></li>
<li>Code shuld be boring

<ul>
<li></li>
</ul></li>
<li>Self Similar code

<ul>
<li>コード内に似たコードがあると親しみやすくなる</li>
</ul></li>
</ul>

<h2 id="20-25-taqboz-tinygo">20:25 ~  taqboz  TinyGo</h2>

<ul>
<li>Small is going big</li>
<li>LLVMを使ったGoコンパイラ</li>
<li>WebAssembly対応</li>
<li>Goroutineのサポートが不完全</li>
<li>使えない標準パッケージが多い（net系全滅）</li>
<li>IoTデバイス、マイクロコントローラーでの活用</li>
<li>Drone飛ばすデモ</li>
</ul>

<h2 id="20-40-hunter-pki-for-gophers">20:40 ~  hunter  PKI for Gophers</h2>

<ul>
<li>暗号化の話</li>
<li>Hardware Keys

<ul>
<li>YubiKey</li>
</ul></li>
</ul>

<h2 id="20-50-yuki-ito-workshop-observability-in-go-socket-to-me-where-do-sockets-live-in-go">20:50 ~  yuki.ito    Workshop: Observability in Go &amp; Socket to me: Where do Sockets live in Go?</h2>

<ul>
<li>資料

<ul>
<li><a href="https://speakerdeck.com/110y/my-favorite-talks-at-gophercon-2019">https://speakerdeck.com/110y/my-favorite-talks-at-gophercon-2019</a></li>
<li><a href="https://github.com/freeformz/go-observability-workshop/">https://github.com/freeformz/go-observability-workshop/</a></li>
<li><a href="https://github.com/110y/sockoptgo/">https://github.com/110y/sockoptgo/</a></li>
</ul></li>
<li>Observability

<ul>
<li>Log</li>
<li>logrus 構造化出力できる</li>
<li>Metric</li>
<li>expvar</li>
<li>Prometheus</li>
<li>Trace</li>
<li>Jaeger</li>
</ul></li>
<li>Socket Option</li>
</ul>

<h2 id="go-quiz">Go Quiz</h2>

<ul>
<li>型厳密なのな。。</li>
</ul>
]]></content>
		</item>
		
	</channel>
</rss>
